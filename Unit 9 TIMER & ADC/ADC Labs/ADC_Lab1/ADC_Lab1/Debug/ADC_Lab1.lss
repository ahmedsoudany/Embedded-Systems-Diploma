
ADC_Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f1  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e0  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "util/delay.h"
#include <avr/interrupt.h>

int main(void)
{
	DDRC = 0xFF; //make port C an output for 7seg
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF; //make port D an output for 7seg
  70:	81 bb       	out	0x11, r24	; 17
	DDRA = 0;	 //make port A input for ADC input
  72:	1a ba       	out	0x1a, r1	; 26
	
	//Internal 2.56V Voltage Reference with external capacitor at AREF pin and select channel 0
	ADMUX = ( (1<<REFS0) | (1<<REFS1) );  //ADMUX = 0b11 << 6;
  74:	80 ec       	ldi	r24, 0xC0	; 192
  76:	87 b9       	out	0x07, r24	; 7
	//ADC Prescaler ==> 128 and Enable ADC
	ADCSRA = ( (0b111 << 0) | (1<<ADEN) ); 
  78:	87 e8       	ldi	r24, 0x87	; 135
  7a:	86 b9       	out	0x06, r24	; 6
    /* Replace with your application code */
    while (1) 
    {
		//Start conversion
		ADCSRA |= (1<<ADSC);
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	86 b9       	out	0x06, r24	; 6
		//wait for conversion to finish
		while( (ADCSRA & (1 << ADIF)) == 0); //ADC interrupt flag
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <main+0x16>
		PORTD = ADCL;  // low byte  ==> PORTD
  86:	84 b1       	in	r24, 0x04	; 4
  88:	82 bb       	out	0x12, r24	; 18
		PORTC = ADCH;  // high byte ==> PORTC
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	85 bb       	out	0x15, r24	; 21
		 
    }
  8e:	f6 cf       	rjmp	.-20     	; 0x7c <main+0x10>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
