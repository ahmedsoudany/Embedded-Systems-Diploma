
ADC_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  0000072f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000203  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_16>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_16>:
#include <avr/interrupt.h>

#define ACD_Converted_Data (*(volatile uint16_t *)(0x24)) //uint16_t* pointer to point on two bytes L & H

ISR(ADC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTD = ACD_Converted_Data;  // low byte  ==> PORTD
  7a:	84 b1       	in	r24, 0x04	; 4
  7c:	95 b1       	in	r25, 0x05	; 5
  7e:	82 bb       	out	0x12, r24	; 18
	PORTC = ACD_Converted_Data >> 8;  // high byte ==> PORTC
  80:	84 b1       	in	r24, 0x04	; 4
  82:	95 b1       	in	r25, 0x05	; 5
  84:	95 bb       	out	0x15, r25	; 21
	//Start conversion
	ADCSRA |= (1<<ADSC);
  86:	86 b1       	in	r24, 0x06	; 6
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	86 b9       	out	0x06, r24	; 6
}
  8c:	9f 91       	pop	r25
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <main>:
int main(void)
{
	DDRC = 0xFF; //make port C an output for 7seg
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF; //make port D an output for 7seg
  9e:	81 bb       	out	0x11, r24	; 17
	DDRA = 0;	 //make port A input for ADC input
  a0:	1a ba       	out	0x1a, r1	; 26
	sei();		//Enable global interrupt
  a2:	78 94       	sei
	//Internal 2.56V Voltage Reference with external capacitor at AREF pin and select channel 0
	ADMUX = ( (1<<REFS0) | (1<<REFS1) );  //ADMUX = 0b11 << 6;
  a4:	80 ec       	ldi	r24, 0xC0	; 192
  a6:	87 b9       	out	0x07, r24	; 7
	//ADC Prescaler ==> 128 and Enable ADC and Enable interrupt
	ADCSRA = ( (0b111 << 0) | (1<<ADEN) | (1<<ADIE) );
  a8:	8f e8       	ldi	r24, 0x8F	; 143
  aa:	86 b9       	out	0x06, r24	; 6
	
	//Start conversion
	ADCSRA |= (1<<ADSC);
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	86 b9       	out	0x06, r24	; 6
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x18>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
