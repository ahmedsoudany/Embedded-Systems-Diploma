/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//Addresses of tHE GPIOA
#define GPIOA_Base 0x40010800
#define GPIOA_CRH  *(volatile unsigned int *)(EXTI_Base + 0x04)
#define GPIOx_ODR  *(volatile unsigned int *)(EXTI_Base + 0x0C)
#define GPIOA_CRL  *(volatile unsigned int *)(EXTI_Base + 0x00) // To config the external push button
//Addresses of the External interrupt
#define EXTI_Base   0x40010400
#define EXTI_IMR   *(volatile unsigned int *)(EXTI_Base + 0x00)
#define EXTI_RTSR  *(volatile unsigned int *)(EXTI_Base + 0x08)
#define EXTI_PR  *(volatile unsigned int *)(EXTI_Base + 0x14)
//Addresses of the Interrupt GPOI pin of the AFIO
#define AFIO_Base   0x40010000
#define AFIO_EXTICR1 *(volatile unsigned int *)(AFIO_Base + 0x08)
//Addresses of the Clock
#define RCC_Base 0x40021000
#define RCC_APB2ENR *(volatile unsigned int *)(RCC_Base + 0x18)
//Addresses of the IRQ
#define NVIC_ISER0 *(volatile unsigned int *)(0xE000E100)

void GPIO_PIN13_output_init()
{
	GPIOA_CRH &= 0xFF0FFFFF;
	GPIOA_CRH |= 0x00200000;


}
void GPIO_PINO_input_init()
{
	GPIOA_CRL |= (1<<2);
}
void clock_init()
{
	//IO port A clock enable
	RCC_APB2ENR |= (1<<2);

	//Alternate function IO clock enable
	RCC_APB2ENR |= (1<<0);
}

int main(void)
{


	//To Enable Hardware Interrupt
	//1- Configure the mask bits of the 20 Interrupt lines (EXTI_IMR)
	//2- Configure the Trigger Selection bits of the Interrupt lines (EXTI_RTSR)
	//3- Configure the enable and mask bits that control the NVIC IRQ channel mapped to the
	//   External Interrupt Controller (EXTI)

	//to select the source input for EXTI0 external interrupt = PA0
	AFIO_EXTICR1 = 0x0; //Select PORTA for EXTI0

	//Interrupt request from Line x is masked
	EXTI_IMR |= (1<<0); //Enable Mask EXTI0
	//to Rising trigger event configuration bit of line 0
	EXTI_RTSR |= (1<<0); //Enable Rising trigger Enabled


	NVIC_ISER0 |= (1<<6); //Enable NVIC IRQ 6 (EXTI0)

	//Inialization of modules
	clock_init();
	GPIO_PINO_input_init();
	GPIO_PIN13_output_init();

	while(1);

}

void EXTI0_IRQHandler
{
	//Toggle led
	GPIOx_ODR ^= (1<<13);
	//Clear pending request
	EXTI_PR |= (1<<0);

}
