
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d18  08000d18  00010d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d40  08000d40  00010d48  2**0
                  CONTENTS
  4 .ARM          00000000  08000d40  08000d40  00010d48  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d40  08000d48  00010d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d44  08000d44  00010d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000d48  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000d48  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002eaa  00000000  00000000  00010d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008be  00000000  00000000  00013c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  000144e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  00014690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000c94  00000000  00000000  000147f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e28  00000000  00000000  0001548c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a635  00000000  00000000  000172b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000218e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000055c  00000000  00000000  00021964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d00 	.word	0x08000d00

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d00 	.word	0x08000d00

08000170 <delay_ms>:


#include "LCD.h"

static void delay_ms(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i , j ;
	for(i = 0 ; i < time ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
	{
		for(j = 0 ; j < 255  ; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for(i = 0 ; i < time ; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_Init>:
/* ========================================== */
/*			 Functions Definitions 			  */
/* ========================================== */

void LCD_GPIO_Init()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0

	/* ===========Set Control PINS to OUTPUT=========== */

	/* RS PIN config ==> OUTPUT */
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001ac:	4b52      	ldr	r3, [pc, #328]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001ba:	4b4f      	ldr	r3, [pc, #316]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c0:	494d      	ldr	r1, [pc, #308]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001c2:	484e      	ldr	r0, [pc, #312]	; (80002fc <LCD_GPIO_Init+0x154>)
 80001c4:	f000 fc2d 	bl	8000a22 <MCAL_GPIO_Init>

	/* RW PIN config ==> OUTPUT */
	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d0:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001dc:	4946      	ldr	r1, [pc, #280]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001de:	4847      	ldr	r0, [pc, #284]	; (80002fc <LCD_GPIO_Init+0x154>)
 80001e0:	f000 fc1f 	bl	8000a22 <MCAL_GPIO_Init>

	/* EN PIN config ==> OUTPUT */
	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001e4:	4b44      	ldr	r3, [pc, #272]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001f8:	493f      	ldr	r1, [pc, #252]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80001fa:	4840      	ldr	r0, [pc, #256]	; (80002fc <LCD_GPIO_Init+0x154>)
 80001fc:	f000 fc11 	bl	8000a22 <MCAL_GPIO_Init>

	/* ===========Set LCD PORT PINS to OUTPUT=========== */

	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000212:	4939      	ldr	r1, [pc, #228]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000214:	4839      	ldr	r0, [pc, #228]	; (80002fc <LCD_GPIO_Init+0x154>)
 8000216:	f000 fc04 	bl	8000a22 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800022c:	4932      	ldr	r1, [pc, #200]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <LCD_GPIO_Init+0x154>)
 8000230:	f000 fbf7 	bl	8000a22 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <LCD_GPIO_Init+0x154>)
 800024a:	f000 fbea 	bl	8000a22 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000260:	4925      	ldr	r1, [pc, #148]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <LCD_GPIO_Init+0x154>)
 8000264:	f000 fbdd 	bl	8000a22 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800027a:	491f      	ldr	r1, [pc, #124]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800027c:	481f      	ldr	r0, [pc, #124]	; (80002fc <LCD_GPIO_Init+0x154>)
 800027e:	f000 fbd0 	bl	8000a22 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000294:	4918      	ldr	r1, [pc, #96]	; (80002f8 <LCD_GPIO_Init+0x150>)
 8000296:	4819      	ldr	r0, [pc, #100]	; (80002fc <LCD_GPIO_Init+0x154>)
 8000298:	f000 fbc3 	bl	8000a22 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <LCD_GPIO_Init+0x150>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <LCD_GPIO_Init+0x154>)
 80002b2:	f000 fbb6 	bl	8000a22 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <LCD_GPIO_Init+0x150>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <LCD_GPIO_Init+0x154>)
 80002cc:	f000 fba9 	bl	8000a22 <MCAL_GPIO_Init>

	/* Set Control signal to Low (Sink current) */
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <LCD_GPIO_Init+0x154>)
 80002d8:	f000 fc22 	bl	8000b20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <LCD_GPIO_Init+0x154>)
 80002e4:	f000 fc1c 	bl	8000b20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <LCD_GPIO_Init+0x154>)
 80002f0:	f000 fc16 	bl	8000b20 <MCAL_GPIO_WritePin>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000001c 	.word	0x2000001c
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_Init>:

void LCD_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	delay_ms(20);
 8000304:	2014      	movs	r0, #20
 8000306:	f7ff ff33 	bl	8000170 <delay_ms>
	LCD_GPIO_Init();
 800030a:	f7ff ff4d 	bl	80001a8 <LCD_GPIO_Init>
	delay_ms(15);
 800030e:	200f      	movs	r0, #15
 8000310:	f7ff ff2e 	bl	8000170 <delay_ms>

	LCD_Clear_Screen();
 8000314:	f000 f894 	bl	8000440 <LCD_Clear_Screen>


	#ifdef EIGHT_BIT_MODE
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 8000318:	2038      	movs	r0, #56	; 0x38
 800031a:	f000 f80b 	bl	8000334 <LCD_Write_Command>
	#ifdef FOUR_BIT_MODE
	LCD_Write_Command(0x02);
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
	#endif

	LCD_Write_Command(LCD_ENTRY_MODE);
 800031e:	2006      	movs	r0, #6
 8000320:	f000 f808 	bl	8000334 <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000324:	2080      	movs	r0, #128	; 0x80
 8000326:	f000 f805 	bl	8000334 <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 800032a:	200f      	movs	r0, #15
 800032c:	f000 f802 	bl	8000334 <LCD_Write_Command>


}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}

08000334 <LCD_Write_Command>:
void LCD_Write_Command(uint8_t cmd)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	#ifdef EIGHT_BIT_MODE
	//LCD_Check_LCD_IsBusy();
	MCAL_GPIO_WritePort(LCD_CTRL, cmd);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	b29b      	uxth	r3, r3
 8000342:	4619      	mov	r1, r3
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <LCD_Write_Command+0x40>)
 8000346:	f000 fc02 	bl	8000b4e <MCAL_GPIO_WritePort>
	//LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (cmd);
	//LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^cmd) & 0x00FF;
	//CD_CTRL->CRL = cmd;
	//LCD_CTRL ^= (LCD_CTRL-> ^cmd) & 0x00FF;
	/* Set as Write MODE ==> 0 */
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000350:	4808      	ldr	r0, [pc, #32]	; (8000374 <LCD_Write_Command+0x40>)
 8000352:	f000 fbe5 	bl	8000b20 <MCAL_GPIO_WritePin>
	/* Set as Command MODE ==> 0 */
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035c:	4805      	ldr	r0, [pc, #20]	; (8000374 <LCD_Write_Command+0x40>)
 800035e:	f000 fbdf 	bl	8000b20 <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000362:	2001      	movs	r0, #1
 8000364:	f7ff ff04 	bl	8000170 <delay_ms>
	LCD_Lcd_kick();
 8000368:	f000 f854 	bl	8000414 <LCD_Lcd_kick>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
	delay_ms(1);
	LCD_Lcd_kick();
	#endif

}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40010800 	.word	0x40010800

08000378 <LCD_Write_Char>:
void LCD_Write_Char(uint8_t ch)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]

//	LCD_Check_LCD_IsBusy();
	/* Set as Data MODE ==> 1 */
	MCAL_GPIO_WritePort(LCD_CTRL,ch);
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	b29b      	uxth	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <LCD_Write_Char+0x40>)
 800038a:	f000 fbe0 	bl	8000b4e <MCAL_GPIO_WritePort>

	//LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ ch) & 0x00FF;
	//MCAL_GPIO_WritePort(LCD_CTRL, ch);
	//LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ ch) & 0x00FF;
	/* Set Write MODE ==> 0 */
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000394:	4808      	ldr	r0, [pc, #32]	; (80003b8 <LCD_Write_Char+0x40>)
 8000396:	f000 fbc3 	bl	8000b20 <MCAL_GPIO_WritePin>
	/* Set as Data MODE ==> 1 */
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <LCD_Write_Char+0x40>)
 80003a2:	f000 fbbd 	bl	8000b20 <MCAL_GPIO_WritePin>

	delay_ms(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f7ff fee2 	bl	8000170 <delay_ms>
	LCD_Lcd_kick();
 80003ac:	f000 f832 	bl	8000414 <LCD_Lcd_kick>
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40010800 	.word	0x40010800

080003bc <LCD_Write_Str>:
void LCD_Write_Str(uint8_t *st)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	int count = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]

	while(*st > 0)
 80003c8:	e01c      	b.n	8000404 <LCD_Write_Str+0x48>
	{
		count++;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3301      	adds	r3, #1
 80003ce:	60fb      	str	r3, [r7, #12]
		LCD_Write_Char(*st++);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ffcd 	bl	8000378 <LCD_Write_Char>
		if(count == 16)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2b10      	cmp	r3, #16
 80003e2:	d104      	bne.n	80003ee <LCD_Write_Str+0x32>
		{
			LCD_GOTO_XY(2, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	2002      	movs	r0, #2
 80003e8:	f000 f831 	bl	800044e <LCD_GOTO_XY>
 80003ec:	e00a      	b.n	8000404 <LCD_Write_Str+0x48>
		}
		else if (count == 32)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	2b20      	cmp	r3, #32
 80003f2:	d107      	bne.n	8000404 <LCD_Write_Str+0x48>
		{
			LCD_Clear_Screen();
 80003f4:	f000 f824 	bl	8000440 <LCD_Clear_Screen>
			LCD_GOTO_XY(1, 0);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 f827 	bl	800044e <LCD_GOTO_XY>
			count = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
	while(*st > 0)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1de      	bne.n	80003ca <LCD_Write_Str+0xe>
		}
	}
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <LCD_Lcd_kick>:
	/* Set as Write MODE ==> 0 */
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);

}
void LCD_Lcd_kick(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	4807      	ldr	r0, [pc, #28]	; (800043c <LCD_Lcd_kick+0x28>)
 8000420:	f000 fb7e 	bl	8000b20 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000424:	2032      	movs	r0, #50	; 0x32
 8000426:	f7ff fea3 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <LCD_Lcd_kick+0x28>)
 8000432:	f000 fb75 	bl	8000b20 <MCAL_GPIO_WritePin>

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800

08000440 <LCD_Clear_Screen>:
void LCD_Clear_Screen(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	LCD_Write_Command(LCD_CLEAR_SCREEN);
 8000444:	2001      	movs	r0, #1
 8000446:	f7ff ff75 	bl	8000334 <LCD_Write_Command>
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}

0800044e <LCD_GOTO_XY>:
void LCD_GOTO_XY(uint8_t line,uint8_t position)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	4603      	mov	r3, r0
 8000456:	460a      	mov	r2, r1
 8000458:	71fb      	strb	r3, [r7, #7]
 800045a:	4613      	mov	r3, r2
 800045c:	71bb      	strb	r3, [r7, #6]
	if(line == 1)
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d108      	bne.n	8000476 <LCD_GOTO_XY+0x28>
	{
		if(position < 16 && position >= 0)
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	2b0f      	cmp	r3, #15
 8000468:	d805      	bhi.n	8000476 <LCD_GOTO_XY+0x28>
		{
			LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW + position);
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	3b80      	subs	r3, #128	; 0x80
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff5f 	bl	8000334 <LCD_Write_Command>
		}
	}
	if(line == 2)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b02      	cmp	r3, #2
 800047a:	d108      	bne.n	800048e <LCD_GOTO_XY+0x40>
	{
		if(position < 16 && position >= 0)
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d805      	bhi.n	800048e <LCD_GOTO_XY+0x40>
		{
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_ROW + position);
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	3b40      	subs	r3, #64	; 0x40
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff53 	bl	8000334 <LCD_Write_Command>
		}
	}
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <Enable_NVIC>:
*				  Generic Functions
* ==================================================================
*/

void Enable_NVIC(uint16_t IRQ)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	2b0f      	cmp	r3, #15
 80004a6:	d854      	bhi.n	8000552 <Enable_NVIC+0xba>
 80004a8:	a201      	add	r2, pc, #4	; (adr r2, 80004b0 <Enable_NVIC+0x18>)
 80004aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ae:	bf00      	nop
 80004b0:	080004f1 	.word	0x080004f1
 80004b4:	080004ff 	.word	0x080004ff
 80004b8:	0800050d 	.word	0x0800050d
 80004bc:	0800051b 	.word	0x0800051b
 80004c0:	08000529 	.word	0x08000529
 80004c4:	08000537 	.word	0x08000537
 80004c8:	08000537 	.word	0x08000537
 80004cc:	08000537 	.word	0x08000537
 80004d0:	08000537 	.word	0x08000537
 80004d4:	08000537 	.word	0x08000537
 80004d8:	08000545 	.word	0x08000545
 80004dc:	08000545 	.word	0x08000545
 80004e0:	08000545 	.word	0x08000545
 80004e4:	08000545 	.word	0x08000545
 80004e8:	08000545 	.word	0x08000545
 80004ec:	08000545 	.word	0x08000545
	{
		case 0:
			NVIC_IRQ6_EXTI0_Enable;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <Enable_NVIC+0xc4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <Enable_NVIC+0xc4>)
 80004f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fa:	6013      	str	r3, [r2, #0]
		break;
 80004fc:	e029      	b.n	8000552 <Enable_NVIC+0xba>

		case 1:
			NVIC_IRQ7_EXTI1_Enable;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <Enable_NVIC+0xc4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <Enable_NVIC+0xc4>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000508:	6013      	str	r3, [r2, #0]
		break;
 800050a:	e022      	b.n	8000552 <Enable_NVIC+0xba>

		case 2:
			NVIC_IRQ8_EXTI2_Enable;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <Enable_NVIC+0xc4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <Enable_NVIC+0xc4>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
		break;
 8000518:	e01b      	b.n	8000552 <Enable_NVIC+0xba>

		case 3:
			NVIC_IRQ9_EXTI3_Enable;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <Enable_NVIC+0xc4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <Enable_NVIC+0xc4>)
 8000520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000524:	6013      	str	r3, [r2, #0]
		break;
 8000526:	e014      	b.n	8000552 <Enable_NVIC+0xba>

		case 4:
			NVIC_IRQ10_EXTI4_Enable;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <Enable_NVIC+0xc4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <Enable_NVIC+0xc4>)
 800052e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000532:	6013      	str	r3, [r2, #0]
		break;
 8000534:	e00d      	b.n	8000552 <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Enable;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <Enable_NVIC+0xc4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <Enable_NVIC+0xc4>)
 800053c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000540:	6013      	str	r3, [r2, #0]
		break;
 8000542:	e006      	b.n	8000552 <Enable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Enable;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <Enable_NVIC+0xc8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <Enable_NVIC+0xc8>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6013      	str	r3, [r2, #0]
		break;
 8000550:	bf00      	nop

	}
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	e000e100 	.word	0xe000e100
 8000560:	e000e104 	.word	0xe000e104

08000564 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d854      	bhi.n	800061e <Disable_NVIC+0xba>
 8000574:	a201      	add	r2, pc, #4	; (adr r2, 800057c <Disable_NVIC+0x18>)
 8000576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057a:	bf00      	nop
 800057c:	080005bd 	.word	0x080005bd
 8000580:	080005cb 	.word	0x080005cb
 8000584:	080005d9 	.word	0x080005d9
 8000588:	080005e7 	.word	0x080005e7
 800058c:	080005f5 	.word	0x080005f5
 8000590:	08000603 	.word	0x08000603
 8000594:	08000603 	.word	0x08000603
 8000598:	08000603 	.word	0x08000603
 800059c:	08000603 	.word	0x08000603
 80005a0:	08000603 	.word	0x08000603
 80005a4:	08000611 	.word	0x08000611
 80005a8:	08000611 	.word	0x08000611
 80005ac:	08000611 	.word	0x08000611
 80005b0:	08000611 	.word	0x08000611
 80005b4:	08000611 	.word	0x08000611
 80005b8:	08000611 	.word	0x08000611
	{
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <Disable_NVIC+0xc4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <Disable_NVIC+0xc4>)
 80005c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c6:	6013      	str	r3, [r2, #0]
		break;
 80005c8:	e029      	b.n	800061e <Disable_NVIC+0xba>

		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <Disable_NVIC+0xc4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <Disable_NVIC+0xc4>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6013      	str	r3, [r2, #0]
		break;
 80005d6:	e022      	b.n	800061e <Disable_NVIC+0xba>

		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <Disable_NVIC+0xc4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <Disable_NVIC+0xc4>)
 80005de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e2:	6013      	str	r3, [r2, #0]
		break;
 80005e4:	e01b      	b.n	800061e <Disable_NVIC+0xba>

		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <Disable_NVIC+0xc4>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <Disable_NVIC+0xc4>)
 80005ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f0:	6013      	str	r3, [r2, #0]
		break;
 80005f2:	e014      	b.n	800061e <Disable_NVIC+0xba>

		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <Disable_NVIC+0xc4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <Disable_NVIC+0xc4>)
 80005fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fe:	6013      	str	r3, [r2, #0]
		break;
 8000600:	e00d      	b.n	800061e <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <Disable_NVIC+0xc4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <Disable_NVIC+0xc4>)
 8000608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800060c:	6013      	str	r3, [r2, #0]
		break;
 800060e:	e006      	b.n	800061e <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <Disable_NVIC+0xc8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <Disable_NVIC+0xc8>)
 8000616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061a:	6013      	str	r3, [r2, #0]
		break;
 800061c:	bf00      	nop
	}
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000e180 	.word	0xe000e180
 800062c:	e000e184 	.word	0xe000e184

08000630 <Update_EXTI>:




void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	//1- Configure the GPIO to be AF Input -> Floating Input

	GPIO_PinConfig_t PinCfg;
	//Update the GPIO Pin to be Floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	891b      	ldrh	r3, [r3, #8]
 800063c:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800063e:	2301      	movs	r3, #1
 8000640:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f9e8 	bl	8000a22 <MCAL_GPIO_Init>

	//==================================================

	//2- Update AFIO to Route between EXTI Line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	b29b      	uxth	r3, r3
 800065a:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4 ;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0303 	and.w	r3, r3, #3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	73bb      	strb	r3, [r7, #14]

	//Clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_Position);
 800066c:	4a61      	ldr	r2, [pc, #388]	; (80007f4 <Update_EXTI+0x1c4>)
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	3302      	adds	r3, #2
 8000672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	210f      	movs	r1, #15
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	495c      	ldr	r1, [pc, #368]	; (80007f4 <Update_EXTI+0x1c4>)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	4002      	ands	r2, r0
 8000688:	3302      	adds	r3, #2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_Position);
 800068e:	4a59      	ldr	r2, [pc, #356]	; (80007f4 <Update_EXTI+0x1c4>)
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	3302      	adds	r3, #2
 8000694:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4956      	ldr	r1, [pc, #344]	; (80007f8 <Update_EXTI+0x1c8>)
 800069e:	428b      	cmp	r3, r1
 80006a0:	d016      	beq.n	80006d0 <Update_EXTI+0xa0>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4955      	ldr	r1, [pc, #340]	; (80007fc <Update_EXTI+0x1cc>)
 80006a8:	428b      	cmp	r3, r1
 80006aa:	d00f      	beq.n	80006cc <Update_EXTI+0x9c>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4953      	ldr	r1, [pc, #332]	; (8000800 <Update_EXTI+0x1d0>)
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d008      	beq.n	80006c8 <Update_EXTI+0x98>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4952      	ldr	r1, [pc, #328]	; (8000804 <Update_EXTI+0x1d4>)
 80006bc:	428b      	cmp	r3, r1
 80006be:	d101      	bne.n	80006c4 <Update_EXTI+0x94>
 80006c0:	2303      	movs	r3, #3
 80006c2:	e006      	b.n	80006d2 <Update_EXTI+0xa2>
 80006c4:	2300      	movs	r3, #0
 80006c6:	e004      	b.n	80006d2 <Update_EXTI+0xa2>
 80006c8:	2302      	movs	r3, #2
 80006ca:	e002      	b.n	80006d2 <Update_EXTI+0xa2>
 80006cc:	2301      	movs	r3, #1
 80006ce:	e000      	b.n	80006d2 <Update_EXTI+0xa2>
 80006d0:	2300      	movs	r3, #0
 80006d2:	7bb9      	ldrb	r1, [r7, #14]
 80006d4:	408b      	lsls	r3, r1
 80006d6:	4618      	mov	r0, r3
 80006d8:	4946      	ldr	r1, [pc, #280]	; (80007f4 <Update_EXTI+0x1c4>)
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	4302      	orrs	r2, r0
 80006de:	3302      	adds	r3, #2
 80006e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//==================================================

	//3- Update Rising or Falling Register

	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006e4:	4b48      	ldr	r3, [pc, #288]	; (8000808 <Update_EXTI+0x1d8>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a44      	ldr	r2, [pc, #272]	; (8000808 <Update_EXTI+0x1d8>)
 80006f8:	400b      	ands	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <Update_EXTI+0x1d8>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	8812      	ldrh	r2, [r2, #0]
 8000704:	4611      	mov	r1, r2
 8000706:	2201      	movs	r2, #1
 8000708:	408a      	lsls	r2, r1
 800070a:	43d2      	mvns	r2, r2
 800070c:	4611      	mov	r1, r2
 800070e:	4a3e      	ldr	r2, [pc, #248]	; (8000808 <Update_EXTI+0x1d8>)
 8000710:	400b      	ands	r3, r1
 8000712:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7b1b      	ldrb	r3, [r3, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10b      	bne.n	8000734 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800071c:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <Update_EXTI+0x1d8>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	4611      	mov	r1, r2
 800072c:	4a36      	ldr	r2, [pc, #216]	; (8000808 <Update_EXTI+0x1d8>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6093      	str	r3, [r2, #8]
 8000732:	e029      	b.n	8000788 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7b1b      	ldrb	r3, [r3, #12]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10b      	bne.n	8000754 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <Update_EXTI+0x1d8>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a2e      	ldr	r2, [pc, #184]	; (8000808 <Update_EXTI+0x1d8>)
 800074e:	430b      	orrs	r3, r1
 8000750:	60d3      	str	r3, [r2, #12]
 8000752:	e019      	b.n	8000788 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7b1b      	ldrb	r3, [r3, #12]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d115      	bne.n	8000788 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <Update_EXTI+0x1d8>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	4611      	mov	r1, r2
 8000766:	2201      	movs	r2, #1
 8000768:	408a      	lsls	r2, r1
 800076a:	4611      	mov	r1, r2
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <Update_EXTI+0x1d8>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <Update_EXTI+0x1d8>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	8812      	ldrh	r2, [r2, #0]
 800077a:	4611      	mov	r1, r2
 800077c:	2201      	movs	r2, #1
 800077e:	408a      	lsls	r2, r1
 8000780:	4611      	mov	r1, r2
 8000782:	4a21      	ldr	r2, [pc, #132]	; (8000808 <Update_EXTI+0x1d8>)
 8000784:	430b      	orrs	r3, r1
 8000786:	60d3      	str	r3, [r2, #12]
	}

	//================================
	//4- Update IRQ Handling CALLBACK

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4a1e      	ldr	r2, [pc, #120]	; (800080c <Update_EXTI+0x1dc>)
 8000794:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//================================
	//5- Enable/Disable IRQ EXTI and NVIC

	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7b5b      	ldrb	r3, [r3, #13]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d110      	bne.n	80007c2 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <Update_EXTI+0x1d8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	8812      	ldrh	r2, [r2, #0]
 80007a8:	4611      	mov	r1, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	408a      	lsls	r2, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <Update_EXTI+0x1d8>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fe6c 	bl	8000498 <Enable_NVIC>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 80007c0:	e014      	b.n	80007ec <Update_EXTI+0x1bc>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7b5b      	ldrb	r3, [r3, #13]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d110      	bne.n	80007ec <Update_EXTI+0x1bc>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <Update_EXTI+0x1d8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	2201      	movs	r2, #1
 80007d6:	408a      	lsls	r2, r1
 80007d8:	43d2      	mvns	r2, r2
 80007da:	4611      	mov	r1, r2
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <Update_EXTI+0x1d8>)
 80007de:	400b      	ands	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff febc 	bl	8000564 <Disable_NVIC>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40010000 	.word	0x40010000
 80007f8:	40010800 	.word	0x40010800
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	40011000 	.word	0x40011000
 8000804:	40011400 	.word	0x40011400
 8000808:	40010400 	.word	0x40010400
 800080c:	20000020 	.word	0x20000020

08000810 <MCAL_EXTI_GPIO_Init>:
 * Note             -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B, Part of C/D exported as external PINS from the MCU
 * 					 -Also Mandatory to Enable RCC Clock ForAFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
		Update_EXTI(EXTI_Config);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff09 	bl	8000630 <Update_EXTI>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <EXTI0_IRQHandler>:
///**==============       ISR FUNCTIONS        ================
///**==========================================================
// */

void EXTI0_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<0;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <EXTI0_IRQHandler+0x14>)
 800082e:	2201      	movs	r2, #1
 8000830:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000832:	4b03      	ldr	r3, [pc, #12]	; (8000840 <EXTI0_IRQHandler+0x18>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4798      	blx	r3
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010400 	.word	0x40010400
 8000840:	20000020 	.word	0x20000020

08000844 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<1;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <EXTI1_IRQHandler+0x14>)
 800084a:	2202      	movs	r2, #2
 800084c:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[1]();
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <EXTI1_IRQHandler+0x18>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4798      	blx	r3
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010400 	.word	0x40010400
 800085c:	20000020 	.word	0x20000020

08000860 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<2;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <EXTI2_IRQHandler+0x14>)
 8000866:	2204      	movs	r2, #4
 8000868:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[2]();
 800086a:	4b03      	ldr	r3, [pc, #12]	; (8000878 <EXTI2_IRQHandler+0x18>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	4798      	blx	r3

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40010400 	.word	0x40010400
 8000878:	20000020 	.word	0x20000020

0800087c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<3;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <EXTI3_IRQHandler+0x14>)
 8000882:	2208      	movs	r2, #8
 8000884:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[3]();
 8000886:	4b03      	ldr	r3, [pc, #12]	; (8000894 <EXTI3_IRQHandler+0x18>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	4798      	blx	r3
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40010400 	.word	0x40010400
 8000894:	20000020 	.word	0x20000020

08000898 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<4;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <EXTI4_IRQHandler+0x14>)
 800089e:	2210      	movs	r2, #16
 80008a0:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[4]();
 80008a2:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <EXTI4_IRQHandler+0x18>)
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	4798      	blx	r3
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40010400 	.word	0x40010400
 80008b0:	20000020 	.word	0x20000020

080008b4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5) {  EXTI->PR |= (1<<5)	; GP_IRQ_CallBack[5]();	}
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	f003 0320 	and.w	r3, r3, #32
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d008      	beq.n	80008d6 <EXTI9_5_IRQHandler+0x22>
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	6153      	str	r3, [r2, #20]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	4798      	blx	r3
	if (EXTI->PR & 1<<6) {  EXTI->PR |= (1<<6)	; GP_IRQ_CallBack[6]();	}
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <EXTI9_5_IRQHandler+0x40>
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4798      	blx	r3
	if (EXTI->PR & 1<<7) {  EXTI->PR |= (1<<7)	; GP_IRQ_CallBack[7]();	}
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <EXTI9_5_IRQHandler+0x5e>
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a13      	ldr	r2, [pc, #76]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090a:	6153      	str	r3, [r2, #20]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	4798      	blx	r3
	if (EXTI->PR & 1<<8) {  EXTI->PR |= (1<<8)	; GP_IRQ_CallBack[8]();	}
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800091a:	2b00      	cmp	r3, #0
 800091c:	d008      	beq.n	8000930 <EXTI9_5_IRQHandler+0x7c>
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4798      	blx	r3
	if (EXTI->PR & 1<<9) {  EXTI->PR |= (1<<9)	; GP_IRQ_CallBack[9]();	}
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000938:	2b00      	cmp	r3, #0
 800093a:	d008      	beq.n	800094e <EXTI9_5_IRQHandler+0x9a>
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <EXTI9_5_IRQHandler+0xa0>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000946:	6153      	str	r3, [r2, #20]
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <EXTI9_5_IRQHandler+0xa4>)
 800094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094c:	4798      	blx	r3
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40010400 	.word	0x40010400
 8000958:	20000020 	.word	0x20000020

0800095c <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	2b80      	cmp	r3, #128	; 0x80
 800096a:	d042      	beq.n	80009f2 <Get_CRLH_Position+0x96>
 800096c:	2b80      	cmp	r3, #128	; 0x80
 800096e:	dc11      	bgt.n	8000994 <Get_CRLH_Position+0x38>
 8000970:	2b08      	cmp	r3, #8
 8000972:	d036      	beq.n	80009e2 <Get_CRLH_Position+0x86>
 8000974:	2b08      	cmp	r3, #8
 8000976:	dc06      	bgt.n	8000986 <Get_CRLH_Position+0x2a>
 8000978:	2b02      	cmp	r3, #2
 800097a:	d02e      	beq.n	80009da <Get_CRLH_Position+0x7e>
 800097c:	2b04      	cmp	r3, #4
 800097e:	d02e      	beq.n	80009de <Get_CRLH_Position+0x82>
 8000980:	2b01      	cmp	r3, #1
 8000982:	d028      	beq.n	80009d6 <Get_CRLH_Position+0x7a>
 8000984:	e047      	b.n	8000a16 <Get_CRLH_Position+0xba>
 8000986:	2b20      	cmp	r3, #32
 8000988:	d02f      	beq.n	80009ea <Get_CRLH_Position+0x8e>
 800098a:	2b40      	cmp	r3, #64	; 0x40
 800098c:	d02f      	beq.n	80009ee <Get_CRLH_Position+0x92>
 800098e:	2b10      	cmp	r3, #16
 8000990:	d029      	beq.n	80009e6 <Get_CRLH_Position+0x8a>
 8000992:	e040      	b.n	8000a16 <Get_CRLH_Position+0xba>
 8000994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000998:	d033      	beq.n	8000a02 <Get_CRLH_Position+0xa6>
 800099a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800099e:	dc09      	bgt.n	80009b4 <Get_CRLH_Position+0x58>
 80009a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009a4:	d029      	beq.n	80009fa <Get_CRLH_Position+0x9e>
 80009a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009aa:	d028      	beq.n	80009fe <Get_CRLH_Position+0xa2>
 80009ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009b0:	d021      	beq.n	80009f6 <Get_CRLH_Position+0x9a>
 80009b2:	e030      	b.n	8000a16 <Get_CRLH_Position+0xba>
 80009b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b8:	d027      	beq.n	8000a0a <Get_CRLH_Position+0xae>
 80009ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009be:	dc03      	bgt.n	80009c8 <Get_CRLH_Position+0x6c>
 80009c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009c4:	d01f      	beq.n	8000a06 <Get_CRLH_Position+0xaa>
 80009c6:	e026      	b.n	8000a16 <Get_CRLH_Position+0xba>
 80009c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009cc:	d01f      	beq.n	8000a0e <Get_CRLH_Position+0xb2>
 80009ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009d2:	d01e      	beq.n	8000a12 <Get_CRLH_Position+0xb6>
 80009d4:	e01f      	b.n	8000a16 <Get_CRLH_Position+0xba>
	{
	//CRL Pins
	case GPIO_PIN_0:
		return 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e01e      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80009da:	2304      	movs	r3, #4
 80009dc:	e01c      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80009de:	2308      	movs	r3, #8
 80009e0:	e01a      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80009e2:	230c      	movs	r3, #12
 80009e4:	e018      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80009e6:	2310      	movs	r3, #16
 80009e8:	e016      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80009ea:	2314      	movs	r3, #20
 80009ec:	e014      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80009ee:	2318      	movs	r3, #24
 80009f0:	e012      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80009f2:	231c      	movs	r3, #28
 80009f4:	e010      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
		//CRH Pins
	case GPIO_PIN_8:
		return 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e00e      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	e00c      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80009fe:	2308      	movs	r3, #8
 8000a00:	e00a      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000a02:	230c      	movs	r3, #12
 8000a04:	e008      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000a06:	2310      	movs	r3, #16
 8000a08:	e006      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000a0a:	2314      	movs	r3, #20
 8000a0c:	e004      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000a0e:	2318      	movs	r3, #24
 8000a10:	e002      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000a12:	231c      	movs	r3, #28
 8000a14:	e000      	b.n	8000a18 <Get_CRLH_Position+0xbc>
		break;
	}

	return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <MCAL_GPIO_Init>:
 * @retval		    -none
 * Note             -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B, Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000a22:	b590      	push	{r4, r7, lr}
 8000a24:	b085      	sub	sp, #20
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* pconfigregister = NULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]

	pconfigregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d801      	bhi.n	8000a40 <MCAL_GPIO_Init+0x1e>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	e001      	b.n	8000a44 <MCAL_GPIO_Init+0x22>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3304      	adds	r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]

	//Clear CNFx[1:0] MODEx[1:0]
	(*pconfigregister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff86 	bl	800095c <Get_CRLH_Position>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	230f      	movs	r3, #15
 8000a56:	4093      	lsls	r3, r2
 8000a58:	43da      	mvns	r2, r3
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	789b      	ldrb	r3, [r3, #2]
 8000a68:	2b05      	cmp	r3, #5
 8000a6a:	d00b      	beq.n	8000a84 <MCAL_GPIO_Init+0x62>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d007      	beq.n	8000a84 <MCAL_GPIO_Init+0x62>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	d003      	beq.n	8000a84 <MCAL_GPIO_Init+0x62>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d10e      	bne.n	8000aa2 <MCAL_GPIO_Init+0x80>
	{
		//Set CNFx[1:0] MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	789b      	ldrb	r3, [r3, #2]
 8000a88:	3b04      	subs	r3, #4
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	78db      	ldrb	r3, [r3, #3]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e02c      	b.n	8000afc <MCAL_GPIO_Init+0xda>
		                        //CNF                              //MODE                     //Need for bits only(0xF)
	}
	//if Pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	789b      	ldrb	r3, [r3, #2]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d003      	beq.n	8000ab2 <MCAL_GPIO_Init+0x90>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	789b      	ldrb	r3, [r3, #2]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d107      	bne.n	8000ac2 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0F);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	789b      	ldrb	r3, [r3, #2]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e01c      	b.n	8000afc <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d102      	bne.n	8000ad0 <MCAL_GPIO_Init+0xae>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0F);
 8000aca:	2304      	movs	r3, #4
 8000acc:	73fb      	strb	r3, [r7, #15]
 8000ace:	e015      	b.n	8000afc <MCAL_GPIO_Init+0xda>
		}
		//PU PD Input
		else
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d107      	bne.n	8000aec <MCAL_GPIO_Init+0xca>
			{
				//Input pull up: Table 20. Port bit configuration table (PxODR = 1 )
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	8812      	ldrh	r2, [r2, #0]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	e007      	b.n	8000afc <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//Input pull down: Table 20. Port bit configuration table (PxODR = 0)
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	8812      	ldrh	r2, [r2, #0]
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60da      	str	r2, [r3, #12]
		}


	}
	//Write on the CRL or CRH
	(*pconfigregister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000afc:	7bfc      	ldrb	r4, [r7, #15]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff2a 	bl	800095c <Get_CRLH_Position>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	fa04 f203 	lsl.w	r2, r4, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	431a      	orrs	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <MCAL_GPIO_WritePin>:
 * @param [in]		-Value: Pin Value
 * @retval		    -none
 * Note             -none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx,uint16_t PinNumber,uint8_t value)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
	if( value != GPIO_PIN_RESET )
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <MCAL_GPIO_WritePin+0x1e>
		//			or
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	611a      	str	r2, [r3, #16]
		//			These bits are write-only and can be accessed in Word mode only.
		//			0: No action on the corresponding ODRx bit
		//			1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000b3c:	e002      	b.n	8000b44 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	615a      	str	r2, [r3, #20]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <MCAL_GPIO_WritePort>:
 * @param [in]		-Value: Port  Value
 * @retval		    -none
 * Note             -none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx,uint16_t value)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value;
 8000b5a:	887a      	ldrh	r2, [r7, #2]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60da      	str	r2, [r3, #12]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
	...

08000b6c <clock_init>:


unsigned int IRQ_Flag;

void clock_init()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	//IO port A clock enable
	RCC_GPIOA_CLK_EN();
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <clock_init+0x30>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <clock_init+0x30>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
	//IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <clock_init+0x30>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <clock_init+0x30>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
	//IO port AFIO clock enable
	RCC_AFIO_CLK_EN();
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <clock_init+0x30>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <clock_init+0x30>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <wait_ms>:


void wait_ms(int time)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i = 0; i < time; i++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e00b      	b.n	8000bc6 <wait_ms+0x26>
		for(j = 0; i < 255; j++);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	e002      	b.n	8000bba <wait_ms+0x1a>
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2bfe      	cmp	r3, #254	; 0xfe
 8000bbe:	d9f9      	bls.n	8000bb4 <wait_ms+0x14>
	for(i = 0; i < time; i++)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3ef      	bcc.n	8000bae <wait_ms+0xe>
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <EXTI9_Callback>:

void EXTI9_Callback()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

	LCD_Write_Str("IRQ EXTI9 is happened _|- ");
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <EXTI9_Callback+0x1c>)
 8000bde:	f7ff fbed 	bl	80003bc <LCD_Write_Str>
	IRQ_Flag = 1;
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <EXTI9_Callback+0x20>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
	wait_ms(100);
 8000be8:	2064      	movs	r0, #100	; 0x64
 8000bea:	f7ff ffd9 	bl	8000ba0 <wait_ms>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08000d18 	.word	0x08000d18
 8000bf8:	2000005c 	.word	0x2000005c

08000bfc <Interrupt_init>:

void Interrupt_init()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <Interrupt_init+0x2c>)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <Interrupt_init+0x30>)
 8000c12:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 8000c14:	2301      	movs	r3, #1
 8000c16:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fdf8 	bl	8000810 <MCAL_EXTI_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08000d34 	.word	0x08000d34
 8000c2c:	08000bd9 	.word	0x08000bd9

08000c30 <main>:



int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	clock_init();
 8000c34:	f7ff ff9a 	bl	8000b6c <clock_init>
	LCD_Init();
 8000c38:	f7ff fb62 	bl	8000300 <LCD_Init>
	LCD_Clear_Screen();
 8000c3c:	f7ff fc00 	bl	8000440 <LCD_Clear_Screen>
	Interrupt_init();
 8000c40:	f7ff ffdc 	bl	8000bfc <Interrupt_init>
	IRQ_Flag = 1;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <main+0x30>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <main+0x30>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0fb      	beq.n	8000c4a <main+0x1a>
		{
			LCD_Clear_Screen();
 8000c52:	f7ff fbf5 	bl	8000440 <LCD_Clear_Screen>
			IRQ_Flag = 0;
 8000c56:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <main+0x30>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 8000c5c:	e7f5      	b.n	8000c4a <main+0x1a>
 8000c5e:	bf00      	nop
 8000c60:	2000005c 	.word	0x2000005c

08000c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c66:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c92:	f000 f811 	bl	8000cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff ffcb 	bl	8000c30 <main>

08000c9a <LoopForever>:

LoopForever:
    b LoopForever
 8000c9a:	e7fe      	b.n	8000c9a <LoopForever>
  ldr   r0, =_estack
 8000c9c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ca8:	08000d48 	.word	0x08000d48
  ldr r2, =_sbss
 8000cac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cb0:	20000060 	.word	0x20000060

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <__libc_init_array>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	2500      	movs	r5, #0
 8000cbc:	4e0c      	ldr	r6, [pc, #48]	; (8000cf0 <__libc_init_array+0x38>)
 8000cbe:	4c0d      	ldr	r4, [pc, #52]	; (8000cf4 <__libc_init_array+0x3c>)
 8000cc0:	1ba4      	subs	r4, r4, r6
 8000cc2:	10a4      	asrs	r4, r4, #2
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	d109      	bne.n	8000cdc <__libc_init_array+0x24>
 8000cc8:	f000 f81a 	bl	8000d00 <_init>
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4e0a      	ldr	r6, [pc, #40]	; (8000cf8 <__libc_init_array+0x40>)
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	; (8000cfc <__libc_init_array+0x44>)
 8000cd2:	1ba4      	subs	r4, r4, r6
 8000cd4:	10a4      	asrs	r4, r4, #2
 8000cd6:	42a5      	cmp	r5, r4
 8000cd8:	d105      	bne.n	8000ce6 <__libc_init_array+0x2e>
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ce0:	4798      	blx	r3
 8000ce2:	3501      	adds	r5, #1
 8000ce4:	e7ee      	b.n	8000cc4 <__libc_init_array+0xc>
 8000ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cea:	4798      	blx	r3
 8000cec:	3501      	adds	r5, #1
 8000cee:	e7f2      	b.n	8000cd6 <__libc_init_array+0x1e>
 8000cf0:	08000d40 	.word	0x08000d40
 8000cf4:	08000d40 	.word	0x08000d40
 8000cf8:	08000d40 	.word	0x08000d40
 8000cfc:	08000d44 	.word	0x08000d44

08000d00 <_init>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr

08000d0c <_fini>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	bf00      	nop
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr
