/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//Learn-in-depth
//Ahmed Melik Alnasser
//Mastering Embedded System online diploma

#include "STM32F103x6.h"
#include "STM32F103C6_GPIO_Drivers.h"
#include "LCD.h"
#include "KEYPAD.h"
#include "S7_Segment.h"



void clock_init()
{
	//IO port A clock enable
	RCC_GPIOA_CLK_EN();
	//IO port B clock enable
	RCC_GPIOB_CLK_EN();
}




void wait_ms(int time)
{
	uint32_t i,j;
	for(i = 0; i < time; i++)
		for(j = 0; j < 255; j++);
}

int main(void)
{
		clock_init();
		LCD_Init();
		S7_Segment_Init();
		keypad_Init();


	    LCD_Write_Str("Learn_in_depth");
		wait_ms(500);
		LCD_Clear_Screen();

	    unsigned char seg[] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
	    unsigned char lcd[] = {'0', '1', '2', '3', '4','5', '6', '7', '8', '9' , '0'};


	    for (unsigned char i = 0; i < 11 ; i++)
	    {
	    	MCAL_GPIO_WritePort(GPIOB,seg[i] << 9);
	    	LCD_Write_Char(lcd[i]);
	    	wait_ms(1000);
	    }

	    LCD_Clear_Screen();
		LCD_Write_Str("Keypad is Ready");
		wait_ms(50);
		LCD_Clear_Screen();

		char key_pressed;

	    while (1)
	    {
		    key_pressed = keypad_GetKey();
		    switch(key_pressed)
		    {
			    case 'A':
			    break; //do nothing if no key is pressed
			    case '?':
			    break;//do nothing if no key is pressed
			    default:
			    	LCD_Write_Char(key_pressed);//Send the Key preesed to LCD
			    break;
		    }

	    }


}
