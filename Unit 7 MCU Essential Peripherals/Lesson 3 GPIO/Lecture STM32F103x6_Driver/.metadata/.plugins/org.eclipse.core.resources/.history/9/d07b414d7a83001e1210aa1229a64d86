/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


#include "STM32F103C6_GPIO_Driver.h"



void clock_init()
{
	//IO port A clock enable
	RCC_GPIOA_CLK_EN();
	//IO port B clock enable
	RCC_GPIOB_CLK_EN();
}

void GPIO_Init()
{
	GPIO_PinConfig_t PinCfg;

	//PA2 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	//MCAL_GPIO_Init(GPIOA, &PinCfg);
	MCAL_GPIO_Init(GPIOA, &PinCfg)
	//MODE: push-pull(PB1),max speed 10MHz
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);

	//=========================================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(GPIOA, &PinCfg);

	//MODE: push-pull(PB13),max speed 10MHz
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);

}


void wait_ms(int time)
{
	uint32_t i,j;
	for(i = 0; i < time; i++)
		for(j = 0; j < 255; j++);
}

int main(void)
{
	clock_init();
	GPIO_Init();


	while(1)
	{
		//PA1 >> Connected to external PUR
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) //press
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
			while( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)  == 0); //Single pressing
		}
		//PA13 >> Connected to external PDR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1) //Multi pressing
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
			wait_ms(100);
		}

	}
}
