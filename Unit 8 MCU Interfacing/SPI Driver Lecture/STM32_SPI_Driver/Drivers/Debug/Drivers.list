
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d5c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eb4  08000eb4  00010ebc  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb4  08000eb4  00010ebc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb4  08000ebc  00010ebc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb4  08000eb4  00010eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eb8  08000eb8  00010eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ebc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000ebc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000ebc  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ebc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000523a  00000000  00000000  00010ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ced  00000000  00000000  0001611f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000df4  00000000  00000000  00016e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  00017c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00017e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001334  00000000  00000000  00018018  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002d1b  00000000  00000000  0001934c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bc09  00000000  00000000  0001c067  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00027c70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000740  00000000  00000000  00027cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e74 	.word	0x08000e74

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e74 	.word	0x08000e74

08000170 <EXTI0_IRQHandler>:
///**==============       ISR FUNCTIONS        ================
///**==========================================================
// */

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<0;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI0_IRQHandler+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 800017a:	4b03      	ldr	r3, [pc, #12]	; (8000188 <EXTI0_IRQHandler+0x18>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4798      	blx	r3
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010400 	.word	0x40010400
 8000188:	20000028 	.word	0x20000028

0800018c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<1;
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <EXTI1_IRQHandler+0x14>)
 8000192:	2202      	movs	r2, #2
 8000194:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[1]();
 8000196:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI1_IRQHandler+0x18>)
 8000198:	685b      	ldr	r3, [r3, #4]
 800019a:	4798      	blx	r3
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40010400 	.word	0x40010400
 80001a4:	20000028 	.word	0x20000028

080001a8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<2;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <EXTI2_IRQHandler+0x14>)
 80001ae:	2204      	movs	r2, #4
 80001b0:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[2]();
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <EXTI2_IRQHandler+0x18>)
 80001b4:	689b      	ldr	r3, [r3, #8]
 80001b6:	4798      	blx	r3

}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010400 	.word	0x40010400
 80001c0:	20000028 	.word	0x20000028

080001c4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<3;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI3_IRQHandler+0x14>)
 80001ca:	2208      	movs	r2, #8
 80001cc:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[3]();
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <EXTI3_IRQHandler+0x18>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	4798      	blx	r3
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010400 	.word	0x40010400
 80001dc:	20000028 	.word	0x20000028

080001e0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<4;
 80001e4:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <EXTI4_IRQHandler+0x14>)
 80001e6:	2210      	movs	r2, #16
 80001e8:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[4]();
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <EXTI4_IRQHandler+0x18>)
 80001ec:	691b      	ldr	r3, [r3, #16]
 80001ee:	4798      	blx	r3
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40010400 	.word	0x40010400
 80001f8:	20000028 	.word	0x20000028

080001fc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5) {  EXTI->PR |= (1<<5)	; GP_IRQ_CallBack[5]();	}
 8000200:	4b26      	ldr	r3, [pc, #152]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	f003 0320 	and.w	r3, r3, #32
 8000208:	2b00      	cmp	r3, #0
 800020a:	d008      	beq.n	800021e <EXTI9_5_IRQHandler+0x22>
 800020c:	4b23      	ldr	r3, [pc, #140]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a22      	ldr	r2, [pc, #136]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	6153      	str	r3, [r2, #20]
 8000218:	4b21      	ldr	r3, [pc, #132]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4798      	blx	r3
	if (EXTI->PR & 1<<6) {  EXTI->PR |= (1<<6)	; GP_IRQ_CallBack[6]();	}
 800021e:	4b1f      	ldr	r3, [pc, #124]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000226:	2b00      	cmp	r3, #0
 8000228:	d008      	beq.n	800023c <EXTI9_5_IRQHandler+0x40>
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a1b      	ldr	r2, [pc, #108]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4798      	blx	r3
	if (EXTI->PR & 1<<7) {  EXTI->PR |= (1<<7)	; GP_IRQ_CallBack[7]();	}
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x5e>
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a13      	ldr	r2, [pc, #76]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4798      	blx	r3
	if (EXTI->PR & 1<<8) {  EXTI->PR |= (1<<8)	; GP_IRQ_CallBack[8]();	}
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x7c>
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000274:	6a1b      	ldr	r3, [r3, #32]
 8000276:	4798      	blx	r3
	if (EXTI->PR & 1<<9) {  EXTI->PR |= (1<<9)	; GP_IRQ_CallBack[9]();	}
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x9a>
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000294:	4798      	blx	r3
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010400 	.word	0x40010400
 80002a0:	20000028 	.word	0x20000028

080002a4 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	2b80      	cmp	r3, #128	; 0x80
 80002b2:	d042      	beq.n	800033a <Get_CRLH_Position+0x96>
 80002b4:	2b80      	cmp	r3, #128	; 0x80
 80002b6:	dc11      	bgt.n	80002dc <Get_CRLH_Position+0x38>
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	d036      	beq.n	800032a <Get_CRLH_Position+0x86>
 80002bc:	2b08      	cmp	r3, #8
 80002be:	dc06      	bgt.n	80002ce <Get_CRLH_Position+0x2a>
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d02e      	beq.n	8000322 <Get_CRLH_Position+0x7e>
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	d02e      	beq.n	8000326 <Get_CRLH_Position+0x82>
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d028      	beq.n	800031e <Get_CRLH_Position+0x7a>
 80002cc:	e047      	b.n	800035e <Get_CRLH_Position+0xba>
 80002ce:	2b20      	cmp	r3, #32
 80002d0:	d02f      	beq.n	8000332 <Get_CRLH_Position+0x8e>
 80002d2:	2b40      	cmp	r3, #64	; 0x40
 80002d4:	d02f      	beq.n	8000336 <Get_CRLH_Position+0x92>
 80002d6:	2b10      	cmp	r3, #16
 80002d8:	d029      	beq.n	800032e <Get_CRLH_Position+0x8a>
 80002da:	e040      	b.n	800035e <Get_CRLH_Position+0xba>
 80002dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002e0:	d033      	beq.n	800034a <Get_CRLH_Position+0xa6>
 80002e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002e6:	dc09      	bgt.n	80002fc <Get_CRLH_Position+0x58>
 80002e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002ec:	d029      	beq.n	8000342 <Get_CRLH_Position+0x9e>
 80002ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002f2:	d028      	beq.n	8000346 <Get_CRLH_Position+0xa2>
 80002f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f8:	d021      	beq.n	800033e <Get_CRLH_Position+0x9a>
 80002fa:	e030      	b.n	800035e <Get_CRLH_Position+0xba>
 80002fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000300:	d027      	beq.n	8000352 <Get_CRLH_Position+0xae>
 8000302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000306:	dc03      	bgt.n	8000310 <Get_CRLH_Position+0x6c>
 8000308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800030c:	d01f      	beq.n	800034e <Get_CRLH_Position+0xaa>
 800030e:	e026      	b.n	800035e <Get_CRLH_Position+0xba>
 8000310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000314:	d01f      	beq.n	8000356 <Get_CRLH_Position+0xb2>
 8000316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800031a:	d01e      	beq.n	800035a <Get_CRLH_Position+0xb6>
 800031c:	e01f      	b.n	800035e <Get_CRLH_Position+0xba>
	{
	//CRL Pins
	case GPIO_PIN_0:
		return 0;
 800031e:	2300      	movs	r3, #0
 8000320:	e01e      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000322:	2304      	movs	r3, #4
 8000324:	e01c      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000326:	2308      	movs	r3, #8
 8000328:	e01a      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800032a:	230c      	movs	r3, #12
 800032c:	e018      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800032e:	2310      	movs	r3, #16
 8000330:	e016      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000332:	2314      	movs	r3, #20
 8000334:	e014      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000336:	2318      	movs	r3, #24
 8000338:	e012      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800033a:	231c      	movs	r3, #28
 800033c:	e010      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
		//CRH Pins
	case GPIO_PIN_8:
		return 0;
 800033e:	2300      	movs	r3, #0
 8000340:	e00e      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000342:	2304      	movs	r3, #4
 8000344:	e00c      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000346:	2308      	movs	r3, #8
 8000348:	e00a      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800034a:	230c      	movs	r3, #12
 800034c:	e008      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800034e:	2310      	movs	r3, #16
 8000350:	e006      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000352:	2314      	movs	r3, #20
 8000354:	e004      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000356:	2318      	movs	r3, #24
 8000358:	e002      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800035a:	231c      	movs	r3, #28
 800035c:	e000      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	}

	return 0;
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <MCAL_GPIO_Init>:
 * @retval		    -none
 * Note             -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B, Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 800036a:	b590      	push	{r4, r7, lr}
 800036c:	b085      	sub	sp, #20
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* pconfigregister = NULL;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]

	pconfigregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	2bff      	cmp	r3, #255	; 0xff
 8000382:	d801      	bhi.n	8000388 <MCAL_GPIO_Init+0x1e>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	e001      	b.n	800038c <MCAL_GPIO_Init+0x22>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3304      	adds	r3, #4
 800038c:	60bb      	str	r3, [r7, #8]

	//Clear CNFx[1:0] MODEx[1:0]
	(*pconfigregister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff86 	bl	80002a4 <Get_CRLH_Position>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	230f      	movs	r3, #15
 800039e:	4093      	lsls	r3, r2
 80003a0:	43da      	mvns	r2, r3
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	401a      	ands	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	789b      	ldrb	r3, [r3, #2]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d00b      	beq.n	80003cc <MCAL_GPIO_Init+0x62>
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	789b      	ldrb	r3, [r3, #2]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	d007      	beq.n	80003cc <MCAL_GPIO_Init+0x62>
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	789b      	ldrb	r3, [r3, #2]
 80003c0:	2b06      	cmp	r3, #6
 80003c2:	d003      	beq.n	80003cc <MCAL_GPIO_Init+0x62>
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	d10e      	bne.n	80003ea <MCAL_GPIO_Init+0x80>
	{
		//Set CNFx[1:0] MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	789b      	ldrb	r3, [r3, #2]
 80003d0:	3b04      	subs	r3, #4
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	b25a      	sxtb	r2, r3
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	78db      	ldrb	r3, [r3, #3]
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	4313      	orrs	r3, r2
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f003 030f 	and.w	r3, r3, #15
 80003e6:	73fb      	strb	r3, [r7, #15]
 80003e8:	e02c      	b.n	8000444 <MCAL_GPIO_Init+0xda>
		                        //CNF                              //MODE                     //Need for bits only(0xF)
	}
	//if Pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	789b      	ldrb	r3, [r3, #2]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d003      	beq.n	80003fa <MCAL_GPIO_Init+0x90>
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d107      	bne.n	800040a <MCAL_GPIO_Init+0xa0>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0F);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 030f 	and.w	r3, r3, #15
 8000406:	73fb      	strb	r3, [r7, #15]
 8000408:	e01c      	b.n	8000444 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	789b      	ldrb	r3, [r3, #2]
 800040e:	2b08      	cmp	r3, #8
 8000410:	d102      	bne.n	8000418 <MCAL_GPIO_Init+0xae>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0F);
 8000412:	2304      	movs	r3, #4
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e015      	b.n	8000444 <MCAL_GPIO_Init+0xda>
		}
		//PU PD Input
		else
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000418:	2308      	movs	r3, #8
 800041a:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d107      	bne.n	8000434 <MCAL_GPIO_Init+0xca>
			{
				//Input pull up: Table 20. Port bit configuration table (PxODR = 1 )
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	8812      	ldrh	r2, [r2, #0]
 800042c:	431a      	orrs	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	e007      	b.n	8000444 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//Input pull down: Table 20. Port bit configuration table (PxODR = 0)
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	43d2      	mvns	r2, r2
 800043e:	401a      	ands	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	60da      	str	r2, [r3, #12]
		}


	}
	//Write on the CRL or CRH
	(*pconfigregister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000444:	7bfc      	ldrb	r4, [r7, #15]
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff2a 	bl	80002a4 <Get_CRLH_Position>
 8000450:	4603      	mov	r3, r0
 8000452:	fa04 f203 	lsl.w	r2, r4, r3
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	431a      	orrs	r2, r3
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bd90      	pop	{r4, r7, pc}

08000468 <MCAL_GPIO_WritePin>:
 * @param [in]		-Value: Pin Value
 * @retval		    -none
 * Note             -none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx,uint16_t PinNumber,uint8_t value)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	807b      	strh	r3, [r7, #2]
 8000474:	4613      	mov	r3, r2
 8000476:	707b      	strb	r3, [r7, #1]
	if( value != GPIO_PIN_RESET )
 8000478:	787b      	ldrb	r3, [r7, #1]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d003      	beq.n	8000486 <MCAL_GPIO_WritePin+0x1e>
		//			or
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 800047e:	887a      	ldrh	r2, [r7, #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	611a      	str	r2, [r3, #16]
		//			These bits are write-only and can be accessed in Word mode only.
		//			0: No action on the corresponding ODRx bit
		//			1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000484:	e002      	b.n	800048c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000486:	887a      	ldrh	r2, [r7, #2]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	615a      	str	r2, [r3, #20]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
	...

08000498 <MCAL_RCC_GetSYS_CLCKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint16_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9}; //Shift 1 right == divide by 2

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch( (RCC->CFGR >> 2) & 0b11)
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	089b      	lsrs	r3, r3, #2
 80004a2:	f003 0303 	and.w	r3, r3, #3
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d006      	beq.n	80004b8 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d302      	bcc.n	80004b4 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d004      	beq.n	80004bc <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80004b2:	e005      	b.n	80004c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{

	case 0:

		return HSI_RC_Clk;
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80004b6:	e003      	b.n	80004c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;

	case 1:

		//todo need to calculate it //HSE User Should Specify it
		return HSE_Clock;
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80004ba:	e001      	b.n	80004c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>

	case 2:

		//todo need to calculate it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80004be:	e7ff      	b.n	80004c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}

}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	007a1200 	.word	0x007a1200
 80004d0:	00f42400 	.word	0x00f42400

080004d4 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4) & 0xF) ] );
 80004d8:	f7ff ffde 	bl	8000498 <MCAL_RCC_GetSYS_CLCKFreq>
 80004dc:	4601      	mov	r1, r0
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MCAL_RCC_GetHCLKFreq+0x24>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	091b      	lsrs	r3, r3, #4
 80004e4:	f003 030f 	and.w	r3, r3, #15
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <MCAL_RCC_GetHCLKFreq+0x28>)
 80004ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	08000e94 	.word	0x08000e94

08000500 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return  (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8) & 0b111) ] );
 8000504:	f7ff ffe6 	bl	80004d4 <MCAL_RCC_GetHCLKFreq>
 8000508:	4601      	mov	r1, r0
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	0a1b      	lsrs	r3, r3, #8
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000516:	5cd3      	ldrb	r3, [r2, r3]
 8000518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	08000e8c 	.word	0x08000e8c

08000528 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return  (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11) & 0b111) ] );
 800052c:	f7ff ffd2 	bl	80004d4 <MCAL_RCC_GetHCLKFreq>
 8000530:	4601      	mov	r1, r0
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	0adb      	lsrs	r3, r3, #11
 8000538:	f003 0307 	and.w	r3, r3, #7
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000544:	4618      	mov	r0, r3
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	08000e8c 	.word	0x08000e8c

08000550 <MCAL_SPI_Init>:
 * Note             -Support for SPI Full Duplex Master/Slave only & NSS HW/SW
 * 					-in case of master you have to configure pin and drive it
 */

void MCAL_SPI_Init(SPI_TypeDef* SPIx,SPI_Config* SPI_Config)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	//Safety for registers
	uint16_t tmpreg_CR1 = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a39      	ldr	r2, [pc, #228]	; (800064c <MCAL_SPI_Init+0xfc>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d109      	bne.n	800057e <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_INDEX] = SPI_Config;
 800056a:	4a39      	ldr	r2, [pc, #228]	; (8000650 <MCAL_SPI_Init+0x100>)
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 8000570:	4b38      	ldr	r3, [pc, #224]	; (8000654 <MCAL_SPI_Init+0x104>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a37      	ldr	r2, [pc, #220]	; (8000654 <MCAL_SPI_Init+0x104>)
 8000576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	e00c      	b.n	8000598 <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a35      	ldr	r2, [pc, #212]	; (8000658 <MCAL_SPI_Init+0x108>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d108      	bne.n	8000598 <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_INDEX] = SPI_Config;
 8000586:	4a32      	ldr	r2, [pc, #200]	; (8000650 <MCAL_SPI_Init+0x100>)
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <MCAL_SPI_Init+0x104>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	4a30      	ldr	r2, [pc, #192]	; (8000654 <MCAL_SPI_Init+0x104>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	61d3      	str	r3, [r2, #28]
	}

	//Enable SPI CR1:Bit 6 SPE: SPI enable
	tmpreg_CR1 |= (0x1U << 6);
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059e:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |=  SPI_Config->Device_Mode;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	881a      	ldrh	r2, [r3, #0]
 80005a4:	89fb      	ldrh	r3, [r7, #14]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	81fb      	strh	r3, [r7, #14]

	//SPI-Communication_Mode
	tmpreg_CR1 |=  SPI_Config->Communication_Mode;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	885a      	ldrh	r2, [r3, #2]
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |= SPI_Config->DataSize;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	88da      	ldrh	r2, [r3, #6]
 80005b8:	89fb      	ldrh	r3, [r7, #14]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |= SPI_Config->CLKPolartity;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	891a      	ldrh	r2, [r3, #8]
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |= SPI_Config->CLKPhase;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	895a      	ldrh	r2, [r3, #10]
 80005cc:	89fb      	ldrh	r3, [r7, #14]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	81fb      	strh	r3, [r7, #14]

	/* ===================NSS=============================== */
	if(SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	899b      	ldrh	r3, [r3, #12]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d105      	bne.n	80005e6 <MCAL_SPI_Init+0x96>
	{
		tmpreg_CR2 |= SPI_Config->NSS;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	899a      	ldrh	r2, [r3, #12]
 80005de:	89bb      	ldrh	r3, [r7, #12]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	81bb      	strh	r3, [r7, #12]
 80005e4:	e004      	b.n	80005f0 <MCAL_SPI_Init+0xa0>
	{
		tmpreg_CR2 &= SPI_Config->NSS;
	}
	else
	{
		tmpreg_CR1 |= SPI_Config->NSS;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	899a      	ldrh	r2, [r3, #12]
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	81fb      	strh	r3, [r7, #14]
	}

//================================================================
	//SPI_BAUDRATRPRESCALER
	tmpreg_CR1 |= SPI_Config->SPI_BAUDRATEPRESCALAR;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	89da      	ldrh	r2, [r3, #14]
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	81fb      	strh	r3, [r7, #14]

	if(SPI_Config->IRQ_Enable != SPI_IRQ_Enable_NONE)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	8a1b      	ldrh	r3, [r3, #16]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d019      	beq.n	8000636 <MCAL_SPI_Init+0xe6>
	{
		// SPI_IRQ_Enable_define
		tmpreg_CR2 |= SPI_Config->IRQ_Enable;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	8a1a      	ldrh	r2, [r3, #16]
 8000606:	89bb      	ldrh	r3, [r7, #12]
 8000608:	4313      	orrs	r3, r2
 800060a:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a0f      	ldr	r2, [pc, #60]	; (800064c <MCAL_SPI_Init+0xfc>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <MCAL_SPI_Init+0xd2>
		{
			NVIC_IRQ35_SPI1_Enable;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MCAL_SPI_Init+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <MCAL_SPI_Init+0x10c>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	e009      	b.n	8000636 <MCAL_SPI_Init+0xe6>
		}
		else if(SPIx == SPI2)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <MCAL_SPI_Init+0x108>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d105      	bne.n	8000636 <MCAL_SPI_Init+0xe6>
		{
			NVIC_IRQ36_SPI2_Enable;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MCAL_SPI_Init+0x10c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0b      	ldr	r2, [pc, #44]	; (800065c <MCAL_SPI_Init+0x10c>)
 8000630:	f043 0310 	orr.w	r3, r3, #16
 8000634:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = tmpreg_CR1;
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmpreg_CR2;
 800063c:	89ba      	ldrh	r2, [r7, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	605a      	str	r2, [r3, #4]

}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40013000 	.word	0x40013000
 8000650:	2000001c 	.word	0x2000001c
 8000654:	40021000 	.word	0x40021000
 8000658:	40003800 	.word	0x40003800
 800065c:	e000e104 	.word	0xe000e104

08000660 <MCAL_SPI_TX_RX>:
					 //	because it is replaced by the parity.
					 //	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					 //	bit.
 */
void MCAL_SPI_TX_RX(SPI_TypeDef *SPIx, uint16_t *pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	71fb      	strb	r3, [r7, #7]

	if(PollingEn == PollingEnable)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <MCAL_SPI_TX_RX+0x22>
		while(!((SPIx)->SR & SPI_SR_TXE));
 8000674:	bf00      	nop
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <MCAL_SPI_TX_RX+0x16>
	SPIx->DR = *pTxBuffer;
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	60da      	str	r2, [r3, #12]

	if(PollingEn == PollingEnable)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d106      	bne.n	80006a0 <MCAL_SPI_TX_RX+0x40>
		while(!((SPIx)->SR & SPI_SR_TXE));
 8000692:	bf00      	nop
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f9      	beq.n	8000694 <MCAL_SPI_TX_RX+0x34>
	*pTxBuffer = SPIx->DR ;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	801a      	strh	r2, [r3, #0]

}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <MCAL_SPI_GPIO_Set_Pins>:
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @retval		    -none
 * Note             -Should Enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_USART_Init()
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef* SPIx)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(SPIx == SPI1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a73      	ldr	r2, [pc, #460]	; (800088c <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d169      	bne.n	8000798 <MCAL_SPI_GPIO_Set_Pins+0xe4>
	{
		//		PA4 : SPI1_NSS
		//		PA5 : SPI1_CLK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI
		if(Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 80006c4:	4b72      	ldr	r3, [pc, #456]	; (8000890 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d134      	bne.n	8000738 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			//PA4 : SPI1_NSS
			switch(Global_SPI_Config[SPI1_INDEX]->NSS)
 80006ce:	4b70      	ldr	r3, [pc, #448]	; (8000890 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	899b      	ldrh	r3, [r3, #12]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d10c      	bne.n	80006f2 <MCAL_SPI_GPIO_Set_Pins+0x3e>
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;
			case SPI_NSS_Hard_Master_SS_output_enable:
				//Hardware master / salve Output enabled Alternate function
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80006d8:	2310      	movs	r3, #16
 80006da:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80006dc:	2306      	movs	r3, #6
 80006de:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	486a      	ldr	r0, [pc, #424]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80006ec:	f7ff fe3d 	bl	800036a <MCAL_GPIO_Init>
				break;
 80006f0:	bf00      	nop
			}

			//		PA5 : SPI1_CLK
			//		Master Alternate function push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80006f2:	2320      	movs	r3, #32
 80006f4:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80006f6:	2306      	movs	r3, #6
 80006f8:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	4863      	ldr	r0, [pc, #396]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000706:	f7ff fe30 	bl	800036a <MCAL_GPIO_Init>

			//		PA6 : SPI1_MISO (supported only full duplex)
			//		Full duplex / master Input floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800070e:	2301      	movs	r3, #1
 8000710:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	485e      	ldr	r0, [pc, #376]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800071a:	f7ff fe26 	bl	800036a <MCAL_GPIO_Init>

			//todo to support half duplex and simplex

			//		PA7 : SPI1_MOSI
			//		Full duplex / master Alternate Function push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000722:	2306      	movs	r3, #6
 8000724:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000726:	2301      	movs	r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4619      	mov	r1, r3
 8000730:	4858      	ldr	r0, [pc, #352]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000732:	f7ff fe1a 	bl	800036a <MCAL_GPIO_Init>
			}
		}

	}

}
 8000736:	e0a4      	b.n	8000882 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 8000738:	4b55      	ldr	r3, [pc, #340]	; (8000890 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d109      	bne.n	8000756 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000742:	2310      	movs	r3, #16
 8000744:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000746:	2301      	movs	r3, #1
 8000748:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4619      	mov	r1, r3
 8000750:	4850      	ldr	r0, [pc, #320]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000752:	f7ff fe0a 	bl	800036a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000756:	2320      	movs	r3, #32
 8000758:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800075a:	2301      	movs	r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	484b      	ldr	r0, [pc, #300]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000766:	f7ff fe00 	bl	800036a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800076e:	2306      	movs	r3, #6
 8000770:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000772:	2301      	movs	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	4845      	ldr	r0, [pc, #276]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800077e:	f7ff fdf4 	bl	800036a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000786:	2301      	movs	r3, #1
 8000788:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4840      	ldr	r0, [pc, #256]	; (8000894 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000792:	f7ff fdea 	bl	800036a <MCAL_GPIO_Init>
}
 8000796:	e074      	b.n	8000882 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	else if (SPIx == SPI2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a3f      	ldr	r2, [pc, #252]	; (8000898 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d170      	bne.n	8000882 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 80007a0:	4b3b      	ldr	r3, [pc, #236]	; (8000890 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d138      	bne.n	800081c <MCAL_SPI_GPIO_Set_Pins+0x168>
				switch(Global_SPI_Config[SPI2_INDEX]->NSS)
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	899b      	ldrh	r3, [r3, #12]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d10d      	bne.n	80007d0 <MCAL_SPI_GPIO_Set_Pins+0x11c>
					PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007ba:	2306      	movs	r3, #6
 80007bc:	73bb      	strb	r3, [r7, #14]
					PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80007be:	2301      	movs	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4834      	ldr	r0, [pc, #208]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80007ca:	f7ff fdce 	bl	800036a <MCAL_GPIO_Init>
					break;
 80007ce:	bf00      	nop
				PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007d6:	2306      	movs	r3, #6
 80007d8:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80007da:	2301      	movs	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	482d      	ldr	r0, [pc, #180]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80007e6:	f7ff fdc0 	bl	800036a <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80007ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ee:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80007f0:	2301      	movs	r3, #1
 80007f2:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4828      	ldr	r0, [pc, #160]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80007fc:	f7ff fdb5 	bl	800036a <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000804:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000806:	2306      	movs	r3, #6
 8000808:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000816:	f7ff fda8 	bl	800036a <MCAL_GPIO_Init>
}
 800081a:	e032      	b.n	8000882 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
				if (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	899b      	ldrh	r3, [r3, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10a      	bne.n	800083c <MCAL_SPI_GPIO_Set_Pins+0x188>
					PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800082c:	2301      	movs	r3, #1
 800082e:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000838:	f7ff fd97 	bl	800036a <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000842:	2301      	movs	r3, #1
 8000844:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4813      	ldr	r0, [pc, #76]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800084e:	f7ff fd8c 	bl	800036a <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000856:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000858:	2306      	movs	r3, #6
 800085a:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800085c:	2301      	movs	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000868:	f7ff fd7f 	bl	800036a <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 800086c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000870:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000872:	2301      	movs	r3, #1
 8000874:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4807      	ldr	r0, [pc, #28]	; (800089c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800087e:	f7ff fd74 	bl	800036a <MCAL_GPIO_Init>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40013000 	.word	0x40013000
 8000890:	2000001c 	.word	0x2000001c
 8000894:	40010800 	.word	0x40010800
 8000898:	40003800 	.word	0x40003800
 800089c:	40010c00 	.word	0x40010c00

080008a0 <SPI1_IRQHandler>:
* ==================================================================
*/


void SPI1_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr;

	irq_scr.TXE  = ( ( SPI1->SR & (1<<1)) >> 1);
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <SPI1_IRQHandler+0x54>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	793b      	ldrb	r3, [r7, #4]
 80008b4:	f362 0300 	bfi	r3, r2, #0, #1
 80008b8:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNE = ( ( SPI1->SR & (1<<0)) >> 0);
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <SPI1_IRQHandler+0x54>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	793b      	ldrb	r3, [r7, #4]
 80008c6:	f362 0341 	bfi	r3, r2, #1, #1
 80008ca:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRI = ( ( SPI1->SR & (1<<4)) >> 4);
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <SPI1_IRQHandler+0x54>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	793b      	ldrb	r3, [r7, #4]
 80008da:	f362 0382 	bfi	r3, r2, #2, #1
 80008de:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_scr);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SPI1_IRQHandler+0x58>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	7938      	ldrb	r0, [r7, #4]
 80008e8:	4798      	blx	r3
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40013000 	.word	0x40013000
 80008f8:	2000001c 	.word	0x2000001c

080008fc <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr;

	irq_scr.TXE  = ( ( SPI2->SR & (1<<1)) >> 1);
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <SPI2_IRQHandler+0x54>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	085b      	lsrs	r3, r3, #1
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	793b      	ldrb	r3, [r7, #4]
 8000910:	f362 0300 	bfi	r3, r2, #0, #1
 8000914:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNE = ( ( SPI2->SR & (1<<0)) >> 0);
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <SPI2_IRQHandler+0x54>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	793b      	ldrb	r3, [r7, #4]
 8000922:	f362 0341 	bfi	r3, r2, #1, #1
 8000926:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRI = ( ( SPI2->SR & (1<<4)) >> 4);
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <SPI2_IRQHandler+0x54>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	091b      	lsrs	r3, r3, #4
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	793b      	ldrb	r3, [r7, #4]
 8000936:	f362 0382 	bfi	r3, r2, #2, #1
 800093a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_scr);
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SPI2_IRQHandler+0x58>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	7938      	ldrb	r0, [r7, #4]
 8000944:	4798      	blx	r3
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40003800 	.word	0x40003800
 8000954:	2000001c 	.word	0x2000001c

08000958 <MCAL_UART_Init>:
 * 					 the configuration information for the specified GPIO PIN
 * @retval		    -none
 * Note             -Support for now Asynch mode & Clock 8 MZH
 */
void MCAL_UART_Init(USART_Typedef* USARTx,UART_Config* UART_Config)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;
	Global_UART_Config = UART_Config;
 8000962:	4a57      	ldr	r2, [pc, #348]	; (8000ac0 <MCAL_UART_Init+0x168>)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	6013      	str	r3, [r2, #0]


	// Enable the clock for given USART peripheral
	if( USARTx == USART1 )
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a56      	ldr	r2, [pc, #344]	; (8000ac4 <MCAL_UART_Init+0x16c>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d106      	bne.n	800097e <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000970:	4b55      	ldr	r3, [pc, #340]	; (8000ac8 <MCAL_UART_Init+0x170>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a54      	ldr	r2, [pc, #336]	; (8000ac8 <MCAL_UART_Init+0x170>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	e014      	b.n	80009a8 <MCAL_UART_Init+0x50>

	}
	else if( USARTx == USART2 )
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a52      	ldr	r2, [pc, #328]	; (8000acc <MCAL_UART_Init+0x174>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <MCAL_UART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000986:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <MCAL_UART_Init+0x170>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a4f      	ldr	r2, [pc, #316]	; (8000ac8 <MCAL_UART_Init+0x170>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	e009      	b.n	80009a8 <MCAL_UART_Init+0x50>

	}
	else if( USARTx == USART3 )
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a4e      	ldr	r2, [pc, #312]	; (8000ad0 <MCAL_UART_Init+0x178>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d105      	bne.n	80009a8 <MCAL_UART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <MCAL_UART_Init+0x170>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	4a49      	ldr	r2, [pc, #292]	; (8000ac8 <MCAL_UART_Init+0x170>)
 80009a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a6:	61d3      	str	r3, [r2, #28]

	}

	//Enable USART Module
	// Bit 12 UE: USART enable
	USARTx->CR1 |= (1<<13);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	60da      	str	r2, [r3, #12]

	// Enbale USART Tx and Rx engines according to the USART_Mode configuration item
	// USART_CR1 ==> Bit 3 TE: Transmitter enable & Bit 2 RE: Receive enable
	USARTx->CR1 |= UART_Config->UART_Mode;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	7812      	ldrb	r2, [r2, #0]
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	60da      	str	r2, [r3, #12]

	// PAYLOAD Width
	// USARTx->CR1 Bit 12 M: Word Length
	USARTx->CR1 |= UART_Config->Payload_Length;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	7a12      	ldrb	r2, [r2, #8]
 80009ca:	431a      	orrs	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60da      	str	r2, [r3, #12]


	// Configuration of parity control bit field
	// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	7a52      	ldrb	r2, [r2, #9]
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields
	// USART_CR2 ==> Bit 10 PCE: Parity control enable, Bit 9 PS: Parity selection
	USARTx->CR2 |= UART_Config->StopBits;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	7a92      	ldrb	r2, [r2, #10]
 80009e6:	431a      	orrs	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	611a      	str	r2, [r3, #16]

	// USAT hardware flow control
	// USART->CR3 Bit 9 CTSE: CTS enable, Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtrl;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	7ad2      	ldrb	r2, [r2, #11]
 80009f4:	431a      	orrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	615a      	str	r2, [r3, #20]

	// Configuration of BRR(BaudRate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1

	if ( USARTx == USART1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <MCAL_UART_Init+0x16c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d103      	bne.n	8000a0a <MCAL_UART_Init+0xb2>
	{
			pclk = MCAL_RCC_GetPCLK2Freq();
 8000a02:	f7ff fd91 	bl	8000528 <MCAL_RCC_GetPCLK2Freq>
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	e002      	b.n	8000a10 <MCAL_UART_Init+0xb8>
	}
	else
	{
			pclk = MCAL_RCC_GetPCLK1Freq();
 8000a0a:	f7ff fd79 	bl	8000500 <MCAL_RCC_GetPCLK1Freq>
 8000a0e:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BuadRate);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1c:	0119      	lsls	r1, r3, #4
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4613      	mov	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	009a      	lsls	r2, r3, #2
 8000a28:	441a      	add	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	fb00 f303 	mul.w	r3, r0, r3
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <MCAL_UART_Init+0x17c>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	430b      	orrs	r3, r1
 8000a58:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	609a      	str	r2, [r3, #8]

	// Enable / Disable
	// USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	7b1b      	ldrb	r3, [r3, #12]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d026      	beq.n	8000ab6 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	7b12      	ldrb	r2, [r2, #12]
 8000a70:	431a      	orrs	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60da      	str	r2, [r3, #12]

		// Enable NVIC FOR USARTx IRQ

		if( USARTx == USART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MCAL_UART_Init+0x16c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <MCAL_UART_Init+0x134>
		{
			NVIC_IRQ37_USART1_Enable;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MCAL_UART_Init+0x180>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <MCAL_UART_Init+0x180>)
 8000a84:	f043 0320 	orr.w	r3, r3, #32
 8000a88:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_Enable;
		}
	}


}
 8000a8a:	e014      	b.n	8000ab6 <MCAL_UART_Init+0x15e>
		else if( USARTx == USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <MCAL_UART_Init+0x174>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d106      	bne.n	8000aa2 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MCAL_UART_Init+0x180>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <MCAL_UART_Init+0x180>)
 8000a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	e009      	b.n	8000ab6 <MCAL_UART_Init+0x15e>
		else if( USARTx == USART3)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <MCAL_UART_Init+0x178>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d105      	bne.n	8000ab6 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MCAL_UART_Init+0x180>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <MCAL_UART_Init+0x180>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	6013      	str	r3, [r2, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000024 	.word	0x20000024
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40004800 	.word	0x40004800
 8000ad4:	51eb851f 	.word	0x51eb851f
 8000ad8:	e000e104 	.word	0xe000e104

08000adc <MCAL_UART_SendData>:
					 //	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					 //	bit.
 */

void MCAL_UART_SendData(USART_Typedef* USARTx, uint16_t *pTxBuffer, enum Polling_mechism PollingEn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	71fb      	strb	r3, [r7, #7]
		// wait until TXE flag is set in the SR
		if(PollingEn == Enable)
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d106      	bne.n	8000afe <MCAL_UART_SendData+0x22>
		{
			while(! (USARTx->SR & 1<<7 ) );
 8000af0:	bf00      	nop
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f9      	beq.n	8000af2 <MCAL_UART_SendData+0x16>
			USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
		}
		else
		{
			// This is 8Bit data transfer
			USARTx->DR = (*pTxBuffer & (uint16_t)0x0FF);
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	605a      	str	r2, [r3, #4]
		}
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
	...

08000b14 <MCAL_UART_ReceiveData>:
					 //	because it is replaced by the parity.
					 //	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					 //	bit.
 */
void MCAL_UART_ReceiveData(USART_Typedef* USARTx, uint16_t *pRxBuffer, enum Polling_mechism PollingEn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	71fb      	strb	r3, [r7, #7]
	// wait until RXNIE flag is set in the SR
	if(PollingEn == Enable)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d106      	bne.n	8000b36 <MCAL_UART_ReceiveData+0x22>
	{
		while(! (USARTx->SR & 1<<5 ) );
 8000b28:	bf00      	nop
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0320 	and.w	r3, r3, #32
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <MCAL_UART_ReceiveData+0x16>
				}
			}
			else
			{
				// This is 8Bit data transfer
				if(Global_UART_Config->Parity == UART_Parity__NONE)
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MCAL_UART_ReceiveData+0x58>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	7a5b      	ldrb	r3, [r3, #9]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d107      	bne.n	8000b50 <MCAL_UART_ReceiveData+0x3c>
				{
					// no parity So all 9bit are considered data
					*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF );
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	801a      	strh	r2, [r3, #0]
					*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F );
					}

			}

}
 8000b4e:	e007      	b.n	8000b60 <MCAL_UART_ReceiveData+0x4c>
					*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F );
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	801a      	strh	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000024 	.word	0x20000024

08000b70 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @retval		    -none
 * Note             -Should Enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_USART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_Typedef* USARTx)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if ( USARTx == USART1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	; (8000c28 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d118      	bne.n	8000bb2 <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA11 CTS
		//PA12 RTS


		//PA9  TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b84:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000b86:	2306      	movs	r3, #6
 8000b88:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000b96:	f7ff fbe8 	bl	800036a <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4820      	ldr	r0, [pc, #128]	; (8000c2c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000bac:	f7ff fbdd 	bl	800036a <MCAL_GPIO_Init>
		}



	}
}
 8000bb0:	e036      	b.n	8000c20 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d116      	bne.n	8000be8 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000bce:	f7ff fbcc 	bl	800036a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000be2:	f7ff fbc2 	bl	800036a <MCAL_GPIO_Init>
}
 8000be6:	e01b      	b.n	8000c20 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d117      	bne.n	8000c20 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000c06:	f7ff fbb0 	bl	800036a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000c0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c0e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000c10:	2308      	movs	r3, #8
 8000c12:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000c1c:	f7ff fba5 	bl	800036a <MCAL_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40004800 	.word	0x40004800
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler (void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <USART1_IRQHandler+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	4798      	blx	r3
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000024 	.word	0x20000024

08000c50 <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <USART2_IRQHandler+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	4798      	blx	r3
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000024 	.word	0x20000024

08000c64 <USART3_IRQHandler>:


void USART3_IRQHandler (void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c68:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <USART3_IRQHandler+0x10>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	4798      	blx	r3
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000024 	.word	0x20000024

08000c78 <Ahmed_UART_IRQ_CallBack>:
	RCC_AFIO_CLK_EN();
}


void Ahmed_UART_IRQ_CallBack()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Master
	MCAL_UART_ReceiveData(USART1, &ch, Disable);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <Ahmed_UART_IRQ_CallBack+0x3c>)
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <Ahmed_UART_IRQ_CallBack+0x40>)
 8000c82:	f7ff ff47 	bl	8000b14 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, Enable);
 8000c86:	2200      	movs	r2, #0
 8000c88:	490a      	ldr	r1, [pc, #40]	; (8000cb4 <Ahmed_UART_IRQ_CallBack+0x3c>)
 8000c8a:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <Ahmed_UART_IRQ_CallBack+0x40>)
 8000c8c:	f7ff ff26 	bl	8000adc <MCAL_UART_SendData>
	//Send to SPI
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2110      	movs	r1, #16
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <Ahmed_UART_IRQ_CallBack+0x44>)
 8000c96:	f7ff fbe7 	bl	8000468 <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, PollingEnable);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <Ahmed_UART_IRQ_CallBack+0x3c>)
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <Ahmed_UART_IRQ_CallBack+0x48>)
 8000ca0:	f7ff fcde 	bl	8000660 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <Ahmed_UART_IRQ_CallBack+0x44>)
 8000caa:	f7ff fbdd 	bl	8000468 <MCAL_GPIO_WritePin>
#endif

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000064 	.word	0x20000064
 8000cb8:	40013800 	.word	0x40013800
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40013000 	.word	0x40013000

08000cc4 <main>:


}

int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
	//clock_init();
	//UART_Init();
	//SPI_Init();

	//IO port A clock enable
		RCC_GPIOA_CLK_EN();
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <main+0xfc>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <main+0xfc>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6193      	str	r3, [r2, #24]
		//IO port B clock enable
		RCC_GPIOB_CLK_EN();
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <main+0xfc>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a39      	ldr	r2, [pc, #228]	; (8000dc0 <main+0xfc>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6193      	str	r3, [r2, #24]
		//IO port AFIO clock enable
		RCC_AFIO_CLK_EN();
 8000ce2:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <main+0xfc>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a36      	ldr	r2, [pc, #216]	; (8000dc0 <main+0xfc>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6193      	str	r3, [r2, #24]

		UART_Config uartCFG;
			uartCFG.BuadRate = UART_BaudRate_115200;
 8000cee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cf2:	623b      	str	r3, [r7, #32]
			uartCFG.HwFlowCtrl = UART_HwFlowCtrl_NONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			uartCFG.P_IRQ_CallBack = Ahmed_UART_IRQ_CallBack;
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <main+0x100>)
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
			uartCFG.Parity = UART_Parity__NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uartCFG.Payload_Length = UART_Payload_Length_8B;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			uartCFG.StopBits = UART_StopBits__1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uartCFG.UART_Mode = UART_Mode_TX_RX;
 8000d16:	230c      	movs	r3, #12
 8000d18:	773b      	strb	r3, [r7, #28]

			MCAL_UART_Init(USART1, &uartCFG);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4829      	ldr	r0, [pc, #164]	; (8000dc8 <main+0x104>)
 8000d22:	f7ff fe19 	bl	8000958 <MCAL_UART_Init>
			MCAL_UART_GPIO_Set_Pins(USART1);
 8000d26:	4828      	ldr	r0, [pc, #160]	; (8000dc8 <main+0x104>)
 8000d28:	f7ff ff22 	bl	8000b70 <MCAL_UART_GPIO_Set_Pins>
#ifdef MCU_Act_As_Master
	MCAL_UART_ReceiveData(USART1, &ch, Disable);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4927      	ldr	r1, [pc, #156]	; (8000dcc <main+0x108>)
 8000d30:	4825      	ldr	r0, [pc, #148]	; (8000dc8 <main+0x104>)
 8000d32:	f7ff feef 	bl	8000b14 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, Enable);
 8000d36:	2200      	movs	r2, #0
 8000d38:	4924      	ldr	r1, [pc, #144]	; (8000dcc <main+0x108>)
 8000d3a:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <main+0x104>)
 8000d3c:	f7ff fece 	bl	8000adc <MCAL_UART_SendData>
	//Send to SPI
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <main+0x10c>)
 8000d46:	f7ff fb8f 	bl	8000468 <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, PollingEnable);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	491f      	ldr	r1, [pc, #124]	; (8000dcc <main+0x108>)
 8000d4e:	4821      	ldr	r0, [pc, #132]	; (8000dd4 <main+0x110>)
 8000d50:	f7ff fc86 	bl	8000660 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2110      	movs	r1, #16
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <main+0x10c>)
 8000d5a:	f7ff fb85 	bl	8000468 <MCAL_GPIO_WritePin>
#endif

	SPI_Config SPICFG;

		SPICFG.CLKPhase = SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	81fb      	strh	r3, [r7, #14]
		SPICFG.CLKPolartity = SPI_CLKPolartity_HIGH_when_idle;
 8000d62:	2302      	movs	r3, #2
 8000d64:	81bb      	strh	r3, [r7, #12]
		SPICFG.DataSize = SPI_DataSize_8BIT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	817b      	strh	r3, [r7, #10]
		SPICFG.Frame_Formate = SPI_Frame_Format_MSB_transmitted_first;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	813b      	strh	r3, [r7, #8]
		//Assume by default pclk2 = 8MHZ
		SPICFG.SPI_BAUDRATEPRESCALAR = SPI_BAUDRATEORESCALAR_8;
 8000d6e:	2310      	movs	r3, #16
 8000d70:	827b      	strh	r3, [r7, #18]
		SPICFG.Communication_Mode = SPI_DIRECTION_2LINES;
 8000d72:	2300      	movs	r3, #0
 8000d74:	80fb      	strh	r3, [r7, #6]

	#ifdef MCU_Act_As_Master
		SPICFG.Device_Mode = SPI_Device_Mode_MASTER;
 8000d76:	2304      	movs	r3, #4
 8000d78:	80bb      	strh	r3, [r7, #4]
		SPICFG.IRQ_Enable = SPI_IRQ_Enable_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	82bb      	strh	r3, [r7, #20]
		SPICFG.P_IRQ_CallBack = NULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
		SPICFG.NSS = SPI_NSS_Soft_NSSINternalSoft_Set;
 8000d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d86:	823b      	strh	r3, [r7, #16]

	#endif

		MCAL_SPI_Init(SPI1, &SPICFG);
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <main+0x110>)
 8000d8e:	f7ff fbdf 	bl	8000550 <MCAL_SPI_Init>
		MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000d92:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <main+0x110>)
 8000d94:	f7ff fc8e 	bl	80006b4 <MCAL_SPI_GPIO_Set_Pins>

		GPIO_PinConfig_t PINCFG;
		//Configure SS 	on PA.4 by GPIO
		PINCFG.GPIO_PinNumber = GPIO_PIN_4;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	803b      	strh	r3, [r7, #0]
		PINCFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	70bb      	strb	r3, [r7, #2]
		PINCFG.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000da0:	2301      	movs	r3, #1
 8000da2:	70fb      	strb	r3, [r7, #3]
		MCAL_GPIO_Init(GPIOA, &PINCFG);
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <main+0x10c>)
 8000daa:	f7ff fade 	bl	800036a <MCAL_GPIO_Init>
		SPICFG.NSS = SPI_NSS_Soft_NSSINternalSoft_Set;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	823b      	strh	r3, [r7, #16]

		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <main+0x10c>)
 8000dba:	f7ff fb55 	bl	8000468 <MCAL_GPIO_WritePin>

		while(1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0xfa>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	08000c79 	.word	0x08000c79
 8000dc8:	40013800 	.word	0x40013800
 8000dcc:	20000064 	.word	0x20000064
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40013000 	.word	0x40013000

08000dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dda:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ddc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <LoopForever+0xe>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <LoopForever+0x16>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e06:	f000 f811 	bl	8000e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0a:	f7ff ff5b 	bl	8000cc4 <main>

08000e0e <LoopForever>:

LoopForever:
    b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   r0, =_estack
 8000e10:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e1c:	08000ebc 	.word	0x08000ebc
  ldr r2, =_sbss
 8000e20:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e24:	20000068 	.word	0x20000068

08000e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_2_IRQHandler>
	...

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	2500      	movs	r5, #0
 8000e30:	4e0c      	ldr	r6, [pc, #48]	; (8000e64 <__libc_init_array+0x38>)
 8000e32:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e34:	1ba4      	subs	r4, r4, r6
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	f000 f81a 	bl	8000e74 <_init>
 8000e40:	2500      	movs	r5, #0
 8000e42:	4e0a      	ldr	r6, [pc, #40]	; (8000e6c <__libc_init_array+0x40>)
 8000e44:	4c0a      	ldr	r4, [pc, #40]	; (8000e70 <__libc_init_array+0x44>)
 8000e46:	1ba4      	subs	r4, r4, r6
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e54:	4798      	blx	r3
 8000e56:	3501      	adds	r5, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5e:	4798      	blx	r3
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08000eb4 	.word	0x08000eb4
 8000e68:	08000eb4 	.word	0x08000eb4
 8000e6c:	08000eb4 	.word	0x08000eb4
 8000e70:	08000eb8 	.word	0x08000eb8

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
