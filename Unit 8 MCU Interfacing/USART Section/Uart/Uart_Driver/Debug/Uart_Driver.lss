
Uart_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000350  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9d  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083c  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000897  00000000  00000000  00001d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f8  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009be  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003976  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  8a:	0c 94 a6 01 	jmp	0x34c	; 0x34c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	LCD_Ctrl &= ~(1<<RW); //write mode
	
}
void LCD_lcd_kick (void)
{
	LCD_Ctrl &= ~(1<<EN);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	8b 7f       	andi	r24, 0xFB	; 251
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_lcd_kick+0x10>
  a2:	00 00       	nop
	//asm volatile ("nop");
	//asm volatile ("nop");
	_delay_ms(50);
	LCD_Ctrl |= (1<<EN);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_check_lcd_isbusy>:
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
}

void LCD_check_lcd_isbusy(void)
{
	Datadir_LCD_Port &= ~(0xff<<DATA_shift);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	1a ba       	out	0x1a, r1	; 26
	LCD_Ctrl |= (1<<RW); //read mode
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	88 bb       	out	0x18, r24	; 24
	LCD_Ctrl &= ~(1<<RS); //command mode
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
  bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	Datadir_LCD_Port = 0xff; //port is set as output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
	LCD_Ctrl &= ~(1<<RW); //write mode
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	08 95       	ret

000000cc <LCD_Send_A_Command>:
 *  Author: LEGION
 */ 
#include "LCD.h"

void LCD_Send_A_Command(unsigned char command)
{
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
  d0:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
	
	LCD_Port = command;
  d4:	cb bb       	out	0x1b, r28	; 27
	LCD_Ctrl &= ~((1<<RW) | (1<<RS));
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8c 7f       	andi	r24, 0xFC	; 252
  da:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	LCD_Port = (LCD_Port & 0x0F) | (command & 0xF0);
	LCD_Ctrl &= ~((1<<RW) | (1<<RS));
	LCD_lcd_kick();
	LCD_Port = (LCD_Port & 0x0F) | (command << 4);
	#endif
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_clear_screen>:

void LCD_clear_screen ()
{
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_A_Command>
  ea:	08 95       	ret

000000ec <LCD_Send_A_Character>:
	_delay_ms(50);
	LCD_Ctrl |= (1<<EN);
}

void LCD_Send_A_Character(unsigned char character)
{
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
  f0:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
	
	LCD_Ctrl |= 1<<RS; //Set for data mode
  f4:	88 b3       	in	r24, 0x18	; 24
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	88 bb       	out	0x18, r24	; 24
	LCD_Port = ((character) << DATA_shift);
  fa:	cb bb       	out	0x1b, r28	; 27
	LCD_Ctrl |= 1<<RS; //Set for data mode
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	88 bb       	out	0x18, r24	; 24
	LCD_Ctrl &= ~(1<<RW);
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	88 bb       	out	0x18, r24	; 24
	
	LCD_lcd_kick();
 108:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	LCD_Port = (LCD_Port & 0x0F) | (character << 4);
	LCD_Ctrl |= 1<<RS;
	LCD_Ctrl &= ~(1<<RW);
	LCD_lcd_kick();
	#endif
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_lcd_init>:
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_lcd_init+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_lcd_init+0xa>
 11a:	00 00       	nop
}
void LCD_lcd_init(void)
{
	_delay_ms(20);
	
	Datadir_LCD_Ctrl |= (1<<EN) | (1<<RS) | (1<<RW);
 11c:	87 b3       	in	r24, 0x17	; 23
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	87 bb       	out	0x17, r24	; 23
	LCD_Ctrl &= ~((1<<EN) | (1<<RS) | (1<<RW));
 122:	88 b3       	in	r24, 0x18	; 24
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 bb       	out	0x18, r24	; 24
	
	Datadir_LCD_Port = 0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
 12c:	85 ea       	ldi	r24, 0xA5	; 165
 12e:	9e e0       	ldi	r25, 0x0E	; 14
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_lcd_init+0x20>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_lcd_init+0x26>
 136:	00 00       	nop
	_delay_ms(15);
	
	LCD_clear_screen();
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_A_Command>
	
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
	
	#endif
	
	LCD_Send_A_Command(LCD_ENTRY_MODE);
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_A_Command>
 154:	08 95       	ret

00000156 <LCD_GotoXY>:
}

void LCD_GotoXY(unsigned char line, unsigned char position )
{
	if(line == 0)
 156:	81 11       	cpse	r24, r1
 158:	07 c0       	rjmp	.+14     	; 0x168 <LCD_GotoXY+0x12>
	{
		if(position < 16 && position >= 0)
 15a:	60 31       	cpi	r22, 0x10	; 16
 15c:	68 f4       	brcc	.+26     	; 0x178 <LCD_GotoXY+0x22>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW + position);
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	86 0f       	add	r24, r22
 162:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_A_Command>
 166:	08 95       	ret
		}
		
	}
	else if (line == 1)
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	31 f4       	brne	.+12     	; 0x178 <LCD_GotoXY+0x22>
	{
		if(position < 16 && position >= 0)
 16c:	60 31       	cpi	r22, 0x10	; 16
 16e:	20 f4       	brcc	.+8      	; 0x178 <LCD_GotoXY+0x22>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW + position);
 170:	80 ec       	ldi	r24, 0xC0	; 192
 172:	86 0f       	add	r24, r22
 174:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_A_Command>
 178:	08 95       	ret

0000017a <LCD_Send_A_String>:
	LCD_Ctrl &= ~(1<<RW);
	LCD_lcd_kick();
	#endif
}
void LCD_Send_A_String(char *string)
{
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	8c 01       	movw	r16, r24
	int count = 0; //To count how much char on the line
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string > 0)
 188:	19 c0       	rjmp	.+50     	; 0x1bc <LCD_Send_A_String+0x42>
	{
		
		count++;
 18a:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_A_Character(*string++);
 18c:	0f 5f       	subi	r16, 0xFF	; 255
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_A_Character>
		if(count == 16)//go to second line
 194:	c0 31       	cpi	r28, 0x10	; 16
 196:	d1 05       	cpc	r29, r1
 198:	29 f4       	brne	.+10     	; 0x1a4 <LCD_Send_A_String+0x2a>
		{
			LCD_GotoXY(1,0); //line 1 position 0
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_GotoXY>
 1a2:	0c c0       	rjmp	.+24     	; 0x1bc <LCD_Send_A_String+0x42>
		}
		else if(count == 32 || count == 33)//go to second line
 1a4:	ce 01       	movw	r24, r28
 1a6:	80 97       	sbiw	r24, 0x20	; 32
 1a8:	02 97       	sbiw	r24, 0x02	; 2
 1aa:	40 f4       	brcc	.+16     	; 0x1bc <LCD_Send_A_String+0x42>
		{
			LCD_clear_screen();
 1ac:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_clear_screen>
			LCD_GotoXY(0,0); //line 0 position 0
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_GotoXY>
			count = 0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}
void LCD_Send_A_String(char *string)
{
	int count = 0; //To count how much char on the line
	while(*string > 0)
 1bc:	f8 01       	movw	r30, r16
 1be:	80 81       	ld	r24, Z
 1c0:	81 11       	cpse	r24, r1
 1c2:	e3 cf       	rjmp	.-58     	; 0x18a <LCD_Send_A_String+0x10>
			count = 0;
		}
		
	}
	
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <main>:
unsigned char x = 0 , y = 0;


int main(void)
{
	sei(); 
 1ce:	78 94       	sei
	unsigned char str[100];
	LCD_lcd_init();
 1d0:	0e 94 88 00 	call	0x110	; 0x110 <LCD_lcd_init>
	Uart_Init();
 1d4:	0e 94 03 01 	call	0x206	; 0x206 <Uart_Init>
	
	LCD_GotoXY(0,0);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_GotoXY>
	LCD_Send_A_String("UART TR");
 1e0:	83 e6       	ldi	r24, 0x63	; 99
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Send_A_String>
	//Uart_Send('D');
	//unsigned int num = 300;
	//Uart_SendNumber(num);
	
	
	Uart_SendStrAsynch("Ansam");
 1e8:	8b e6       	ldi	r24, 0x6B	; 107
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 1b 01 	call	0x236	; 0x236 <Uart_SendStrAsynch>
    /* Replace with your application code */
    while (1) 
    {
			
		LCD_GotoXY(1,0);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_GotoXY>
		
		x = Uart_Receive();
 1f8:	0e 94 0f 01 	call	0x21e	; 0x21e <Uart_Receive>
 1fc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		LCD_Send_A_Character(x);
 200:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_A_Character>
 204:	f5 cf       	rjmp	.-22     	; 0x1f0 <main+0x22>

00000206 <Uart_Init>:
void Uart_RX_SetCallBack(void (*ptrfunc)(void))
{
	
}
void Uart_TX_SetCallBack(void (*ptrfunc)(void))
{
 206:	83 e3       	ldi	r24, 0x33	; 51
 208:	89 b9       	out	0x09, r24	; 9
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	8a b1       	in	r24, 0x0a	; 10
 212:	88 60       	ori	r24, 0x08	; 8
 214:	8a b9       	out	0x0a, r24	; 10
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	80 61       	ori	r24, 0x10	; 16
 21a:	8a b9       	out	0x0a, r24	; 10
 21c:	08 95       	ret

0000021e <Uart_Receive>:
 21e:	5f 9b       	sbis	0x0b, 7	; 11
 220:	fe cf       	rjmp	.-4      	; 0x21e <Uart_Receive>
 222:	8c b1       	in	r24, 0x0c	; 12
 224:	08 95       	ret

00000226 <Uart_SendNoBlock>:
 226:	8c b9       	out	0x0c, r24	; 12
 228:	08 95       	ret

0000022a <Uart_ReceiveNoBlock>:
 22a:	8c b1       	in	r24, 0x0c	; 12
 22c:	08 95       	ret

0000022e <Uart_TX_InterruptEnbale>:
 22e:	8a b1       	in	r24, 0x0a	; 10
 230:	80 64       	ori	r24, 0x40	; 64
 232:	8a b9       	out	0x0a, r24	; 10
 234:	08 95       	ret

00000236 <Uart_SendStrAsynch>:
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	9c 01       	movw	r18, r24
 23c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <flag_send>
 240:	91 30       	cpi	r25, 0x01	; 1
 242:	61 f4       	brne	.+24     	; 0x25c <Uart_SendStrAsynch+0x26>
 244:	e9 01       	movw	r28, r18
 246:	0e 94 17 01 	call	0x22e	; 0x22e <Uart_TX_InterruptEnbale>
 24a:	88 81       	ld	r24, Y
 24c:	0e 94 13 01 	call	0x226	; 0x226 <Uart_SendNoBlock>
 250:	d0 93 76 00 	sts	0x0076, r29	; 0x800076 <TX_Str+0x1>
 254:	c0 93 75 00 	sts	0x0075, r28	; 0x800075 <TX_Str>
 258:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag_send>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <__vector_15>:
	
}
ISR(USART_TXC_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	static unsigned char i	= 1 ;
	if(TX_Str[i] != 0)
 284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 288:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <TX_Str>
 28c:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <TX_Str+0x1>
 290:	e8 0f       	add	r30, r24
 292:	f1 1d       	adc	r31, r1
 294:	80 81       	ld	r24, Z
 296:	88 23       	and	r24, r24
 298:	41 f0       	breq	.+16     	; 0x2aa <__vector_15+0x48>
	{
		Uart_SendNoBlock(TX_Str[i]);
 29a:	0e 94 13 01 	call	0x226	; 0x226 <Uart_SendNoBlock>
		i++;	 
 29e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <__vector_15+0x52>
	 }
	 else
	 {
		 i = 1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		 flag_send = 1;
 2b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <flag_send>
	 }
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_13>:

ISR(USART_RXC_vect)
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	//static unsigned char i	= 1 ;
	if(*RX_Str != 0)
 2fc:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <RX_Str>
 300:	d0 91 74 00 	lds	r29, 0x0074	; 0x800074 <RX_Str+0x1>
 304:	88 81       	ld	r24, Y
 306:	88 23       	and	r24, r24
 308:	51 f0       	breq	.+20     	; 0x31e <__vector_13+0x48>
	{
		RX_Str++;
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <RX_Str+0x1>
 312:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <RX_Str>
		*RX_Str = Uart_ReceiveNoBlock();
 316:	0e 94 15 01 	call	0x22a	; 0x22a <Uart_ReceiveNoBlock>
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	04 c0       	rjmp	.+8      	; 0x326 <__vector_13+0x50>

	}

	else
	{
		*RX_Str = '\0';
 31e:	18 82       	st	Y, r1
		flag_receive = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_receive>
	}
	
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
