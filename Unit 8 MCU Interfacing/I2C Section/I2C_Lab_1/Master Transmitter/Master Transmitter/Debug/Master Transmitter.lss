
Master Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080a  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000667  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000432  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  00001989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	unsigned ch = 0;
	
	TWI_Init(0x48);
  6c:	68 e4       	ldi	r22, 0x48	; 72
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_Init>
#include "I2C.h"


int main(void)
{
	unsigned ch = 0;
  78:	c0 e0       	ldi	r28, 0x00	; 0
  7a:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f e1       	ldi	r18, 0x1F	; 31
  7e:	81 ea       	ldi	r24, 0xA1	; 161
  80:	97 e0       	ldi	r25, 0x07	; 7
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {
		
		_delay_ms(2500);
		TWI_Start();
  8e:	0e 94 78 00 	call	0xf0	; 0xf0 <TWI_Start>
		TWI_Write(0b11010000+0);
  92:	80 ed       	ldi	r24, 0xD0	; 208
  94:	0e 94 82 00 	call	0x104	; 0x104 <TWI_Write>
		while( (TWSR & (0xF8)) !=  MT_SLA_W_ACK);
  98:	81 b1       	in	r24, 0x01	; 1
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	88 31       	cpi	r24, 0x18	; 24
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
		TWI_Write(ch++);
  a0:	8e 01       	movw	r16, r28
  a2:	0f 5f       	subi	r16, 0xFF	; 255
  a4:	1f 4f       	sbci	r17, 0xFF	; 255
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 82 00 	call	0x104	; 0x104 <TWI_Write>
		while( (TWSR & (0xF8)) !=  MT_DATA_TRANS_ACK);
  ac:	81 b1       	in	r24, 0x01	; 1
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	88 32       	cpi	r24, 0x28	; 40
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
		TWI_Stop();
  b4:	0e 94 8d 00 	call	0x11a	; 0x11a <TWI_Stop>
		
		_delay_ms(2500);
		TWI_Start();
		TWI_Write(0b11010000+0);
		while( (TWSR & (0xF8)) !=  MT_SLA_W_ACK);
		TWI_Write(ch++);
  b8:	e8 01       	movw	r28, r16
		while( (TWSR & (0xF8)) !=  MT_DATA_TRANS_ACK);
		TWI_Stop();
		
		
		
    }
  ba:	e0 cf       	rjmp	.-64     	; 0x7c <main+0x10>

000000bc <TWI_Init>:
/********************************************************/
/*					APIS_IMPLEMENTAIONS	                */
/********************************************************/

ERROR_STATUS TWI_Init(unsigned long SCL_F)
{
  bc:	9b 01       	movw	r18, r22
  be:	ac 01       	movw	r20, r24
	{
		TWSR |= (0<<0);
	}
	else if(4 == PRESCALAR)
	{
		TWSR |= (1<<0);
  c0:	81 b1       	in	r24, 0x01	; 1
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	81 b9       	out	0x01, r24	; 1
	else if(64 == PRESCALAR)
	{
		TWSR |= (3<<0);
	}
	
	TWBR = (unsigned char) (((F_CPU / SCL_F) - 16) / (2 * PRESCALAR));
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	72 e1       	ldi	r23, 0x12	; 18
  ca:	8a e7       	ldi	r24, 0x7A	; 122
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 90 00 	call	0x120	; 0x120 <__udivmodsi4>
  d2:	da 01       	movw	r26, r20
  d4:	c9 01       	movw	r24, r18
  d6:	40 97       	sbiw	r24, 0x10	; 16
  d8:	a1 09       	sbc	r26, r1
  da:	b1 09       	sbc	r27, r1
  dc:	68 94       	set
  de:	12 f8       	bld	r1, 2
  e0:	b6 95       	lsr	r27
  e2:	a7 95       	ror	r26
  e4:	97 95       	ror	r25
  e6:	87 95       	ror	r24
  e8:	16 94       	lsr	r1
  ea:	d1 f7       	brne	.-12     	; 0xe0 <TWI_Init+0x24>
  ec:	80 b9       	out	0x00, r24	; 0
}
  ee:	08 95       	ret

000000f0 <TWI_Start>:
ERROR_STATUS TWI_Start(void)
{
	/* Send START condition and set the TWINT to clear flag */
	TWCR = ( (1<<TWINT)| (1<<TWEN) | (1<<TWSTA) );
  f0:	84 ea       	ldi	r24, 0xA4	; 164
  f2:	86 bf       	out	0x36, r24	; 54
	/* Wait: Start Condition has been transmitted(TWINT Flag in TWCR is set) */
	while( !(TWCR & (1 << TWINT)) );
  f4:	06 b6       	in	r0, 0x36	; 54
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <TWI_Start+0x4>
	// Check TWSR is == START condition
	while((TWSR & 0xF8) != MT_START);
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	e1 f7       	brne	.-8      	; 0xfa <TWI_Start+0xa>

}
 102:	08 95       	ret

00000104 <TWI_Write>:
ERROR_STATUS TWI_Write(unsigned char char_data)
{
	//Load SLA_W into TWDR Register.
	TWDR = char_data;
 104:	83 b9       	out	0x03, r24	; 3
	//Clear TWINT bit in TWCR to start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 106:	84 e8       	ldi	r24, 0x84	; 132
 108:	86 bf       	out	0x36, r24	; 54
	// Wait: SLA+W has been transmitted(TWINT Flag in TWCR is set)
	while(! (TWCR & (1 << TWINT)) );
 10a:	06 b6       	in	r0, 0x36	; 54
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <TWI_Write+0x6>
	// Check TWSR is updated
	while((TWCR & 0xF8) != SR_SLA_W_ACK_RET);
 110:	86 b7       	in	r24, 0x36	; 54
 112:	88 7f       	andi	r24, 0xF8	; 248
 114:	80 38       	cpi	r24, 0x80	; 128
 116:	e1 f7       	brne	.-8      	; 0x110 <TWI_Write+0xc>

}
 118:	08 95       	ret

0000011a <TWI_Stop>:
ERROR_STATUS TWI_Stop(void)
{
	// Transmit Stop Condition
	TWCR = ( (1<<TWINT)| (1<<TWEN) | (1<<TWSTO) );
 11a:	84 e9       	ldi	r24, 0x94	; 148
 11c:	86 bf       	out	0x36, r24	; 54
}
 11e:	08 95       	ret

00000120 <__udivmodsi4>:
 120:	a1 e2       	ldi	r26, 0x21	; 33
 122:	1a 2e       	mov	r1, r26
 124:	aa 1b       	sub	r26, r26
 126:	bb 1b       	sub	r27, r27
 128:	fd 01       	movw	r30, r26
 12a:	0d c0       	rjmp	.+26     	; 0x146 <__udivmodsi4_ep>

0000012c <__udivmodsi4_loop>:
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	ee 1f       	adc	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	a2 17       	cp	r26, r18
 136:	b3 07       	cpc	r27, r19
 138:	e4 07       	cpc	r30, r20
 13a:	f5 07       	cpc	r31, r21
 13c:	20 f0       	brcs	.+8      	; 0x146 <__udivmodsi4_ep>
 13e:	a2 1b       	sub	r26, r18
 140:	b3 0b       	sbc	r27, r19
 142:	e4 0b       	sbc	r30, r20
 144:	f5 0b       	sbc	r31, r21

00000146 <__udivmodsi4_ep>:
 146:	66 1f       	adc	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	88 1f       	adc	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	1a 94       	dec	r1
 150:	69 f7       	brne	.-38     	; 0x12c <__udivmodsi4_loop>
 152:	60 95       	com	r22
 154:	70 95       	com	r23
 156:	80 95       	com	r24
 158:	90 95       	com	r25
 15a:	9b 01       	movw	r18, r22
 15c:	ac 01       	movw	r20, r24
 15e:	bd 01       	movw	r22, r26
 160:	cf 01       	movw	r24, r30
 162:	08 95       	ret

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
