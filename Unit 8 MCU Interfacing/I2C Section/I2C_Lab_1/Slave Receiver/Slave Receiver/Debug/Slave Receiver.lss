
Slave Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000762  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000606  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000382  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	TWI_Set_Address(0b11010000);
  70:	80 ed       	ldi	r24, 0xD0	; 208
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 42 00 	call	0x84	; 0x84 <TWI_Set_Address>
    /* Replace with your application code */
    while (1) 
    {
		PORTA = TWI_Read(1);
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 44 00 	call	0x88	; 0x88 <TWI_Read>
  80:	8b bb       	out	0x1b, r24	; 27
  82:	fa cf       	rjmp	.-12     	; 0x78 <main+0xc>

00000084 <TWI_Set_Address>:
}

ERROR_STATUS TWI_Set_Address(unsigned char address)
{
	/* Sending Slave address */
	TWAR = address;
  84:	82 b9       	out	0x02, r24	; 2
}
  86:	08 95       	ret

00000088 <TWI_Read>:
unsigned char TWI_Read(unsigned char ack)
{
	/* TWEN must be written to one to enable the TWI */
	/* The TWEA bit must be written to one to enable
	the ack of the device’s own slave address or the general call address */
	TWCR = ( (1<<TWINT) | (1<<TWEN) | (ack<<TWEA) );
  88:	20 e4       	ldi	r18, 0x40	; 64
  8a:	82 9f       	mul	r24, r18
  8c:	c0 01       	movw	r24, r0
  8e:	11 24       	eor	r1, r1
  90:	84 68       	ori	r24, 0x84	; 132
  92:	86 bf       	out	0x36, r24	; 54
	/* TWSTA and TWSTO must be written to zero */
	TWCR &= ( ~(1<<TWSTA) | ~(1<<TWSTO));
  94:	96 b7       	in	r25, 0x36	; 54
  96:	96 bf       	out	0x36, r25	; 54
	/* Wait until TWINT Flag is set */
	while( !(TWCR & (1<<TWINT)) );
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <TWI_Read+0x10>
	/* Wait valid for status code can be read from TWSR */
	while((TWSR & 0xF8) != SR_SLA_W_ACK);
  9e:	91 b1       	in	r25, 0x01	; 1
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	90 36       	cpi	r25, 0x60	; 96
  a4:	e1 f7       	brne	.-8      	; 0x9e <TWI_Read+0x16>
	//while((TWSR ) != SR_SLA_W_ACK);
	TWCR = ( (1<<TWINT) | (1<<TWEN) | (ack<<TWEA) );
  a6:	86 bf       	out	0x36, r24	; 54
	/* TWSTA and TWSTO must be written to zero */
	TWCR &= ( ~(1<<TWSTA) | ~(1<<TWSTO));
  a8:	86 b7       	in	r24, 0x36	; 54
  aa:	86 bf       	out	0x36, r24	; 54
	/* Wait until TWINT Flag is set */
	while( !(TWCR & (1<<TWINT)) );
  ac:	06 b6       	in	r0, 0x36	; 54
  ae:	07 fe       	sbrs	r0, 7
  b0:	fd cf       	rjmp	.-6      	; 0xac <TWI_Read+0x24>
	/* Wait valid for status code can be read from TWSR */
	while((TWSR & 0xF8) != SR_SLA_W_ACK_RET);
  b2:	81 b1       	in	r24, 0x01	; 1
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	80 38       	cpi	r24, 0x80	; 128
  b8:	e1 f7       	brne	.-8      	; 0xb2 <TWI_Read+0x2a>
	//while((TWSR ) != SR_SLA_W_ACK_RET);
	return TWDR;
  ba:	83 b1       	in	r24, 0x03	; 3
	
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
