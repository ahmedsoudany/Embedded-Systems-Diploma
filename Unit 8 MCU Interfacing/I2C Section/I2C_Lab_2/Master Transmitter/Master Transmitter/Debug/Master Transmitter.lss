
Master Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e6  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000667  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	unsigned char ch = 0;
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	TWI_Init(0x48);
  70:	68 e4       	ldi	r22, 0x48	; 72
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 54 00 	call	0xa8	; 0xa8 <TWI_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f eb       	ldi	r18, 0xBF	; 191
  7e:	87 e2       	ldi	r24, 0x27	; 39
  80:	99 e0       	ldi	r25, 0x09	; 9
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(3000);
			TWI_Start();
  8e:	0e 94 68 00 	call	0xd0	; 0xd0 <TWI_Start>
			TWI_Write(0b11010000+1); // transmit SLA+Write(0)
  92:	81 ed       	ldi	r24, 0xD1	; 209
  94:	0e 94 72 00 	call	0xe4	; 0xe4 <TWI_Write>
			ch = TWI_Read(0);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <TWI_Read>
  9e:	c8 2f       	mov	r28, r24
			TWI_Stop();
  a0:	0e 94 79 00 	call	0xf2	; 0xf2 <TWI_Stop>
			PORTA = ch;
  a4:	cb bb       	out	0x1b, r28	; 27
  a6:	ea cf       	rjmp	.-44     	; 0x7c <main+0x10>

000000a8 <TWI_Init>:
}

void TWI_Set_Address(unsigned char address)
{
	/* Sending Slave address */
	TWAR = address;
  a8:	9b 01       	movw	r18, r22
  aa:	ac 01       	movw	r20, r24
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	74 e2       	ldi	r23, 0x24	; 36
  b0:	84 ef       	ldi	r24, 0xF4	; 244
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 87 00 	call	0x10e	; 0x10e <__udivmodsi4>
  b8:	da 01       	movw	r26, r20
  ba:	c9 01       	movw	r24, r18
  bc:	40 97       	sbiw	r24, 0x10	; 16
  be:	a1 09       	sbc	r26, r1
  c0:	b1 09       	sbc	r27, r1
  c2:	b6 95       	lsr	r27
  c4:	a7 95       	ror	r26
  c6:	97 95       	ror	r25
  c8:	87 95       	ror	r24
  ca:	80 b9       	out	0x00, r24	; 0
  cc:	11 b8       	out	0x01, r1	; 1
  ce:	08 95       	ret

000000d0 <TWI_Start>:
  d0:	86 b7       	in	r24, 0x36	; 54
  d2:	84 6a       	ori	r24, 0xA4	; 164
  d4:	86 bf       	out	0x36, r24	; 54
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <TWI_Start+0x6>
  dc:	81 b1       	in	r24, 0x01	; 1
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	e9 f7       	brne	.-6      	; 0xdc <TWI_Start+0xc>
  e2:	08 95       	ret

000000e4 <TWI_Write>:
  e4:	83 b9       	out	0x03, r24	; 3
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	86 bf       	out	0x36, r24	; 54
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <TWI_Write+0x6>
  f0:	08 95       	ret

000000f2 <TWI_Stop>:
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	86 bf       	out	0x36, r24	; 54
  f6:	08 95       	ret

000000f8 <TWI_Read>:
	
	//TWCR = ( (1<<TWINT) | (1<<TWEN) | (1<<TWEA) );
	//while( (TWCR & (1<<7)) == 0);
	//while((TWSR ) != 0x60)
	//x = TWSR;
	TWCR = ( (1<<TWINT) | (1<<TWEN) | (ack<<TWEA) );
  f8:	20 e4       	ldi	r18, 0x40	; 64
  fa:	82 9f       	mul	r24, r18
  fc:	c0 01       	movw	r24, r0
  fe:	11 24       	eor	r1, r1
 100:	84 68       	ori	r24, 0x84	; 132
 102:	86 bf       	out	0x36, r24	; 54
//	while( (TWCR & (1<<7)) == 0);
	while( (TWCR & 0x80) == 0 );
 104:	06 b6       	in	r0, 0x36	; 54
 106:	07 fe       	sbrs	r0, 7
 108:	fd cf       	rjmp	.-6      	; 0x104 <TWI_Read+0xc>
	//x = TWSR;
	
	return TWDR;
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	08 95       	ret

0000010e <__udivmodsi4>:
 10e:	a1 e2       	ldi	r26, 0x21	; 33
 110:	1a 2e       	mov	r1, r26
 112:	aa 1b       	sub	r26, r26
 114:	bb 1b       	sub	r27, r27
 116:	fd 01       	movw	r30, r26
 118:	0d c0       	rjmp	.+26     	; 0x134 <__udivmodsi4_ep>

0000011a <__udivmodsi4_loop>:
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	ee 1f       	adc	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	a2 17       	cp	r26, r18
 124:	b3 07       	cpc	r27, r19
 126:	e4 07       	cpc	r30, r20
 128:	f5 07       	cpc	r31, r21
 12a:	20 f0       	brcs	.+8      	; 0x134 <__udivmodsi4_ep>
 12c:	a2 1b       	sub	r26, r18
 12e:	b3 0b       	sbc	r27, r19
 130:	e4 0b       	sbc	r30, r20
 132:	f5 0b       	sbc	r31, r21

00000134 <__udivmodsi4_ep>:
 134:	66 1f       	adc	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	88 1f       	adc	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	1a 94       	dec	r1
 13e:	69 f7       	brne	.-38     	; 0x11a <__udivmodsi4_loop>
 140:	60 95       	com	r22
 142:	70 95       	com	r23
 144:	80 95       	com	r24
 146:	90 95       	com	r25
 148:	9b 01       	movw	r18, r22
 14a:	ac 01       	movw	r20, r24
 14c:	bd 01       	movw	r22, r26
 14e:	cf 01       	movw	r24, r30
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
