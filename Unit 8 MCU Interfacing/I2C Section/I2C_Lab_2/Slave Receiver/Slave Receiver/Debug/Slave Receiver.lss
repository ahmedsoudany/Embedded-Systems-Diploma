
Slave Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000615  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035d  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001751  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	unsigned ch = 0;
	TWI_Set_Address(0b11010000);
  6c:	80 ed       	ldi	r24, 0xD0	; 208
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 51 00 	call	0xa2	; 0xa2 <TWI_Set_Address>
#include <avr/io.h>


int main(void)
{
	unsigned ch = 0;
  74:	c0 e0       	ldi	r28, 0x00	; 0
  76:	d0 e0       	ldi	r29, 0x00	; 0
	TWI_Set_Address(0b11010000);
    /* Replace with your application code */
    while (1) 
    {
		PORTA = TWI_Read(1);
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 53 00 	call	0xa6	; 0xa6 <TWI_Read>
  80:	8b bb       	out	0x1b, r24	; 27
		TWI_Write(ch++);
  82:	8e 01       	movw	r16, r28
  84:	0f 5f       	subi	r16, 0xFF	; 255
  86:	1f 4f       	sbci	r17, 0xFF	; 255
  88:	ce 01       	movw	r24, r28
  8a:	0e 94 49 00 	call	0x92	; 0x92 <TWI_Write>
  8e:	e8 01       	movw	r28, r16
  90:	f3 cf       	rjmp	.-26     	; 0x78 <main+0xc>

00000092 <TWI_Write>:
	TWCR |= (1<<TWINT) | (1<<TWEN) ;
	while((TWCR & 0x80) == 0);
}
void TWI_Stop(void)
{
	TWCR = ( (1<<TWINT)| (1<<TWSTO) | (1<<TWEN) );
  92:	83 b9       	out	0x03, r24	; 3
  94:	86 b7       	in	r24, 0x36	; 54
  96:	84 68       	ori	r24, 0x84	; 132
  98:	86 bf       	out	0x36, r24	; 54
  9a:	06 b6       	in	r0, 0x36	; 54
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <TWI_Write+0x8>
  a0:	08 95       	ret

000000a2 <TWI_Set_Address>:
}

void TWI_Set_Address(unsigned char address)
{
	/* Sending Slave address */
	TWAR = address;
  a2:	82 b9       	out	0x02, r24	; 2
  a4:	08 95       	ret

000000a6 <TWI_Read>:
unsigned char TWI_Read(unsigned char ack)
{
	//unsigned char x;
	
	
	TWCR = ( (1<<TWINT) | (1<<TWEN) | (ack<<TWEA) );
  a6:	20 e4       	ldi	r18, 0x40	; 64
  a8:	82 9f       	mul	r24, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	84 68       	ori	r24, 0x84	; 132
  b0:	86 bf       	out	0x36, r24	; 54
	//while( (TWCR & (1<<7)) == 0);
	//while((TWSR ) != 0x60)
	//x = TWSR;
	//TWCR = ( (1<<TWINT) | (1<<TWEN) | (1<<TWEA) );
	//while( (TWCR & (1<<7)) == 0);
	while((TWCR & 0x80) == 0);
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <TWI_Read+0xc>
	//x = TWSR;
	
	//return TWDR;
	
  b8:	08 95       	ret

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
