
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065e  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000383  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Master_Init>:
#define	DD_SS				4
#define	DD_MISO				6
void SPI_Master_Init(void)
{
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~(1<<DD_MISO);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE) | (1<<MSTR) |(1<<SPR0);
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	81 65       	ori	r24, 0x51	; 81
  7c:	8d b9       	out	0x0d, r24	; 13
  7e:	08 95       	ret

00000080 <SPI_Master_Transmit>:
}
unsigned char SPI_Master_Transmit(unsigned char data)
{
	/* Start transmission */
	SPDR = data;
  80:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while( !(SPSR & (1<<SPIF)) );
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <SPI_Master_Transmit+0x2>
	
	return SPDR;
  86:	8f b1       	in	r24, 0x0f	; 15
}
  88:	08 95       	ret

0000008a <main>:
int main(void)
{
	/* Data to send output */ 
	unsigned char ch;
	/* PORTA is output */ 
	DDRA = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	SPI_Master_Init();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Master_Init>
	
   for(ch = 0 ; ch <= 255; ch++)
  92:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f e3       	ldi	r18, 0x3F	; 63
  96:	8d e0       	ldi	r24, 0x0D	; 13
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x10>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x1a>
  a4:	00 00       	nop
   {
	   _delay_ms(1000);
	   /* Send data to Slave */
	   /* Show received data at PortA*/
	   PORTA = SPI_Master_Transmit(ch);
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 40 00 	call	0x80	; 0x80 <SPI_Master_Transmit>
  ac:	8b bb       	out	0x1b, r24	; 27
	unsigned char ch;
	/* PORTA is output */ 
	DDRA = 0xFF;
	SPI_Master_Init();
	
   for(ch = 0 ; ch <= 255; ch++)
  ae:	cf 5f       	subi	r28, 0xFF	; 255
  b0:	f1 cf       	rjmp	.-30     	; 0x94 <main+0xa>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
