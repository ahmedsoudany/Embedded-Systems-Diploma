
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d9  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056a  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023d  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000061  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SlaveInit>:
#define	DD_SS				4
#define	DD_MISO				6
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDR_SPI |= (1<<DD_MISO);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~( (1<<DD_MISO) & (1<<DD_SCK) & (1<<DD_SS) );
  72:	87 b3       	in	r24, 0x17	; 23
  74:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR |= (1<<SPE);
  76:	8d b1       	in	r24, 0x0d	; 13
  78:	80 64       	ori	r24, 0x40	; 64
  7a:	8d b9       	out	0x0d, r24	; 13
	/* Enable Slave mode */ 
	SPCR &= ~(1<<MSTR);
  7c:	8d b1       	in	r24, 0x0d	; 13
  7e:	8f 7e       	andi	r24, 0xEF	; 239
  80:	8d b9       	out	0x0d, r24	; 13
  82:	08 95       	ret

00000084 <SPI_SlaveReceive>:
	
}
unsigned char SPI_SlaveReceive(unsigned char data)
{
	/* Start transmission */
	SPDR = data ;
  84:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while( !(SPSR & (1<<SPIF)));
  86:	77 9b       	sbis	0x0e, 7	; 14
  88:	fe cf       	rjmp	.-4      	; 0x86 <SPI_SlaveReceive+0x2>

	return SPDR;
  8a:	8f b1       	in	r24, 0x0f	; 15
}
  8c:	08 95       	ret

0000008e <main>:
int main(void)
{
  8e:	cf 93       	push	r28
	/* Data to send output */ 
   	unsigned char ch;
	/* PORTA is output */ 
   	DDRA = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
   	SPI_SlaveInit();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SlaveInit>
   	
   	for(ch = 255 ; ch > 0 ; ch--)
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <main+0x18>
   	{
		/* Send data to Master */
		/* Show received data at PortA*/  
	   	PORTA = SPI_SlaveReceive(ch);
  9c:	8c 2f       	mov	r24, r28
  9e:	0e 94 42 00 	call	0x84	; 0x84 <SPI_SlaveReceive>
  a2:	8b bb       	out	0x1b, r24	; 27
   	unsigned char ch;
	/* PORTA is output */ 
   	DDRA = 0xFF;
   	SPI_SlaveInit();
   	
   	for(ch = 255 ; ch > 0 ; ch--)
  a4:	c1 50       	subi	r28, 0x01	; 1
  a6:	c1 11       	cpse	r28, r1
  a8:	f9 cf       	rjmp	.-14     	; 0x9c <main+0xe>
   	{
		/* Send data to Master */
		/* Show received data at PortA*/  
	   	PORTA = SPI_SlaveReceive(ch);
   	}
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
