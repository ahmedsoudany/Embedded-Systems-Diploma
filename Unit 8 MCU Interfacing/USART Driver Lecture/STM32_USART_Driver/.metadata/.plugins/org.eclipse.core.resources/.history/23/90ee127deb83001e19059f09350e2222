/*
 * STM32F103C6_USART_Drivers.h
 *
 *  Created on: Nov 15, 2023
 *      Author: LEGION
 */

#ifndef INC_STM32F103C6_USART_DRIVERS_H_
#define INC_STM32F103C6_USART_DRIVERS_H_

/-----------------------------
//Includes
//-----------------------------

#include "STM32F103C6_USART_Drivers.h"
#include "STM32F103x6.h"
#include "STM32F103C6_GPIO_Drivers.h"
#include "STM32F103C6_RCC_Driver.h"

//-----------------------------
//User type definitions (structures)
//-----------------------------

typedef struct
{
	uint8_t 				UART_Mode;			// Specifies TX/RX Enable/Disable
												// This parameter must be set based on @ref UART_Mode_define

	uint32_t 				BuadRate;			// Configure the UART communication BaudeRate
												// This parameter must be set based on @ref UART_BuadRate_define

	uint8_t 				Payload_Length;		// Specifies the number of data bits transmitted or received in a frame
												// This parameter must be set based on @ref UART_Payload_Length_define

	uint8_t 				Parity;			    //  Specifies the parity mode
												// This parameter must be set based on @ref UART_Parity_define

	uint8_t 				StopBits;			//  Specifies the number of stop bits transmitted
												// This parameter must be set based on @ref UART_StopBits_define

	uint8_t 				HwFlowCtrl;			//  Specifies whether the hardware flow control mode is enabled or disabled
												// This parameter must be set based on @ref UART_HwFlowCtrl_define


	uint8_t 				IRQ_Enable;			//  Specifies whether the UART IRQ TX/RX is enabled or disabled
												// This parameter must be set based on @ref UART_IRQ_Enable_define
												// You can Select three Parameters EX.UART_IRQ_Enable_TCE | UART_IRQ_Enable_TC

	void(* P_IRQ_CallBack)(void);	  			//Set the C Function() which will be called once the IRQ Happen

}UART_Config;



//-----------------------------
//Macros Configuration References
//-----------------------------
/*@ref Module_REF_NAME_define
*/
// @ref USART_Mode_define

#define UART_Mode_RX				(uint32_t)(1<<2)	// Bit 3 TE: Transmitter enable
														// This bit enables the transmitter. It is set and cleared by software.
#define UART_Mode_TX				(uint32_t)(1<<3)	// Bit 2 RE: Receiver enable
														// This bit enables the receiver. It is set and cleared by software.

#define UART_Mode_TX_RX				((uint32_t)((1<<2) | (1<<3)))

//@ref USART_BuadRate_define
#define UART_BaudRate_2400						2400
#define UART_BaudRate_9600						9600
#define UART_BaudRate_19200						19200
#define UART_BaudRate_57600						57600
#define UART_BaudRate_115200					115200
#define UART_BaudRate_230400					230400
#define UART_BaudRate_460800					460800
#define UART_BaudRate_921600					921600
#define UART_BaudRate_2250000					2250000
#define UART_BaudRate_4500000					4500000


//@ref USART_Payload_Length_define

#define UART_Payload_Length_8B					(uint32_t)(0)
#define UART_Payload_Length_9B					(uint32_t)(1<<12)

//@ref USART_Parity_define

#define UART_Parity__NONE						(uint32_t)(0)
#define UART_Parity__EVEN						((uint32_t)(1<<10))
#define UART_Parity__ODD						((uint32_t)(1<<10 | 1<<9))

//@ref USART_StopBits_define

#define UART_StopBits__HALF					(uint32_t)(1<<12)
#define UART_StopBits__1						(uint32_t)(0)
#define UART_StopBits__1_HALF					(uint32_t)(3>>12)
#define UART_StopBits__2						(uint32_t)(2>>12)

//@ref USART_HwFlowCtrl_define

#define UART_HwFlowCtrl_NONE					(uint32_t)(0)
#define UART_HwFlowCtrl_RTS					((uint32_t)(1<<8))
#define UART_HwFlowCtrl_CTS					((uint32_t)(1<<9))
#define UART_HwFlowCtrl_RTS_CTS				((uint32_t)(1<<8 | 1<<9))

//@ref USART_IRQ_Enable_define

#define UART_IRQ_Enable_NONE					(uint32_t)(0)
#define UART_IRQ_Enable_TXE						((uint32_t)(1<<7))	// Transmit data and register empty
#define UART_IRQ_Enable_TC						((uint32_t)(1<<6))	// Transmission complete
#define UART_IRQ_Enable_RXNEIE					((uint32_t)(1<<5))  // Received data ready to be read & Overrun error detected
#define UART_IRQ_Enable_PE						((uint32_t)(1<<8))  // Parity error

enum Polling_mechism
{
	Enable,
	Disable
};

//Buadrate Calculations
//USARTDIV = fclk / (16 * Buadrate)
//USARTDIV_MUL100 = uint32_t((100 * fclk ) / (16 * Baudrate) == (25 * fclk ) / ( 4 * Buadrate) )
//DIV_Mantissa_MUL100 = Integer Part(USARTDIV) * 100
//DIV_Mantissa = Integer Part (USARTDIV)
//DIV_Fraction = (( USARTDIV_MUL100 - DIV_Mantissa_MUL100 ) * 16 ) / 100

#define USARTDIV(_PCLK_,_BAUD_)									 (uint32_t) ( _PCLK_ /(16  * _BAUD_ ))
#define USARTDIV_MUL100(_PCLK_,_BAUD_)							 (uint32_t) ( (25 * _PCLK_ ) / (4  * _BAUD_ ))
#define Mantissa_MUL100(_PCLK_,_BAUD_)							 (uint32_t) (USARTDIV( _PCLK_ , _BAUD_ ) * 100)
#define Mantissa(_PCLK_,_BAUD_)							 (uint32_t) (USARTDIV( _PCLK_ , _BAUD_ ) )
#define DIV_Fraction(_PCLK_,_BAUD_)								 (uint32_t) (((USARTDIV_MUL100( _PCLK_ , _BAUD_ ) - Mantissa_MUL100( _PCLK_ , _BAUD_ ) ) * 16 ) / 100 )
#define UART_BRR_Register(_PCLK_,_BAUD_)						 (( Mantissa ( _PCLK_ , _BAUD_ ) ) << 4) | ( (DIV_Fraction( _PCLK_ , _BAUD_ )) & 0xF)
//============================

/*
* ==================================================================
*				 APIs Supported by "MCAL GPIO DRIVER"
* ==================================================================
*/

void MCAL_UART_Init(USART_Typedef* USARTx,UART_Config* UART_Config);
void MCAL_UART_DeInit(USART_Typedef* USARTx);

void MCAL_UART_GPIO_Set_Pins(USART_Typedef* USARTx);

void MCAL_UART_SendData(USART_Typedef* USARTx, uint16_t *pTxBuffer, enum Polling_mechism PollingEn);
void MCAL_UART_ReceiveData(USART_Typedef* USARTx, uint16_t *pRxBuffer, enum Polling_mechism PollingEn);

void MCAL_UART_Wait_TC(USART_Typedef* USARTx);

//todo MCAL_USART_LIN_Init();
//todo MCAL_USART_Init();
//todo MCAL_USART_DMA_Init();

#endif /* INC_STM32F103C6_USART_DRIVERS_H_ */
