/*
 * STM32F103C6_USART_Drivers.c
 *
 *  Created on: Nov 15, 2023
 *      Author: LEGION
 */


#include "STM32F103C6_USART_Drivers.h"


/*
* ==================================================================
*				 Generic Macros
* ==================================================================
*/
UART_Config* Global_UART_Config[3] = NULL;


/*
* ==================================================================
*				 APIs
* ==================================================================
*/

/**=======================================================================================
 * @Fn				-MCAL_UART_Init
 * @brief			-Initializes the UART (Supported features ASYNCH. ONLY)
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @param [in]		-UART_Config: ALL UART Configuration EXTI_PinConfig_t
 * 					 the configuration information for the specified GPIO PIN
 * @retval		    -none
 * Note             -Support for now Asynch mode & Clock 8 MZH
 */
void MCAL_UART_Init(USART_Typedef* USARTx,UART_Config* UART_Config)
{

	uint32_t pclk, BRR;



	// Enable the clock for given USART peripheral
	if( USARTx == USART1 )
	{
		RCC_USART1_CLK_EN();
		Global_UART_Config[0] = UART_Config;
	}
	else if( USARTx == USART2 )
	{
		RCC_USART2_CLK_EN();
		Global_UART_Config[1] = UART_Config;
	}
	else if( USARTx == USART3 )
	{
		RCC_USART3_CLK_EN();
		Global_UART_Config[2] = UART_Config;
	}

	//Enable USART Module
	// Bit 12 UE: USART enable
	USARTx->CR1 |= (1<<13);

	// Enbale USART Tx and Rx engines according to the USART_Mode configuration item
	// USART_CR1 ==> Bit 3 TE: Transmitter enable & Bit 2 RE: Receive enable
	USARTx->CR1 |= UART_Config->UART_Mode;

	// PAYLOAD Width
	// USARTx->CR1 Bit 12 M: Word Length
	USARTx->CR1 |= UART_Config->Payload_Length;


	// Configuration of parity control bit field
	// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;

	// Configuration of parity control bit fields
	// USART_CR2 ==> Bit 10 PCE: Parity control enable, Bit 9 PS: Parity selection
	USARTx->CR2 |= UART_Config->StopBits;

	// USAT hardware flow control
	// USART->CR3 Bit 9 CTSE: CTS enable, Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtrl;

	// Configuration of BRR(BaudRate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1

	if ( USARTx == USART1)
	{
			pclk = MCAL_RCC_GetPCLK2Freq();
	}
	else
	{
			pclk = MCAL_RCC_GetPCLK1Freq();
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BuadRate);
	USARTx->BRR = BRR;

	// Enable / Disable
	// USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;

		// Enable NVIC FOR USARTx IRQ

		if( USARTx == USART1)
		{
			NVIC_IRQ37_USART1_Enable;
		}
		else if( USARTx == USART2)
		{
			NVIC_IRQ38_USART2_Enable;
		}
		else if( USARTx == USART3)
		{
			NVIC_IRQ39_USART3_Enable;
		}
	}


}

/**=======================================================================================
 * @Fn				-MCAL_UART_DeInit
 * @brief			-DeInitializes the UART (Supported features ASYNCH. ONLY)
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @param [in]		-UART_Config: ALL UART Configuration EXTI_PinConfig_t
 * 					 the configuration information for the specified GPIO PIN
 * @retval		    -none
 * Note             -Reset the Model by RCC
 */
void MCAL_UART_DeInit(USART_Typedef* USARTx)
{
	if ( USARTx == USART1 )
	{

		RCC_USART1_Reset()
		NVIC_IRQ37_USART1_Disable;
	}
	else if( USARTx == USART2)
	{
		RCC_USART2_Reset();
		NVIC_IRQ38_USART2_Disable;
	}
	else if( USARTx == USART3)
	{
		RCC_USART3_Reset();
		NVIC_IRQ39_USART3_Disable;
	}
}

/**=======================================================================================
 * @Fn				-MCAL_UART_SendData
 * @brief			-Send Buffer on UART
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @param [in]		-pTxBuffer Buffer
 * @param [in]		-PollingEn Enable pooling or disable it
 * @retval		    -none
 * Note             -Should initialize UART First
 * 					 //	When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
					 //	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
					 //	because it is replaced by the parity.
					 //	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					 //	bit.
 */

void MCAL_UART_SendData(USART_Typedef* USARTx, uint16_t *pTxBuffer, enum Polling_mechism PollingEn)
{
		// wait until TXE flag is set in the SR
		if(PollingEn == Enable)
		{
			while(! (USARTx->SR & 1<<7 ) );
		}
		// Check the USART_WordLength item for 9_BIT or 8_BIT in a frame

		if(Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
		}
		else
		{
			// This is 8Bit data transfer
			USARTx->DR = (*pTxBuffer & (uint16_t)0x0FF);
		}
}

/**=======================================================================================
 * @Fn				-MCAL_UART_Wait_TC
 * @brief			-Send Buffer on UART
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @param [in]		-pTxBuffer Buffer
 * @param [in]		-PollingEn Enable pooling or disable it
 * @retval		    -none
 * Note             -Should initialize UART First
 *
 */
void MCAL_UART_Wait_TC(USART_Typedef* USARTx)
{
	// wait till TC flag is set in the SR
	while( ! (USARTx->SR & 1<<6 ) );
}

/**=======================================================================================
 * @Fn				-MCAL_UART_ReceiveData
 * @brief			-Send Buffer on UART
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @param [in]		-pTxBuffer Buffer
 * @param [in]		-PollingEn Enable pooling or disable it
 * @retval		    -none
 * Note             -Should initialize UART First
 * 					 //	When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
					 //	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
					 //	because it is replaced by the parity.
					 //	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					 //	bit.
 */
void MCAL_UART_ReceiveData(USART_Typedef* USARTx, uint16_t *pRxBuffer, enum Polling_mechism PollingEn)
{
	// wait until RXNIE flag is set in the SR
	if(PollingEn == Enable)
	{
		while(! (USARTx->SR & 1<<5 ) );
	}

	// Check the USART_WordLength item for 9_BIT or 8_BIT in a frame

			if(Global_UART_Config->Payload_Length == UART_Payload_Length_9B)
			{
				if(Global_UART_Config->Parity == UART_Parity__NONE)
				{
					// no parity So all 9bit are considered data
					*((uint16_t*) pRxBuffer) = USARTx->DR;
				}
				else
				{
					// Parity is used, so 8bit will be of user data and 1 bit is parity
					*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF );
				}
			}
			else
			{
				// This is 8Bit data transfer
				if(Global_UART_Config->Parity == UART_Parity__NONE)
				{
					// no parity So all 9bit are considered data
					*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF );
				}
				else
				{
					// Parity is used, so 7 bit will be of user data and 1 bit is parity
					*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F );
					}

			}

}

/**=======================================================================================
 * @Fn				-MCAL_UART_GPIO_Set_Pins
 * @brief			-Initializes the GPIO Pins (
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @retval		    -none
 * Note             -Should Enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_USART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_Typedef* USARTx)
{
	GPIO_PinConfig_t PinCfg;

	if ( USARTx == USART1)
	{
		//PA9  TX
		//PA10 RX
		//PA11 CTS
		//PA12 RTS


		//PA9  TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		//PA11 CTS
		if(Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_CTS || Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_11;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

		//PA12 CTS
		if(Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS || Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_12;
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}
	else if ( USARTx == USART2)
	{
		//PA2 TX
		//PA3 RX
		//PA0 CTS
		//PA1 RTS


		//PA2  TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		//PA3 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOA, &PinCfg);
		//PA0 CTS
		if(Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_CTS || Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_0;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

		//PA1 RTS
		if(Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS || Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_1;
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
	else if ( USARTx == USART3)
	{
		//PB10  TX
		//PB11 RX
		//PB13 CTS
		//PB14 RTS


		//PB10  TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		//PB11 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
		//PB13 CTS
		if(Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_CTS || Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}

		//PB14 CTS
		if(Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS || Global_UART_Config->HwFlowCtrl == UART_HwFlowCtrl_RTS_CTS)
		{
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}



	}
}

//ISR
void USART1_IRQHandler (void)
{
	Global_UART_Config->P_IRQ_CallBack();
}


void USART2_IRQHandler (void)
{
	Global_UART_Config->P_IRQ_CallBack();
}


void USART3_IRQHandler (void)
{
	Global_UART_Config->P_IRQ_CallBack();
}
