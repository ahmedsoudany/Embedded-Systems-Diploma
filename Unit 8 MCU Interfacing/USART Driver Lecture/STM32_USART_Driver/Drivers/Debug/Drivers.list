
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000954  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aac  08000aac  00010ab4  2**0
                  CONTENTS
  4 .ARM          00000000  08000aac  08000aac  00010ab4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aac  08000ab4  00010ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ab0  08000ab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000ab4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000ab4  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ab4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004115  00000000  00000000  00010add  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a81  00000000  00000000  00014bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b2c  00000000  00000000  00015673  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e8  00000000  00000000  000161a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000190  00000000  00000000  00016388  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f69  00000000  00000000  00016518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000257c  00000000  00000000  00017481  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b29a  00000000  00000000  000199fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024c97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f8  00000000  00000000  00024d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a6c 	.word	0x08000a6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a6c 	.word	0x08000a6c

08000170 <EXTI0_IRQHandler>:
///**==============       ISR FUNCTIONS        ================
///**==========================================================
// */

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<0;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI0_IRQHandler+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 800017a:	4b03      	ldr	r3, [pc, #12]	; (8000188 <EXTI0_IRQHandler+0x18>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4798      	blx	r3
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010400 	.word	0x40010400
 8000188:	20000028 	.word	0x20000028

0800018c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<1;
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <EXTI1_IRQHandler+0x14>)
 8000192:	2202      	movs	r2, #2
 8000194:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[1]();
 8000196:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI1_IRQHandler+0x18>)
 8000198:	685b      	ldr	r3, [r3, #4]
 800019a:	4798      	blx	r3
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40010400 	.word	0x40010400
 80001a4:	20000028 	.word	0x20000028

080001a8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<2;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <EXTI2_IRQHandler+0x14>)
 80001ae:	2204      	movs	r2, #4
 80001b0:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[2]();
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <EXTI2_IRQHandler+0x18>)
 80001b4:	689b      	ldr	r3, [r3, #8]
 80001b6:	4798      	blx	r3

}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010400 	.word	0x40010400
 80001c0:	20000028 	.word	0x20000028

080001c4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<3;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI3_IRQHandler+0x14>)
 80001ca:	2208      	movs	r2, #8
 80001cc:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[3]();
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <EXTI3_IRQHandler+0x18>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	4798      	blx	r3
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010400 	.word	0x40010400
 80001dc:	20000028 	.word	0x20000028

080001e0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<4;
 80001e4:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <EXTI4_IRQHandler+0x14>)
 80001e6:	2210      	movs	r2, #16
 80001e8:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[4]();
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <EXTI4_IRQHandler+0x18>)
 80001ec:	691b      	ldr	r3, [r3, #16]
 80001ee:	4798      	blx	r3
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40010400 	.word	0x40010400
 80001f8:	20000028 	.word	0x20000028

080001fc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5) {  EXTI->PR |= (1<<5)	; GP_IRQ_CallBack[5]();	}
 8000200:	4b26      	ldr	r3, [pc, #152]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	f003 0320 	and.w	r3, r3, #32
 8000208:	2b00      	cmp	r3, #0
 800020a:	d008      	beq.n	800021e <EXTI9_5_IRQHandler+0x22>
 800020c:	4b23      	ldr	r3, [pc, #140]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a22      	ldr	r2, [pc, #136]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	6153      	str	r3, [r2, #20]
 8000218:	4b21      	ldr	r3, [pc, #132]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4798      	blx	r3
	if (EXTI->PR & 1<<6) {  EXTI->PR |= (1<<6)	; GP_IRQ_CallBack[6]();	}
 800021e:	4b1f      	ldr	r3, [pc, #124]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000226:	2b00      	cmp	r3, #0
 8000228:	d008      	beq.n	800023c <EXTI9_5_IRQHandler+0x40>
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a1b      	ldr	r2, [pc, #108]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4798      	blx	r3
	if (EXTI->PR & 1<<7) {  EXTI->PR |= (1<<7)	; GP_IRQ_CallBack[7]();	}
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x5e>
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a13      	ldr	r2, [pc, #76]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4798      	blx	r3
	if (EXTI->PR & 1<<8) {  EXTI->PR |= (1<<8)	; GP_IRQ_CallBack[8]();	}
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x7c>
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000274:	6a1b      	ldr	r3, [r3, #32]
 8000276:	4798      	blx	r3
	if (EXTI->PR & 1<<9) {  EXTI->PR |= (1<<9)	; GP_IRQ_CallBack[9]();	}
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x9a>
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <EXTI9_5_IRQHandler+0xa4>)
 8000292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000294:	4798      	blx	r3
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010400 	.word	0x40010400
 80002a0:	20000028 	.word	0x20000028

080002a4 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	2b80      	cmp	r3, #128	; 0x80
 80002b2:	d042      	beq.n	800033a <Get_CRLH_Position+0x96>
 80002b4:	2b80      	cmp	r3, #128	; 0x80
 80002b6:	dc11      	bgt.n	80002dc <Get_CRLH_Position+0x38>
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	d036      	beq.n	800032a <Get_CRLH_Position+0x86>
 80002bc:	2b08      	cmp	r3, #8
 80002be:	dc06      	bgt.n	80002ce <Get_CRLH_Position+0x2a>
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d02e      	beq.n	8000322 <Get_CRLH_Position+0x7e>
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	d02e      	beq.n	8000326 <Get_CRLH_Position+0x82>
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d028      	beq.n	800031e <Get_CRLH_Position+0x7a>
 80002cc:	e047      	b.n	800035e <Get_CRLH_Position+0xba>
 80002ce:	2b20      	cmp	r3, #32
 80002d0:	d02f      	beq.n	8000332 <Get_CRLH_Position+0x8e>
 80002d2:	2b40      	cmp	r3, #64	; 0x40
 80002d4:	d02f      	beq.n	8000336 <Get_CRLH_Position+0x92>
 80002d6:	2b10      	cmp	r3, #16
 80002d8:	d029      	beq.n	800032e <Get_CRLH_Position+0x8a>
 80002da:	e040      	b.n	800035e <Get_CRLH_Position+0xba>
 80002dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002e0:	d033      	beq.n	800034a <Get_CRLH_Position+0xa6>
 80002e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002e6:	dc09      	bgt.n	80002fc <Get_CRLH_Position+0x58>
 80002e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002ec:	d029      	beq.n	8000342 <Get_CRLH_Position+0x9e>
 80002ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002f2:	d028      	beq.n	8000346 <Get_CRLH_Position+0xa2>
 80002f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f8:	d021      	beq.n	800033e <Get_CRLH_Position+0x9a>
 80002fa:	e030      	b.n	800035e <Get_CRLH_Position+0xba>
 80002fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000300:	d027      	beq.n	8000352 <Get_CRLH_Position+0xae>
 8000302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000306:	dc03      	bgt.n	8000310 <Get_CRLH_Position+0x6c>
 8000308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800030c:	d01f      	beq.n	800034e <Get_CRLH_Position+0xaa>
 800030e:	e026      	b.n	800035e <Get_CRLH_Position+0xba>
 8000310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000314:	d01f      	beq.n	8000356 <Get_CRLH_Position+0xb2>
 8000316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800031a:	d01e      	beq.n	800035a <Get_CRLH_Position+0xb6>
 800031c:	e01f      	b.n	800035e <Get_CRLH_Position+0xba>
	{
	//CRL Pins
	case GPIO_PIN_0:
		return 0;
 800031e:	2300      	movs	r3, #0
 8000320:	e01e      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000322:	2304      	movs	r3, #4
 8000324:	e01c      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000326:	2308      	movs	r3, #8
 8000328:	e01a      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800032a:	230c      	movs	r3, #12
 800032c:	e018      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800032e:	2310      	movs	r3, #16
 8000330:	e016      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000332:	2314      	movs	r3, #20
 8000334:	e014      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000336:	2318      	movs	r3, #24
 8000338:	e012      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800033a:	231c      	movs	r3, #28
 800033c:	e010      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
		//CRH Pins
	case GPIO_PIN_8:
		return 0;
 800033e:	2300      	movs	r3, #0
 8000340:	e00e      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000342:	2304      	movs	r3, #4
 8000344:	e00c      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000346:	2308      	movs	r3, #8
 8000348:	e00a      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800034a:	230c      	movs	r3, #12
 800034c:	e008      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800034e:	2310      	movs	r3, #16
 8000350:	e006      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000352:	2314      	movs	r3, #20
 8000354:	e004      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000356:	2318      	movs	r3, #24
 8000358:	e002      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800035a:	231c      	movs	r3, #28
 800035c:	e000      	b.n	8000360 <Get_CRLH_Position+0xbc>
		break;
	}

	return 0;
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <MCAL_GPIO_Init>:
 * @retval		    -none
 * Note             -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B, Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 800036a:	b590      	push	{r4, r7, lr}
 800036c:	b085      	sub	sp, #20
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* pconfigregister = NULL;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]

	pconfigregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	2bff      	cmp	r3, #255	; 0xff
 8000382:	d801      	bhi.n	8000388 <MCAL_GPIO_Init+0x1e>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	e001      	b.n	800038c <MCAL_GPIO_Init+0x22>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3304      	adds	r3, #4
 800038c:	60bb      	str	r3, [r7, #8]

	//Clear CNFx[1:0] MODEx[1:0]
	(*pconfigregister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff86 	bl	80002a4 <Get_CRLH_Position>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	230f      	movs	r3, #15
 800039e:	4093      	lsls	r3, r2
 80003a0:	43da      	mvns	r2, r3
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	401a      	ands	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	789b      	ldrb	r3, [r3, #2]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d00b      	beq.n	80003cc <MCAL_GPIO_Init+0x62>
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	789b      	ldrb	r3, [r3, #2]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	d007      	beq.n	80003cc <MCAL_GPIO_Init+0x62>
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	789b      	ldrb	r3, [r3, #2]
 80003c0:	2b06      	cmp	r3, #6
 80003c2:	d003      	beq.n	80003cc <MCAL_GPIO_Init+0x62>
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	d10e      	bne.n	80003ea <MCAL_GPIO_Init+0x80>
	{
		//Set CNFx[1:0] MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	789b      	ldrb	r3, [r3, #2]
 80003d0:	3b04      	subs	r3, #4
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	b25a      	sxtb	r2, r3
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	78db      	ldrb	r3, [r3, #3]
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	4313      	orrs	r3, r2
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f003 030f 	and.w	r3, r3, #15
 80003e6:	73fb      	strb	r3, [r7, #15]
 80003e8:	e02c      	b.n	8000444 <MCAL_GPIO_Init+0xda>
		                        //CNF                              //MODE                     //Need for bits only(0xF)
	}
	//if Pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	789b      	ldrb	r3, [r3, #2]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d003      	beq.n	80003fa <MCAL_GPIO_Init+0x90>
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d107      	bne.n	800040a <MCAL_GPIO_Init+0xa0>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0F);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 030f 	and.w	r3, r3, #15
 8000406:	73fb      	strb	r3, [r7, #15]
 8000408:	e01c      	b.n	8000444 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	789b      	ldrb	r3, [r3, #2]
 800040e:	2b08      	cmp	r3, #8
 8000410:	d102      	bne.n	8000418 <MCAL_GPIO_Init+0xae>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0F);
 8000412:	2304      	movs	r3, #4
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e015      	b.n	8000444 <MCAL_GPIO_Init+0xda>
		}
		//PU PD Input
		else
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000418:	2308      	movs	r3, #8
 800041a:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d107      	bne.n	8000434 <MCAL_GPIO_Init+0xca>
			{
				//Input pull up: Table 20. Port bit configuration table (PxODR = 1 )
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	8812      	ldrh	r2, [r2, #0]
 800042c:	431a      	orrs	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	e007      	b.n	8000444 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//Input pull down: Table 20. Port bit configuration table (PxODR = 0)
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	43d2      	mvns	r2, r2
 800043e:	401a      	ands	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	60da      	str	r2, [r3, #12]
		}


	}
	//Write on the CRL or CRH
	(*pconfigregister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000444:	7bfc      	ldrb	r4, [r7, #15]
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff2a 	bl	80002a4 <Get_CRLH_Position>
 8000450:	4603      	mov	r3, r0
 8000452:	fa04 f203 	lsl.w	r2, r4, r3
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	431a      	orrs	r2, r3
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bd90      	pop	{r4, r7, pc}

08000468 <MCAL_RCC_GetSYS_CLCKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint16_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9}; //Shift 1 right == divide by 2

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch( (RCC->CFGR >> 2) & 0b11)
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	089b      	lsrs	r3, r3, #2
 8000472:	f003 0303 	and.w	r3, r3, #3
 8000476:	2b01      	cmp	r3, #1
 8000478:	d006      	beq.n	8000488 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 800047a:	2b01      	cmp	r3, #1
 800047c:	d302      	bcc.n	8000484 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800047e:	2b02      	cmp	r3, #2
 8000480:	d004      	beq.n	800048c <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000482:	e005      	b.n	8000490 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{

	case 0:

		return HSI_RC_Clk;
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000486:	e003      	b.n	8000490 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;

	case 1:

		//todo need to calculate it //HSE User Should Specify it
		return HSE_Clock;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800048a:	e001      	b.n	8000490 <MCAL_RCC_GetSYS_CLCKFreq+0x28>

	case 2:

		//todo need to calculate it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800048e:	e7ff      	b.n	8000490 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}

}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000
 800049c:	007a1200 	.word	0x007a1200
 80004a0:	00f42400 	.word	0x00f42400

080004a4 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4) & 0xF) ] );
 80004a8:	f7ff ffde 	bl	8000468 <MCAL_RCC_GetSYS_CLCKFreq>
 80004ac:	4601      	mov	r1, r0
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MCAL_RCC_GetHCLKFreq+0x24>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	091b      	lsrs	r3, r3, #4
 80004b4:	f003 030f 	and.w	r3, r3, #15
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <MCAL_RCC_GetHCLKFreq+0x28>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	08000a8c 	.word	0x08000a8c

080004d0 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return  (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8) & 0b111) ] );
 80004d4:	f7ff ffe6 	bl	80004a4 <MCAL_RCC_GetHCLKFreq>
 80004d8:	4601      	mov	r1, r0
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	0a1b      	lsrs	r3, r3, #8
 80004e0:	f003 0307 	and.w	r3, r3, #7
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80004e6:	5cd3      	ldrb	r3, [r2, r3]
 80004e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	08000a84 	.word	0x08000a84

080004f8 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return  (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11) & 0b111) ] );
 80004fc:	f7ff ffd2 	bl	80004a4 <MCAL_RCC_GetHCLKFreq>
 8000500:	4601      	mov	r1, r0
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	0adb      	lsrs	r3, r3, #11
 8000508:	f003 0307 	and.w	r3, r3, #7
 800050c:	4a03      	ldr	r2, [pc, #12]	; (800051c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800050e:	5cd3      	ldrb	r3, [r2, r3]
 8000510:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000514:	4618      	mov	r0, r3
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000
 800051c:	08000a84 	.word	0x08000a84

08000520 <MCAL_UART_Init>:
 * 					 the configuration information for the specified GPIO PIN
 * @retval		    -none
 * Note             -Support for now Asynch mode & Clock 8 MZH
 */
void MCAL_UART_Init(USART_Typedef* USARTx,UART_Config* UART_Config)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;



	// Enable the clock for given USART peripheral
	if( USARTx == USART1 )
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a59      	ldr	r2, [pc, #356]	; (8000694 <MCAL_UART_Init+0x174>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d109      	bne.n	8000546 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000532:	4b59      	ldr	r3, [pc, #356]	; (8000698 <MCAL_UART_Init+0x178>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a58      	ldr	r2, [pc, #352]	; (8000698 <MCAL_UART_Init+0x178>)
 8000538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053c:	6193      	str	r3, [r2, #24]
		Global_UART_Config[0] = UART_Config;
 800053e:	4a57      	ldr	r2, [pc, #348]	; (800069c <MCAL_UART_Init+0x17c>)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e01a      	b.n	800057c <MCAL_UART_Init+0x5c>

	}
	else if( USARTx == USART2 )
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a55      	ldr	r2, [pc, #340]	; (80006a0 <MCAL_UART_Init+0x180>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d109      	bne.n	8000562 <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 800054e:	4b52      	ldr	r3, [pc, #328]	; (8000698 <MCAL_UART_Init+0x178>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a51      	ldr	r2, [pc, #324]	; (8000698 <MCAL_UART_Init+0x178>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[1] = UART_Config;
 800055a:	4a50      	ldr	r2, [pc, #320]	; (800069c <MCAL_UART_Init+0x17c>)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	6053      	str	r3, [r2, #4]
 8000560:	e00c      	b.n	800057c <MCAL_UART_Init+0x5c>


	}
	else if( USARTx == USART3 )
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a4f      	ldr	r2, [pc, #316]	; (80006a4 <MCAL_UART_Init+0x184>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d108      	bne.n	800057c <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 800056a:	4b4b      	ldr	r3, [pc, #300]	; (8000698 <MCAL_UART_Init+0x178>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	4a4a      	ldr	r2, [pc, #296]	; (8000698 <MCAL_UART_Init+0x178>)
 8000570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000574:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[2] = UART_Config;
 8000576:	4a49      	ldr	r2, [pc, #292]	; (800069c <MCAL_UART_Init+0x17c>)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	6093      	str	r3, [r2, #8]

	}

	//Enable USART Module
	// Bit 12 UE: USART enable
	USARTx->CR1 |= (1<<13);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	60da      	str	r2, [r3, #12]

	// Enbale USART Tx and Rx engines according to the USART_Mode configuration item
	// USART_CR1 ==> Bit 3 TE: Transmitter enable & Bit 2 RE: Receive enable
	USARTx->CR1 |= UART_Config->UART_Mode;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60da      	str	r2, [r3, #12]

	// PAYLOAD Width
	// USARTx->CR1 Bit 12 M: Word Length
	USARTx->CR1 |= UART_Config->Payload_Length;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	7a12      	ldrb	r2, [r2, #8]
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]


	// Configuration of parity control bit field
	// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	7a52      	ldrb	r2, [r2, #9]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields
	// USART_CR2 ==> Bit 10 PCE: Parity control enable, Bit 9 PS: Parity selection
	USARTx->CR2 |= UART_Config->StopBits;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	7a92      	ldrb	r2, [r2, #10]
 80005ba:	431a      	orrs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	611a      	str	r2, [r3, #16]

	// USAT hardware flow control
	// USART->CR3 Bit 9 CTSE: CTS enable, Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtrl;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	7ad2      	ldrb	r2, [r2, #11]
 80005c8:	431a      	orrs	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	615a      	str	r2, [r3, #20]

	// Configuration of BRR(BaudRate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1

	if ( USARTx == USART1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a30      	ldr	r2, [pc, #192]	; (8000694 <MCAL_UART_Init+0x174>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d103      	bne.n	80005de <MCAL_UART_Init+0xbe>
	{
			pclk = MCAL_RCC_GetPCLK2Freq();
 80005d6:	f7ff ff8f 	bl	80004f8 <MCAL_RCC_GetPCLK2Freq>
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	e002      	b.n	80005e4 <MCAL_UART_Init+0xc4>
	}
	else
	{
			pclk = MCAL_RCC_GetPCLK1Freq();
 80005de:	f7ff ff77 	bl	80004d0 <MCAL_RCC_GetPCLK1Freq>
 80005e2:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BuadRate);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f0:	0119      	lsls	r1, r3, #4
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4613      	mov	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	009a      	lsls	r2, r3, #2
 80005fc:	441a      	add	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	fbb2 f2f3 	udiv	r2, r2, r3
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	fbb0 f3f3 	udiv	r3, r0, r3
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	fb00 f303 	mul.w	r3, r0, r3
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MCAL_UART_Init+0x188>)
 8000620:	fba2 2303 	umull	r2, r3, r2, r3
 8000624:	095b      	lsrs	r3, r3, #5
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	430b      	orrs	r3, r1
 800062c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	609a      	str	r2, [r3, #8]

	// Enable / Disable
	// USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	7b1b      	ldrb	r3, [r3, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d026      	beq.n	800068a <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	7b12      	ldrb	r2, [r2, #12]
 8000644:	431a      	orrs	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	60da      	str	r2, [r3, #12]

		// Enable NVIC FOR USARTx IRQ

		if( USARTx == USART1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <MCAL_UART_Init+0x174>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <MCAL_UART_Init+0x140>
		{
			NVIC_IRQ37_USART1_Enable;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MCAL_UART_Init+0x18c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <MCAL_UART_Init+0x18c>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_Enable;
		}
	}


}
 800065e:	e014      	b.n	800068a <MCAL_UART_Init+0x16a>
		else if( USARTx == USART2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <MCAL_UART_Init+0x180>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d106      	bne.n	8000676 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_Enable;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MCAL_UART_Init+0x18c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MCAL_UART_Init+0x18c>)
 800066e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	e009      	b.n	800068a <MCAL_UART_Init+0x16a>
		else if( USARTx == USART3)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <MCAL_UART_Init+0x184>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d105      	bne.n	800068a <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_Enable;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MCAL_UART_Init+0x18c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <MCAL_UART_Init+0x18c>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6013      	str	r3, [r2, #0]
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40013800 	.word	0x40013800
 8000698:	40021000 	.word	0x40021000
 800069c:	2000001c 	.word	0x2000001c
 80006a0:	40004400 	.word	0x40004400
 80006a4:	40004800 	.word	0x40004800
 80006a8:	51eb851f 	.word	0x51eb851f
 80006ac:	e000e104 	.word	0xe000e104

080006b0 <MCAL_UART_SendData>:
					 //	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					 //	bit.
 */

void MCAL_UART_SendData(USART_Typedef* USARTx, uint16_t *pTxBuffer, enum Polling_mechism PollingEn)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	4613      	mov	r3, r2
 80006bc:	71fb      	strb	r3, [r7, #7]
		// wait until TXE flag is set in the SR
		if(PollingEn == Enable)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d106      	bne.n	80006d2 <MCAL_UART_SendData+0x22>
		{
			while(! (USARTx->SR & 1<<7 ) );
 80006c4:	bf00      	nop
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f9      	beq.n	80006c6 <MCAL_UART_SendData+0x16>
		}
		// Check the USART_WordLength item for 9_BIT or 8_BIT in a frame

		if (USARTx == USART1)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MCAL_UART_SendData+0x84>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d10a      	bne.n	80006f0 <MCAL_UART_SendData+0x40>
		{
			if(Global_UART_Config[0]->Payload_Length == UART_Payload_Length_9B)
			{
				USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
			}
			else if(Global_UART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MCAL_UART_SendData+0x88>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	7a1b      	ldrb	r3, [r3, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d122      	bne.n	800072a <MCAL_UART_SendData+0x7a>
			{
				// This is 8Bit data transfer
				USARTx->DR = (*pTxBuffer & (uint16_t)0x0FF);
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	605a      	str	r2, [r3, #4]
				USARTx->DR = (*pTxBuffer & (uint16_t)0x0FF);
			}
		}


}
 80006ee:	e01c      	b.n	800072a <MCAL_UART_SendData+0x7a>
		else if (USARTx == USART2)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MCAL_UART_SendData+0x8c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d10a      	bne.n	800070e <MCAL_UART_SendData+0x5e>
			else if(Global_UART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MCAL_UART_SendData+0x88>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	7a1b      	ldrb	r3, [r3, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d113      	bne.n	800072a <MCAL_UART_SendData+0x7a>
				USARTx->DR = (*pTxBuffer & (uint16_t)0x0FF);
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	605a      	str	r2, [r3, #4]
}
 800070c:	e00d      	b.n	800072a <MCAL_UART_SendData+0x7a>
		else if (USARTx == USART3)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <MCAL_UART_SendData+0x90>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d109      	bne.n	800072a <MCAL_UART_SendData+0x7a>
			else if(Global_UART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MCAL_UART_SendData+0x88>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	7a1b      	ldrb	r3, [r3, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d104      	bne.n	800072a <MCAL_UART_SendData+0x7a>
				USARTx->DR = (*pTxBuffer & (uint16_t)0x0FF);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	605a      	str	r2, [r3, #4]
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40013800 	.word	0x40013800
 8000738:	2000001c 	.word	0x2000001c
 800073c:	40004400 	.word	0x40004400
 8000740:	40004800 	.word	0x40004800

08000744 <MCAL_UART_ReceiveData>:
					 //	because it is replaced by the parity.
					 //	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					 //	bit.
 */
void MCAL_UART_ReceiveData(USART_Typedef* USARTx, uint16_t *pRxBuffer, enum Polling_mechism PollingEn)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	4613      	mov	r3, r2
 8000750:	71fb      	strb	r3, [r7, #7]
	// wait until RXNIE flag is set in the SR
	if(PollingEn == Enable)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d106      	bne.n	8000766 <MCAL_UART_ReceiveData+0x22>
	{
		while(! (USARTx->SR & 1<<5 ) );
 8000758:	bf00      	nop
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f9      	beq.n	800075a <MCAL_UART_ReceiveData+0x16>
	}

	// Check the USART_WordLength item for 9_BIT or 8_BIT in a frame

	if (USARTx == USART1)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4a28      	ldr	r2, [pc, #160]	; (800080c <MCAL_UART_ReceiveData+0xc8>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d115      	bne.n	800079a <MCAL_UART_ReceiveData+0x56>
			}
		}
		else
		{
			// This is 8Bit data transfer
			if(Global_UART_Config[0]->Parity == UART_Parity__NONE)
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MCAL_UART_ReceiveData+0xcc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	7a5b      	ldrb	r3, [r3, #9]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d107      	bne.n	8000788 <MCAL_UART_ReceiveData+0x44>
			{
				// no parity So all 9bit are considered data
				*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF );
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	b29b      	uxth	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	b29a      	uxth	r2, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	801a      	strh	r2, [r3, #0]

		}
	}


}
 8000786:	e03b      	b.n	8000800 <MCAL_UART_ReceiveData+0xbc>
				*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F );
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	b29b      	uxth	r3, r3
 800078e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000792:	b29a      	uxth	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	801a      	strh	r2, [r3, #0]
}
 8000798:	e032      	b.n	8000800 <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART2)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <MCAL_UART_ReceiveData+0xd0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d115      	bne.n	80007ce <MCAL_UART_ReceiveData+0x8a>
			if(Global_UART_Config[1]->Parity == UART_Parity__NONE)
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MCAL_UART_ReceiveData+0xcc>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	7a5b      	ldrb	r3, [r3, #9]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d107      	bne.n	80007bc <MCAL_UART_ReceiveData+0x78>
				*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF );
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	801a      	strh	r2, [r3, #0]
}
 80007ba:	e021      	b.n	8000800 <MCAL_UART_ReceiveData+0xbc>
				*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F );
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	801a      	strh	r2, [r3, #0]
}
 80007cc:	e018      	b.n	8000800 <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART2)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4a10      	ldr	r2, [pc, #64]	; (8000814 <MCAL_UART_ReceiveData+0xd0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d114      	bne.n	8000800 <MCAL_UART_ReceiveData+0xbc>
			if(Global_UART_Config[2]->Parity == UART_Parity__NONE)
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MCAL_UART_ReceiveData+0xcc>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d107      	bne.n	80007f0 <MCAL_UART_ReceiveData+0xac>
				*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	801a      	strh	r2, [r3, #0]
}
 80007ee:	e007      	b.n	8000800 <MCAL_UART_ReceiveData+0xbc>
				*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F );
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	801a      	strh	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40013800 	.word	0x40013800
 8000810:	2000001c 	.word	0x2000001c
 8000814:	40004400 	.word	0x40004400

08000818 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in]		-USARTx: where x can be (1..3 depending on device used)
 * @retval		    -none
 * Note             -Should Enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_USART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_Typedef* USARTx)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if ( USARTx == USART1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d118      	bne.n	800085a <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA11 CTS
		//PA12 RTS


		//PA9  TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800082e:	2306      	movs	r3, #6
 8000830:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4825      	ldr	r0, [pc, #148]	; (80008d4 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800083e:	f7ff fd94 	bl	800036a <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000848:	2308      	movs	r3, #8
 800084a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4820      	ldr	r0, [pc, #128]	; (80008d4 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000854:	f7ff fd89 	bl	800036a <MCAL_GPIO_Init>
		}



	}
}
 8000858:	e036      	b.n	80008c8 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d116      	bne.n	8000890 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000862:	2304      	movs	r3, #4
 8000864:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000866:	2306      	movs	r3, #6
 8000868:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	4817      	ldr	r0, [pc, #92]	; (80008d4 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000876:	f7ff fd78 	bl	800036a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800087a:	2308      	movs	r3, #8
 800087c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800087e:	2308      	movs	r3, #8
 8000880:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800088a:	f7ff fd6e 	bl	800036a <MCAL_GPIO_Init>
}
 800088e:	e01b      	b.n	80008c8 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d117      	bne.n	80008c8 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800089e:	2306      	movs	r3, #6
 80008a0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80008ae:	f7ff fd5c 	bl	800036a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80008b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008b6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80008b8:	2308      	movs	r3, #8
 80008ba:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80008c4:	f7ff fd51 	bl	800036a <MCAL_GPIO_Init>
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40010800 	.word	0x40010800
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40004800 	.word	0x40004800
 80008e0:	40010c00 	.word	0x40010c00

080008e4 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler (void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	Global_UART_Config[0]->P_IRQ_CallBack();
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <USART1_IRQHandler+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	4798      	blx	r3
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000001c 	.word	0x2000001c

080008f8 <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack();
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <USART2_IRQHandler+0x10>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	4798      	blx	r3
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000001c 	.word	0x2000001c

0800090c <USART3_IRQHandler>:


void USART3_IRQHandler (void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack();
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <USART3_IRQHandler+0x10>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	4798      	blx	r3
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000001c 	.word	0x2000001c

08000920 <clock_init>:
	for(i = 0; i < time; i++)
		for(j = 0; i < 255; j++);
}

void clock_init()
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	//IO port A clock enable
	RCC_GPIOA_CLK_EN();
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <clock_init+0x30>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <clock_init+0x30>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
	//IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <clock_init+0x30>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <clock_init+0x30>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
	//IO port AFIO clock enable
	RCC_AFIO_CLK_EN();
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <clock_init+0x30>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <clock_init+0x30>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6193      	str	r3, [r2, #24]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40021000 	.word	0x40021000

08000954 <Ahmed_UART_IRQ_CallBack>:
		MCAL_UART_SendData(USART1, &ch, Enable);
	}

}
void Ahmed_UART_IRQ_CallBack()
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &ch, Disable);
 8000958:	2201      	movs	r2, #1
 800095a:	4905      	ldr	r1, [pc, #20]	; (8000970 <Ahmed_UART_IRQ_CallBack+0x1c>)
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <Ahmed_UART_IRQ_CallBack+0x20>)
 800095e:	f7ff fef1 	bl	8000744 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, Enable);
 8000962:	2200      	movs	r2, #0
 8000964:	4902      	ldr	r1, [pc, #8]	; (8000970 <Ahmed_UART_IRQ_CallBack+0x1c>)
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <Ahmed_UART_IRQ_CallBack+0x20>)
 8000968:	f7ff fea2 	bl	80006b0 <MCAL_UART_SendData>

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000064 	.word	0x20000064
 8000974:	40013800 	.word	0x40013800

08000978 <UART_Init_test2>:
void UART_Init_test2()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
	UART_Config uartCFG;
	uartCFG.BuadRate = UART_BaudRate_115200;
 800097e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000982:	60bb      	str	r3, [r7, #8]
	uartCFG.HwFlowCtrl = UART_HwFlowCtrl_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000988:	2320      	movs	r3, #32
 800098a:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CallBack = Ahmed_UART_IRQ_CallBack;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <UART_Init_test2+0x40>)
 800098e:	617b      	str	r3, [r7, #20]
	uartCFG.Parity = UART_Parity__NONE;
 8000990:	2300      	movs	r3, #0
 8000992:	737b      	strb	r3, [r7, #13]
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 8000994:	2300      	movs	r3, #0
 8000996:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBits = UART_StopBits__1;
 8000998:	2300      	movs	r3, #0
 800099a:	73bb      	strb	r3, [r7, #14]
	uartCFG.UART_Mode = UART_Mode_TX_RX;
 800099c:	230c      	movs	r3, #12
 800099e:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &uartCFG);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <UART_Init_test2+0x44>)
 80009a6:	f7ff fdbb 	bl	8000520 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <UART_Init_test2+0x44>)
 80009ac:	f7ff ff34 	bl	8000818 <MCAL_UART_GPIO_Set_Pins>

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08000955 	.word	0x08000955
 80009bc:	40013800 	.word	0x40013800

080009c0 <main>:

int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

	clock_init();
 80009c4:	f7ff ffac 	bl	8000920 <clock_init>
	//UART_Init_test1();
	UART_Init_test2();
 80009c8:	f7ff ffd6 	bl	8000978 <UART_Init_test2>

    /* Loop forever */
	while(1)
 80009cc:	e7fe      	b.n	80009cc <main+0xc>
	...

080009d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009fe:	f000 f811 	bl	8000a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a02:	f7ff ffdd 	bl	80009c0 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   r0, =_estack
 8000a08:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a14:	08000ab4 	.word	0x08000ab4
  ldr r2, =_sbss
 8000a18:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a1c:	20000068 	.word	0x20000068

08000a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_2_IRQHandler>
	...

08000a24 <__libc_init_array>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	2500      	movs	r5, #0
 8000a28:	4e0c      	ldr	r6, [pc, #48]	; (8000a5c <__libc_init_array+0x38>)
 8000a2a:	4c0d      	ldr	r4, [pc, #52]	; (8000a60 <__libc_init_array+0x3c>)
 8000a2c:	1ba4      	subs	r4, r4, r6
 8000a2e:	10a4      	asrs	r4, r4, #2
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	d109      	bne.n	8000a48 <__libc_init_array+0x24>
 8000a34:	f000 f81a 	bl	8000a6c <_init>
 8000a38:	2500      	movs	r5, #0
 8000a3a:	4e0a      	ldr	r6, [pc, #40]	; (8000a64 <__libc_init_array+0x40>)
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	; (8000a68 <__libc_init_array+0x44>)
 8000a3e:	1ba4      	subs	r4, r4, r6
 8000a40:	10a4      	asrs	r4, r4, #2
 8000a42:	42a5      	cmp	r5, r4
 8000a44:	d105      	bne.n	8000a52 <__libc_init_array+0x2e>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a4c:	4798      	blx	r3
 8000a4e:	3501      	adds	r5, #1
 8000a50:	e7ee      	b.n	8000a30 <__libc_init_array+0xc>
 8000a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a56:	4798      	blx	r3
 8000a58:	3501      	adds	r5, #1
 8000a5a:	e7f2      	b.n	8000a42 <__libc_init_array+0x1e>
 8000a5c:	08000aac 	.word	0x08000aac
 8000a60:	08000aac 	.word	0x08000aac
 8000a64:	08000aac 	.word	0x08000aac
 8000a68:	08000ab0 	.word	0x08000ab0

08000a6c <_init>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr

08000a78 <_fini>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr
