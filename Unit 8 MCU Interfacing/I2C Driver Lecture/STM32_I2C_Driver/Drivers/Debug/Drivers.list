
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fa8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080010d8  080010d8  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001108  08001108  00011110  2**0
                  CONTENTS
  4 .ARM          00000000  08001108  08001108  00011110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001108  08001110  00011110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001108  08001108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  08001110  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001110  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d0e  00000000  00000000  00011139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000106c  00000000  00000000  00017e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001312  00000000  00000000  00018eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e8  00000000  00000000  0001a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  0001a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000038a5  00000000  00000000  0001a710  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003c15  00000000  00000000  0001dfb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000d478  00000000  00000000  00021bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f042  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009a0  00000000  00000000  0002f0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080010c0 	.word	0x080010c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080010c0 	.word	0x080010c0

08000170 <EEPROM_Init>:
 */

#include "I2C_Slave_EEPROM.h"

void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//		PB7 : I2C_SDA
	I2C_InitTypedef I2CICFG ;

	//I2C Controller act as a Master

	I2CICFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2CICFG.I2C_ACK_Control = I2C_ACK_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2CICFG.I2C_ClockSpeed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2CICFG.I2C_Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2CICFG.P_Slave_Event_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2CICFG.Stretch_Mode = I2C_StretchMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fb1d 	bl	80007d0 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2CICFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 fa02 	bl	80005a4 <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_NBytes>:
uint8_t EEPROM_Write_NBytes(uint32_t Memory_Address , uint8_t* Bytes, uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2) ;

	uint8_t buffer[256];

	buffer[0] = (uint8_t)(Memory_Address >> 8 ); // Upper byte Memory address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address      ); // Lower byte Memory address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i = 2 ; i < (Data_Length+2) ; i++ )
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <EEPROM_Write_NBytes+0x66>
	{
		buffer[i] = Bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for(i = 2 ; i < (Data_Length+2) ; i++ )
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, (Data_Length+2), With_Stop, Start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <EEPROM_Write_NBytes+0xa0>)
 800023e:	f000 fb0f 	bl	8000860 <MCAL_I2C_Master_TX>

	return 0;
 8000242:	2300      	movs	r3, #0

}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <EEPROM_Read_NBytes>:
uint8_t EEPROM_Read_NBytes(uint32_t Memory_Address, uint8_t* DataOut, uint8_t Data_Length)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];

	buffer[0] = (uint8_t)(Memory_Address >> 8 ); // Upper byte Memory address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(Memory_Address      ); // Lower byte Memory address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2, Without_Stop, Start); //Write Address Only
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <EEPROM_Read_NBytes+0x54>)
 8000282:	f000 faed 	bl	8000860 <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, DataOut, Data_Length, With_Stop, Repeated_start); //Write Address Only
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <EEPROM_Read_NBytes+0x54>)
 8000298:	f000 fb36 	bl	8000908 <MCAL_I2C_Master_RX>

	return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <EXTI0_IRQHandler>:
///**==============       ISR FUNCTIONS        ================
///**==========================================================
// */

void EXTI0_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<0;
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <EXTI0_IRQHandler+0x14>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80002b6:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <EXTI0_IRQHandler+0x18>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4798      	blx	r3
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40010400 	.word	0x40010400
 80002c4:	20000070 	.word	0x20000070

080002c8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<1;
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI1_IRQHandler+0x14>)
 80002ce:	2202      	movs	r2, #2
 80002d0:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[1]();
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI1_IRQHandler+0x18>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	4798      	blx	r3
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000070 	.word	0x20000070

080002e4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<2;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <EXTI2_IRQHandler+0x14>)
 80002ea:	2204      	movs	r2, #4
 80002ec:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[2]();
 80002ee:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI2_IRQHandler+0x18>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	4798      	blx	r3

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40010400 	.word	0x40010400
 80002fc:	20000070 	.word	0x20000070

08000300 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<3;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI3_IRQHandler+0x14>)
 8000306:	2208      	movs	r2, #8
 8000308:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[3]();
 800030a:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI3_IRQHandler+0x18>)
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	4798      	blx	r3
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40010400 	.word	0x40010400
 8000318:	20000070 	.word	0x20000070

0800031c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//clear by writing '1' into the Pending_register (EXTI_PR
	EXTI->PR = 1<<4;
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI4_IRQHandler+0x14>)
 8000322:	2210      	movs	r2, #16
 8000324:	615a      	str	r2, [r3, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[4]();
 8000326:	4b03      	ldr	r3, [pc, #12]	; (8000334 <EXTI4_IRQHandler+0x18>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	4798      	blx	r3
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40010400 	.word	0x40010400
 8000334:	20000070 	.word	0x20000070

08000338 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5) {  EXTI->PR |= (1<<5)	; GP_IRQ_CallBack[5]();	}
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	2b00      	cmp	r3, #0
 8000346:	d008      	beq.n	800035a <EXTI9_5_IRQHandler+0x22>
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6153      	str	r3, [r2, #20]
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <EXTI9_5_IRQHandler+0xa4>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4798      	blx	r3
	if (EXTI->PR & 1<<6) {  EXTI->PR |= (1<<6)	; GP_IRQ_CallBack[6]();	}
 800035a:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000362:	2b00      	cmp	r3, #0
 8000364:	d008      	beq.n	8000378 <EXTI9_5_IRQHandler+0x40>
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 800036c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <EXTI9_5_IRQHandler+0xa4>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4798      	blx	r3
	if (EXTI->PR & 1<<7) {  EXTI->PR |= (1<<7)	; GP_IRQ_CallBack[7]();	}
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <EXTI9_5_IRQHandler+0x5e>
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 800038a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038e:	6153      	str	r3, [r2, #20]
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <EXTI9_5_IRQHandler+0xa4>)
 8000392:	69db      	ldr	r3, [r3, #28]
 8000394:	4798      	blx	r3
	if (EXTI->PR & 1<<8) {  EXTI->PR |= (1<<8)	; GP_IRQ_CallBack[8]();	}
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d008      	beq.n	80003b4 <EXTI9_5_IRQHandler+0x7c>
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a0c      	ldr	r2, [pc, #48]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 80003a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <EXTI9_5_IRQHandler+0xa4>)
 80003b0:	6a1b      	ldr	r3, [r3, #32]
 80003b2:	4798      	blx	r3
	if (EXTI->PR & 1<<9) {  EXTI->PR |= (1<<9)	; GP_IRQ_CallBack[9]();	}
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d008      	beq.n	80003d2 <EXTI9_5_IRQHandler+0x9a>
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <EXTI9_5_IRQHandler+0xa0>)
 80003c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <EXTI9_5_IRQHandler+0xa4>)
 80003ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d0:	4798      	blx	r3
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010400 	.word	0x40010400
 80003dc:	20000070 	.word	0x20000070

080003e0 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	2b80      	cmp	r3, #128	; 0x80
 80003ee:	d042      	beq.n	8000476 <Get_CRLH_Position+0x96>
 80003f0:	2b80      	cmp	r3, #128	; 0x80
 80003f2:	dc11      	bgt.n	8000418 <Get_CRLH_Position+0x38>
 80003f4:	2b08      	cmp	r3, #8
 80003f6:	d036      	beq.n	8000466 <Get_CRLH_Position+0x86>
 80003f8:	2b08      	cmp	r3, #8
 80003fa:	dc06      	bgt.n	800040a <Get_CRLH_Position+0x2a>
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d02e      	beq.n	800045e <Get_CRLH_Position+0x7e>
 8000400:	2b04      	cmp	r3, #4
 8000402:	d02e      	beq.n	8000462 <Get_CRLH_Position+0x82>
 8000404:	2b01      	cmp	r3, #1
 8000406:	d028      	beq.n	800045a <Get_CRLH_Position+0x7a>
 8000408:	e047      	b.n	800049a <Get_CRLH_Position+0xba>
 800040a:	2b20      	cmp	r3, #32
 800040c:	d02f      	beq.n	800046e <Get_CRLH_Position+0x8e>
 800040e:	2b40      	cmp	r3, #64	; 0x40
 8000410:	d02f      	beq.n	8000472 <Get_CRLH_Position+0x92>
 8000412:	2b10      	cmp	r3, #16
 8000414:	d029      	beq.n	800046a <Get_CRLH_Position+0x8a>
 8000416:	e040      	b.n	800049a <Get_CRLH_Position+0xba>
 8000418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800041c:	d033      	beq.n	8000486 <Get_CRLH_Position+0xa6>
 800041e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000422:	dc09      	bgt.n	8000438 <Get_CRLH_Position+0x58>
 8000424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000428:	d029      	beq.n	800047e <Get_CRLH_Position+0x9e>
 800042a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800042e:	d028      	beq.n	8000482 <Get_CRLH_Position+0xa2>
 8000430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000434:	d021      	beq.n	800047a <Get_CRLH_Position+0x9a>
 8000436:	e030      	b.n	800049a <Get_CRLH_Position+0xba>
 8000438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043c:	d027      	beq.n	800048e <Get_CRLH_Position+0xae>
 800043e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000442:	dc03      	bgt.n	800044c <Get_CRLH_Position+0x6c>
 8000444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000448:	d01f      	beq.n	800048a <Get_CRLH_Position+0xaa>
 800044a:	e026      	b.n	800049a <Get_CRLH_Position+0xba>
 800044c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000450:	d01f      	beq.n	8000492 <Get_CRLH_Position+0xb2>
 8000452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000456:	d01e      	beq.n	8000496 <Get_CRLH_Position+0xb6>
 8000458:	e01f      	b.n	800049a <Get_CRLH_Position+0xba>
	{
	//CRL Pins
	case GPIO_PIN_0:
		return 0;
 800045a:	2300      	movs	r3, #0
 800045c:	e01e      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800045e:	2304      	movs	r3, #4
 8000460:	e01c      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000462:	2308      	movs	r3, #8
 8000464:	e01a      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000466:	230c      	movs	r3, #12
 8000468:	e018      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800046a:	2310      	movs	r3, #16
 800046c:	e016      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800046e:	2314      	movs	r3, #20
 8000470:	e014      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000472:	2318      	movs	r3, #24
 8000474:	e012      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000476:	231c      	movs	r3, #28
 8000478:	e010      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
		//CRH Pins
	case GPIO_PIN_8:
		return 0;
 800047a:	2300      	movs	r3, #0
 800047c:	e00e      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800047e:	2304      	movs	r3, #4
 8000480:	e00c      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000482:	2308      	movs	r3, #8
 8000484:	e00a      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000486:	230c      	movs	r3, #12
 8000488:	e008      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800048a:	2310      	movs	r3, #16
 800048c:	e006      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800048e:	2314      	movs	r3, #20
 8000490:	e004      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000492:	2318      	movs	r3, #24
 8000494:	e002      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000496:	231c      	movs	r3, #28
 8000498:	e000      	b.n	800049c <Get_CRLH_Position+0xbc>
		break;
	}

	return 0;
 800049a:	2300      	movs	r3, #0
}
 800049c:	4618      	mov	r0, r3
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <MCAL_GPIO_Init>:
 * @retval		    -none
 * Note             -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B, Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 80004a6:	b590      	push	{r4, r7, lr}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* pconfigregister = NULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]

	pconfigregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	2bff      	cmp	r3, #255	; 0xff
 80004be:	d801      	bhi.n	80004c4 <MCAL_GPIO_Init+0x1e>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	e001      	b.n	80004c8 <MCAL_GPIO_Init+0x22>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3304      	adds	r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]

	//Clear CNFx[1:0] MODEx[1:0]
	(*pconfigregister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff86 	bl	80003e0 <Get_CRLH_Position>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	230f      	movs	r3, #15
 80004da:	4093      	lsls	r3, r2
 80004dc:	43da      	mvns	r2, r3
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	401a      	ands	r2, r3
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	2b05      	cmp	r3, #5
 80004ee:	d00b      	beq.n	8000508 <MCAL_GPIO_Init+0x62>
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d007      	beq.n	8000508 <MCAL_GPIO_Init+0x62>
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	789b      	ldrb	r3, [r3, #2]
 80004fc:	2b06      	cmp	r3, #6
 80004fe:	d003      	beq.n	8000508 <MCAL_GPIO_Init+0x62>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	2b07      	cmp	r3, #7
 8000506:	d10e      	bne.n	8000526 <MCAL_GPIO_Init+0x80>
	{
		//Set CNFx[1:0] MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	3b04      	subs	r3, #4
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	b25a      	sxtb	r2, r3
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	78db      	ldrb	r3, [r3, #3]
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25b      	sxtb	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f003 030f 	and.w	r3, r3, #15
 8000522:	73fb      	strb	r3, [r7, #15]
 8000524:	e02c      	b.n	8000580 <MCAL_GPIO_Init+0xda>
		                        //CNF                              //MODE                     //Need for bits only(0xF)
	}
	//if Pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	789b      	ldrb	r3, [r3, #2]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d003      	beq.n	8000536 <MCAL_GPIO_Init+0x90>
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d107      	bne.n	8000546 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0F);
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	789b      	ldrb	r3, [r3, #2]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f003 030f 	and.w	r3, r3, #15
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	e01c      	b.n	8000580 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	789b      	ldrb	r3, [r3, #2]
 800054a:	2b08      	cmp	r3, #8
 800054c:	d102      	bne.n	8000554 <MCAL_GPIO_Init+0xae>
		{
			//Set CNFx[1:0] MODEx[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0F);
 800054e:	2304      	movs	r3, #4
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e015      	b.n	8000580 <MCAL_GPIO_Init+0xda>
		}
		//PU PD Input
		else
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000554:	2308      	movs	r3, #8
 8000556:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	789b      	ldrb	r3, [r3, #2]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d107      	bne.n	8000570 <MCAL_GPIO_Init+0xca>
			{
				//Input pull up: Table 20. Port bit configuration table (PxODR = 1 )
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	8812      	ldrh	r2, [r2, #0]
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	e007      	b.n	8000580 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//Input pull down: Table 20. Port bit configuration table (PxODR = 0)
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	8812      	ldrh	r2, [r2, #0]
 8000578:	43d2      	mvns	r2, r2
 800057a:	401a      	ands	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
		}


	}
	//Write on the CRL or CRH
	(*pconfigregister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000580:	7bfc      	ldrb	r4, [r7, #15]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff2a 	bl	80003e0 <Get_CRLH_Position>
 800058c:	4603      	mov	r3, r0
 800058e:	fa04 f203 	lsl.w	r2, r4, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	431a      	orrs	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	601a      	str	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd90      	pop	{r4, r7, pc}

080005a4 <MCAL_I2C_Init>:
 * 					 the configuration information for the specified GPIO PIN
 * @retval		    -none
 * Note             -
 */
void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypedef* I2C_InitStruct)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg = 0 , freqrange = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	82fb      	strh	r3, [r7, #22]
 80005b2:	2300      	movs	r3, #0
 80005b4:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 80005b6:	4b7d      	ldr	r3, [pc, #500]	; (80007ac <MCAL_I2C_Init+0x208>)
 80005b8:	613b      	str	r3, [r7, #16]
	uint32_t result = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
	//1- Enable RCC Clock
	if ( I2Cx == I2C1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a7b      	ldr	r2, [pc, #492]	; (80007b0 <MCAL_I2C_Init+0x20c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d110      	bne.n	80005e8 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct;
 80005c6:	4a7b      	ldr	r2, [pc, #492]	; (80007b4 <MCAL_I2C_Init+0x210>)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	4614      	mov	r4, r2
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	682b      	ldr	r3, [r5, #0]
 80005d8:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80005da:	4b77      	ldr	r3, [pc, #476]	; (80007b8 <MCAL_I2C_Init+0x214>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a76      	ldr	r2, [pc, #472]	; (80007b8 <MCAL_I2C_Init+0x214>)
 80005e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	e014      	b.n	8000612 <MCAL_I2C_Init+0x6e>
	}
	else if ( I2Cx == I2C1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a71      	ldr	r2, [pc, #452]	; (80007b0 <MCAL_I2C_Init+0x20c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d110      	bne.n	8000612 <MCAL_I2C_Init+0x6e>
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct;
 80005f0:	4b70      	ldr	r3, [pc, #448]	; (80007b4 <MCAL_I2C_Init+0x210>)
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80005f8:	4615      	mov	r5, r2
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	682b      	ldr	r3, [r5, #0]
 8000604:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8000606:	4b6c      	ldr	r3, [pc, #432]	; (80007b8 <MCAL_I2C_Init+0x214>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a6b      	ldr	r2, [pc, #428]	; (80007b8 <MCAL_I2C_Init+0x214>)
 800060c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000610:	61d3      	str	r3, [r2, #28]
	}

	//2- Check Mode
	if ( I2C_InitStruct->I2C_Mode == I2C_Mode_I2C)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	2b00      	cmp	r3, #0
 8000618:	f040 8081 	bne.w	800071e <MCAL_I2C_Init+0x17a>
	{
		/*-------------------------- INIT Timing --------------------------*/

		//–-- I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 Value */
		tmpreg = I2Cx->CR2;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8000622:	8afb      	ldrh	r3, [r7, #22]
 8000624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000628:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 800062a:	f000 fc1d 	bl	8000e68 <MCAL_RCC_GetPCLK1Freq>
 800062e:	6138      	str	r0, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16_t) (pclk1 / 1000000) ;
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	4a62      	ldr	r2, [pc, #392]	; (80007bc <MCAL_I2C_Init+0x218>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 800063c:	8afa      	ldrh	r2, [r7, #22]
 800063e:	8abb      	ldrh	r3, [r7, #20]
 8000640:	4313      	orrs	r3, r2
 8000642:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg ;
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	605a      	str	r2, [r3, #4]


		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure time */

		I2Cx->CR1 &= ~(I2C_CR1_PE);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 0201 	bic.w	r2, r3, #1
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	82fb      	strh	r3, [r7, #22]

		/*Configure speed in standard mode */
		if ( (I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50K) || (I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100K) )
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000662:	d004      	beq.n	800066e <MCAL_I2C_Init+0xca>
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a55      	ldr	r2, [pc, #340]	; (80007c0 <MCAL_I2C_Init+0x21c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d114      	bne.n	8000698 <MCAL_I2C_Init+0xf4>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16_t)(pclk1 / ( I2C_InitStruct->I2C_ClockSpeed << 1) ) ;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	60fb      	str	r3, [r7, #12]

			tmpreg |= result;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	b29a      	uxth	r2, r3
 8000682:	8afb      	ldrh	r3, [r7, #22]
 8000684:	4313      	orrs	r3, r2
 8000686:	82fb      	strh	r3, [r7, #22]

			I2Cx->CCR = tmpreg;
 8000688:	8afa      	ldrh	r2, [r7, #22]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	61da      	str	r2, [r3, #28]

			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.
			//			(1000 ns / 125 ns = 8 + 1)
			I2Cx->TRISE = freqrange + 1;
 800068e:	8abb      	ldrh	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	461a      	mov	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	621a      	str	r2, [r3, #32]
			//			Fast Mode Not supported
		}

		/*-------------------------- I2Cx_CR1 Configuration --------------------------*/

		tmpreg = I2Cx->CR1 ;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	82fb      	strh	r3, [r7, #22]

		tmpreg |= (uint16_t)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode | I2C_InitStruct->Stretch_Mode);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	8afb      	ldrh	r3, [r7, #22]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 80006c8:	8afa      	ldrh	r2, [r7, #22]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]

		/*-------------------------- I2Cx_OAR1 & I2Cx_OAR2 Configuration --------------------------*/
		tmpreg = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	82fb      	strh	r3, [r7, #22]

		if(I2C_InitStruct->I2C_Slave_Address.Enable_Dual_ADD == 1)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	899b      	ldrh	r3, [r3, #12]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d10d      	bne.n	80006f6 <MCAL_I2C_Init+0x152>
		{
			tmpreg = I2C_OAR2_ENDUAL;
 80006da:	2301      	movs	r3, #1
 80006dc:	82fb      	strh	r3, [r7, #22]
			tmpreg |= I2C_InitStruct->I2C_Slave_Address.Secondary_slave_address << I2C_OAR2_ENDUAL ;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	8a1b      	ldrh	r3, [r3, #16]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 80006f0:	8afa      	ldrh	r2, [r7, #22]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_InitStruct->I2C_Slave_Address.Primary_slave_address << 1;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	89db      	ldrh	r3, [r3, #14]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	b21a      	sxth	r2, r3
 8000702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000706:	4313      	orrs	r3, r2
 8000708:	b21b      	sxth	r3, r3
 800070a:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_InitStruct->I2C_Slave_Address.I2C_Addressing_Slave_Mode;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	b29a      	uxth	r2, r3
 8000712:	8afb      	ldrh	r3, [r7, #22]
 8000714:	4313      	orrs	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	609a      	str	r2, [r3, #8]
	}


	// interrupt Mode ==> Slave Mode
	// Check callback pointer != Null
	if(I2C_InitStruct->P_Slave_Event_CallBack != NULL) // that Enable Slave IRQ States Mode
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d038      	beq.n	8000798 <MCAL_I2C_Init+0x1f4>
	{
		I2Cx->CR2 |= ( I2C_CR2_ITERREN);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= ( I2C_CR2_ITEVTEN);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= ( I2C_CR2_ITBUFEN);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	605a      	str	r2, [r3, #4]

		if ( I2Cx == I2C1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MCAL_I2C_Init+0x20c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d10c      	bne.n	800076c <MCAL_I2C_Init+0x1c8>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MCAL_I2C_Init+0x220>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <MCAL_I2C_Init+0x220>)
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MCAL_I2C_Init+0x224>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <MCAL_I2C_Init+0x224>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	e00f      	b.n	800078c <MCAL_I2C_Init+0x1e8>
		}
		else if ( I2Cx == I2C2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MCAL_I2C_Init+0x228>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d10b      	bne.n	800078c <MCAL_I2C_Init+0x1e8>
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MCAL_I2C_Init+0x224>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MCAL_I2C_Init+0x224>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MCAL_I2C_Init+0x224>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <MCAL_I2C_Init+0x224>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6013      	str	r3, [r2, #0]
		}

		I2Cx->SR1 = 0;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |= I2C_CR1_PE;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f043 0201 	orr.w	r2, r3, #1
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bdb0      	pop	{r4, r5, r7, pc}
 80007ac:	007a1200 	.word	0x007a1200
 80007b0:	40005400 	.word	0x40005400
 80007b4:	2000001c 	.word	0x2000001c
 80007b8:	40021000 	.word	0x40021000
 80007bc:	431bde83 	.word	0x431bde83
 80007c0:	000186a0 	.word	0x000186a0
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000e104 	.word	0xe000e104
 80007cc:	40005800 	.word	0x40005800

080007d0 <MCAL_I2C_GPIO_Set_Pins>:
 * @param [in]		-I2Cx: where x can be (1..3 depending on device used)
 * @retval		    -none
 * Note             -Should Enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_USART_Init()
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
	{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( I2Cx == I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d118      	bne.n	8000812 <MCAL_I2C_GPIO_Set_Pins+0x42>
		{
			//		PB6 : I2C1_SCL
			//		PB7 : I2C_SDA

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80007e0:	2340      	movs	r3, #64	; 0x40
 80007e2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80007e4:	2307      	movs	r3, #7
 80007e6:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80007e8:	2301      	movs	r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	4819      	ldr	r0, [pc, #100]	; (8000858 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80007f4:	f7ff fe57 	bl	80004a6 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80007fc:	2307      	movs	r3, #7
 80007fe:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000800:	2301      	movs	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4813      	ldr	r0, [pc, #76]	; (8000858 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 800080c:	f7ff fe4b 	bl	80004a6 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_1;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
}
 8000810:	e01c      	b.n	800084c <MCAL_I2C_GPIO_Set_Pins+0x7c>
	else if ( I2Cx == I2C2)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a11      	ldr	r2, [pc, #68]	; (800085c <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d118      	bne.n	800084c <MCAL_I2C_GPIO_Set_Pins+0x7c>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000820:	2307      	movs	r3, #7
 8000822:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	480a      	ldr	r0, [pc, #40]	; (8000858 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000830:	f7ff fe39 	bl	80004a6 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000834:	2302      	movs	r3, #2
 8000836:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000838:	2307      	movs	r3, #7
 800083a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000848:	f7ff fe2d 	bl	80004a6 <MCAL_GPIO_Init>
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40005400 	.word	0x40005400
 8000858:	40010c00 	.word	0x40010c00
 800085c:	40005800 	.word	0x40005800

08000860 <MCAL_I2C_Master_TX>:
 * @param [in]		-PollingEn Enable pooling or disable it
 * @retval		    -none
 * Note             -
 */
void MCAL_I2C_Master_TX (I2C_TypeDef* I2Cx, uint16_t devAddr, uint8_t* dataout,uint32_t datalen, Stop_Condition Stop, Repeated_Start Start)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	460b      	mov	r3, r1
 800086e:	817b      	strh	r3, [r7, #10]
	//todo
	//support timeout (configure timer working for specific duration rise interrupt
	//timer_interrupt() { flag = 1 }
	//so any code exist in while (check_flag || Any polling condition)
	// 1. Set the Start Bit in the I2C_CR1 register to generate a Start Condition
	I2C_GenerateSTART(I2Cx,ENABLE,Start);
 8000870:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000874:	461a      	mov	r2, r3
 8000876:	2101      	movs	r1, #1
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f000 f8b7 	bl	80009ec <I2C_GenerateSTART>

	// 2. Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while( !(I2C_GetFlagStatus(I2Cx,EV5)) );
 800087e:	bf00      	nop
 8000880:	2101      	movs	r1, #1
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f000 f8da 	bl	8000a3c <I2C_GetFlagStatus>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0f8      	beq.n	8000880 <MCAL_I2C_Master_TX+0x20>

	// 3. Send Address
	I2C_SendAddres(I2Cx,devAddr,I2C_Direction_Transmitter); //Address
 800088e:	897b      	ldrh	r3, [r7, #10]
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f000 f94f 	bl	8000b38 <I2C_SendAddres>

	// 4.wait EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while( !(I2C_GetFlagStatus(I2Cx,EV6)) );
 800089a:	bf00      	nop
 800089c:	2102      	movs	r1, #2
 800089e:	68f8      	ldr	r0, [r7, #12]
 80008a0:	f000 f8cc 	bl	8000a3c <I2C_GetFlagStatus>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f8      	beq.n	800089c <MCAL_I2C_Master_TX+0x3c>

	// 5. /* TRA, BUSY, MSL, TXE flags */
	while( !(I2C_GetFlagStatus(I2Cx,MASTER_BYTE_TRANSMITTING)) );
 80008aa:	bf00      	nop
 80008ac:	4915      	ldr	r1, [pc, #84]	; (8000904 <MCAL_I2C_Master_TX+0xa4>)
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 f8c4 	bl	8000a3c <I2C_GetFlagStatus>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f8      	beq.n	80008ac <MCAL_I2C_Master_TX+0x4c>

	for(i = 0 ; i < datalen ; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e011      	b.n	80008e4 <MCAL_I2C_Master_TX+0x84>
	{
		/* Write in the DR register the data to be sent */
		I2Cx->DR = dataout[i];
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	611a      	str	r2, [r3, #16]
		//EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		while( !(I2C_GetFlagStatus(I2Cx,EV8)) );
 80008ce:	bf00      	nop
 80008d0:	2103      	movs	r1, #3
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f000 f8b2 	bl	8000a3c <I2C_GetFlagStatus>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f8      	beq.n	80008d0 <MCAL_I2C_Master_TX+0x70>
	for(i = 0 ; i < datalen ; i++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d8e9      	bhi.n	80008c0 <MCAL_I2C_Master_TX+0x60>
	}
	// 6. wait EV8_2
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//while( !(I2C_GetFlagStatus(I2Cx,EV8_2) );

	if(Stop == With_Stop)
 80008ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d103      	bne.n	80008fc <MCAL_I2C_Master_TX+0x9c>
	{
		// 7. Send Stop Condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 80008f4:	2101      	movs	r1, #1
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f000 f954 	bl	8000ba4 <I2C_GenerateSTOP>
	}


}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	00070080 	.word	0x00070080

08000908 <MCAL_I2C_Master_RX>:
 * @param [in]		-PollingEn Enable pooling or disable it
 * @retval		    -none
 * Note             -
 */
void MCAL_I2C_Master_RX (I2C_TypeDef* I2Cx, uint16_t devAddr, uint8_t* dataout,uint32_t datalen, Stop_Condition Stop, Repeated_Start Start)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	460b      	mov	r3, r1
 8000916:	817b      	strh	r3, [r7, #10]
	uint8_t index =	I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX	;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4a32      	ldr	r2, [pc, #200]	; (80009e4 <MCAL_I2C_Master_RX+0xdc>)
 800091c:	4293      	cmp	r3, r2
 800091e:	bf14      	ite	ne
 8000920:	2301      	movne	r3, #1
 8000922:	2300      	moveq	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	74fb      	strb	r3, [r7, #19]

	int i;
	// 1. Set the Start Bit in the I2C_CR1 register to generate a Start Condition
	I2C_GenerateSTART(I2Cx,ENABLE,Start);
 8000928:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800092c:	461a      	mov	r2, r3
 800092e:	2101      	movs	r1, #1
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f000 f85b 	bl	80009ec <I2C_GenerateSTART>

	// 2. Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while( !(I2C_GetFlagStatus(I2Cx,EV5)) );
 8000936:	bf00      	nop
 8000938:	2101      	movs	r1, #1
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f000 f87e 	bl	8000a3c <I2C_GetFlagStatus>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f8      	beq.n	8000938 <MCAL_I2C_Master_RX+0x30>

	// 3. Send Address
	I2C_SendAddres(I2Cx,devAddr,I2C_Direction_Receiver); //Address
 8000946:	897b      	ldrh	r3, [r7, #10]
 8000948:	2201      	movs	r2, #1
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 f8f3 	bl	8000b38 <I2C_SendAddres>

	// 4.wait EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while( !(I2C_GetFlagStatus(I2Cx,EV6)) );
 8000952:	bf00      	nop
 8000954:	2102      	movs	r1, #2
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 f870 	bl	8000a3c <I2C_GetFlagStatus>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0f8      	beq.n	8000954 <MCAL_I2C_Master_RX+0x4c>

	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000962:	2101      	movs	r1, #1
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f000 f938 	bl	8000bda <I2C_AcknowledgeConfig>

	if(datalen)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d018      	beq.n	80009a2 <MCAL_I2C_Master_RX+0x9a>
	{
		for(i  = datalen ; i > 1 ; i--)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e012      	b.n	800099c <MCAL_I2C_Master_RX+0x94>
		{
			/* Wait until RXNE becomes 1 */
			while( !(I2C_GetFlagStatus(I2Cx,EV7)) );
 8000976:	bf00      	nop
 8000978:	2105      	movs	r1, #5
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f85e 	bl	8000a3c <I2C_GetFlagStatus>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f8      	beq.n	8000978 <MCAL_I2C_Master_RX+0x70>
			/* read the data from data register in to buffer */
			*dataout = I2Cx->DR;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	701a      	strb	r2, [r3, #0]
			/* increment the buffer address */
			dataout++;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3301      	adds	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
		for(i  = datalen ; i > 1 ; i--)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3b01      	subs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	dce9      	bgt.n	8000976 <MCAL_I2C_Master_RX+0x6e>

		}

	}

	I2C_AcknowledgeConfig(I2Cx,DISABLE);
 80009a2:	2100      	movs	r1, #0
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f000 f918 	bl	8000bda <I2C_AcknowledgeConfig>

	if(Stop == With_Stop)
 80009aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d103      	bne.n	80009ba <MCAL_I2C_Master_RX+0xb2>
		{
			// 7. Send Stop Condition
			I2C_GenerateSTOP(I2Cx, ENABLE);
 80009b2:	2101      	movs	r1, #1
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f000 f8f5 	bl	8000ba4 <I2C_GenerateSTOP>
		}

	//re-enable-Ack
		if(Global_I2C_Config[index].I2C_ACK_Control == I2C_ACK_Enable)
 80009ba:	7cfa      	ldrb	r2, [r7, #19]
 80009bc:	490a      	ldr	r1, [pc, #40]	; (80009e8 <MCAL_I2C_Master_RX+0xe0>)
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	3318      	adds	r3, #24
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009d0:	d103      	bne.n	80009da <MCAL_I2C_Master_RX+0xd2>
		{
			I2C_AcknowledgeConfig(I2Cx,ENABLE);
 80009d2:	2101      	movs	r1, #1
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 f900 	bl	8000bda <I2C_AcknowledgeConfig>
		}
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40005400 	.word	0x40005400
 80009e8:	2000001c 	.word	0x2000001c

080009ec <I2C_GenerateSTART>:
{
	return (uint8_t) I2Cx->DR;
}

void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState, Repeated_Start Start)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
 80009f8:	4613      	mov	r3, r2
 80009fa:	70bb      	strb	r3, [r7, #2]
	if ( Start != Repeated_start)
 80009fc:	78bb      	ldrb	r3, [r7, #2]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d007      	beq.n	8000a12 <I2C_GenerateSTART+0x26>
	{
		//Check if the Bus is idle
		while( I2C_GetFlagStatus(I2Cx,I2C_FLAG_BUSY) );
 8000a02:	bf00      	nop
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f818 	bl	8000a3c <I2C_GetFlagStatus>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f8      	bne.n	8000a04 <I2C_GenerateSTART+0x18>
//	1: Repeated start generation
//	In Slave mode:
//	0: No Start generation
//	1: Start generation when the bus is free

	if(NewState != DISABLE)
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d006      	beq.n	8000a26 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;

	}
}
 8000a24:	e005      	b.n	8000a32 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status Flag)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;
	FlagStatus bitstatus = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	77fb      	strb	r3, [r7, #31]
	uint32_t flag1 = 0 , flag2 = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0 ;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
	switch(Flag)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d026      	beq.n	8000aaa <I2C_GetFlagStatus+0x6e>
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d804      	bhi.n	8000a6a <I2C_GetFlagStatus+0x2e>
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00a      	beq.n	8000a7a <I2C_GetFlagStatus+0x3e>
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d014      	beq.n	8000a92 <I2C_GetFlagStatus+0x56>
 8000a68:	e05e      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	d050      	beq.n	8000b10 <I2C_GetFlagStatus+0xd4>
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <I2C_GetFlagStatus+0xf8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d026      	beq.n	8000ac2 <I2C_GetFlagStatus+0x86>
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d03f      	beq.n	8000af8 <I2C_GetFlagStatus+0xbc>
 8000a78:	e056      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
			//		1: Communication ongoing on the bus
			//		– Set by hardware on detection of SDA or SCL low
			//		– cleared by hardware on detection of a Stop condition.
			//		It indicates a communication in progress on the bus. This information is still updated when
			//		the interface is disabled (PE=0).
			if( (I2Cx->SR2) & (I2C_SR2_BUSY) )
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <I2C_GetFlagStatus+0x50>
			{
				bitstatus = SET;
 8000a86:	2301      	movs	r3, #1
 8000a88:	77fb      	strb	r3, [r7, #31]
			}
			else
			{
				bitstatus = RESET;
			}
			break;
 8000a8a:	e04d      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
				bitstatus = RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	77fb      	strb	r3, [r7, #31]
			break;
 8000a90:	e04a      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
			//			0: No Start condition
			//			1: Start condition generated.
			//			– Set when a Start condition generated.
			//			– Cleared by software by reading the SR1 register followed by writing the DR register, or by
			//			hardware when PE=0
			if( (I2Cx->SR1) & (I2C_SR1_SB) )
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <I2C_GetFlagStatus+0x68>
			{
				bitstatus = SET;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	77fb      	strb	r3, [r7, #31]
			}
			else
			{
				bitstatus = RESET;
			}
			break;
 8000aa2:	e041      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
				bitstatus = RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	77fb      	strb	r3, [r7, #31]
			break;
 8000aa8:	e03e      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
			//			0: Address mismatched or not received.
			//			1: Received address matched.
			//			– Set by hardware as soon as the received slave address matched with the OAR registers
			//			content or a general call or a SMBus Device Default Address or SMBus Host or SMBus Alert
			//			is recognized. (when enabled depending on configuration).
			if( (I2Cx->SR1) & (I2C_SR1_ADDR) )
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <I2C_GetFlagStatus+0x80>
			{
				bitstatus = SET;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	77fb      	strb	r3, [r7, #31]
			{
				bitstatus = RESET;
			}
			//to clear ADDR field : cleared by software reading SR1 register followed reading SR2
		//  	dummyRead = I2Cx->SR2;
			break;
 8000aba:	e035      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
				bitstatus = RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	77fb      	strb	r3, [r7, #31]
			break;
 8000ac0:	e032      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
		}
		case MASTER_BYTE_TRANSMITTING:
		{
			/* Read the I2Cx status register */
			flag1 = I2Cx->SR1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	61bb      	str	r3, [r7, #24]
			flag2 = I2Cx->SR2;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	617b      	str	r3, [r7, #20]
			flag2 = flag2 << 16;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	041b      	lsls	r3, r3, #16
 8000ad2:	617b      	str	r3, [r7, #20]
			/* Get the last event value from I2C status register */
			lastevent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ade:	613b      	str	r3, [r7, #16]
			if( (lastevent & Flag) == Flag )
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d102      	bne.n	8000af2 <I2C_GetFlagStatus+0xb6>
			{
				/* SUCESS Last event is equal to I2C_EVENT */
				bitstatus = SET;
 8000aec:	2301      	movs	r3, #1
 8000aee:	77fb      	strb	r3, [r7, #31]
				/* ERROR: Last event is different from I2C_EVENT */
				bitstatus = RESET;
			}
			//to clear ADDR field : cleared by software reading SR1 register followed reading SR2

			break;
 8000af0:	e01a      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
				bitstatus = RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	77fb      	strb	r3, [r7, #31]
			break;
 8000af6:	e017      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
			//			1: Data register empty
			//			– Set when DR is empty in transmission. TxE is not set during address phase.
			//			– Cleared by software writing to the DR register or by hardware after a start or a stop condition
			//			or when PE=0.
			//			TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
			if( (I2Cx->SR1) & (I2C_SR1_TXE) )
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <I2C_GetFlagStatus+0xce>
			{
				bitstatus = SET;
 8000b04:	2301      	movs	r3, #1
 8000b06:	77fb      	strb	r3, [r7, #31]
			}
			else
			{
				bitstatus = RESET;
			}
			break;
 8000b08:	e00e      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
				bitstatus = RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	77fb      	strb	r3, [r7, #31]
			break;
 8000b0e:	e00b      	b.n	8000b28 <I2C_GetFlagStatus+0xec>
			//				0: Data register empty
			//				1: Data register not empty
			//				– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
			//				– Cleared by software reading or writing the DR register or by hardware when PE=0.
			//				RxNE is not set in case of ARLO event.
			if( (I2Cx->SR1) & (I2C_SR1_RXNE) )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <I2C_GetFlagStatus+0xe6>
			{
				bitstatus = SET;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	77fb      	strb	r3, [r7, #31]
			}
			else
			{
				bitstatus = RESET;
			}
			break;
 8000b20:	e001      	b.n	8000b26 <I2C_GetFlagStatus+0xea>
				bitstatus = RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	77fb      	strb	r3, [r7, #31]
			break;
 8000b26:	bf00      	nop
		}
	}


	return bitstatus;
 8000b28:	7ffb      	ldrb	r3, [r7, #31]

}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	00070080 	.word	0x00070080

08000b38 <I2C_SendAddres>:

void I2C_SendAddres(I2C_TypeDef* I2Cx, uint16_t Address, I2C_Direction Direction)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
	uint8_t index =	I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX	;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <I2C_SendAddres+0x64>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	bf14      	ite	ne
 8000b50:	2301      	movne	r3, #1
 8000b52:	2300      	moveq	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	73fb      	strb	r3, [r7, #15]

	if(Global_I2C_Config[index].I2C_Slave_Address.I2C_Addressing_Slave_Mode == I2C_Addressing_Slave_mode_7Bit)
 8000b58:	7bfa      	ldrb	r2, [r7, #15]
 8000b5a:	4911      	ldr	r1, [pc, #68]	; (8000ba0 <I2C_SendAddres+0x68>)
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	440b      	add	r3, r1
 8000b66:	3314      	adds	r3, #20
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10e      	bne.n	8000b8c <I2C_SendAddres+0x54>
	{

		Address = (Address << 1);
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	807b      	strh	r3, [r7, #2]

		if ( Direction != I2C_Direction_Transmitter)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d004      	beq.n	8000b84 <I2C_SendAddres+0x4c>
		{
			/* Set the address bit0 for read */
			Address |= 1<<0;
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	807b      	strh	r3, [r7, #2]
 8000b82:	e003      	b.n	8000b8c <I2C_SendAddres+0x54>
		}
		else
		{
			/* Reset the address bit0 for write */
			Address &= ~(1<<0);
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	f023 0301 	bic.w	r3, r3, #1
 8000b8a:	807b      	strh	r3, [r7, #2]
	else
	{
		//not supported for 10bit mode
	}

	I2Cx->DR = Address;
 8000b8c:	887a      	ldrh	r2, [r7, #2]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	611a      	str	r2, [r3, #16]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	2000001c 	.word	0x2000001c

08000ba4 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d006      	beq.n	8000bc4 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP) ;

	}
}
 8000bc2:	e005      	b.n	8000bd0 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP) ;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <I2C_AcknowledgeConfig>:
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <I2C_AcknowledgeConfig+0x20>
		{
			/* Generate a ACK condition */
			I2Cx->CR1 |= I2C_CR1_ACK;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
		else
		{
			/* Disable the ACK condition generation */
			I2Cx->CR1 &= ~(I2C_CR1_ACK) ;
		}
}
 8000bf8:	e005      	b.n	8000c06 <I2C_AcknowledgeConfig+0x2c>
			I2Cx->CR1 &= ~(I2C_CR1_ACK) ;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <Slave_States>:

void Slave_States(I2C_TypeDef* I2Cx, Slave_State State)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	uint8_t index =	I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX	;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <Slave_States+0xd8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	73fb      	strb	r3, [r7, #15]

	switch(State)
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d856      	bhi.n	8000ce0 <Slave_States+0xd0>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <Slave_States+0x28>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000c53 	.word	0x08000c53
 8000c3c:	08000c4d 	.word	0x08000c4d
 8000c40:	08000c77 	.word	0x08000c77
 8000c44:	08000c8f 	.word	0x08000c8f
 8000c48:	08000cb3 	.word	0x08000cb3
	{

		case I2C_ERROR_AF:
		{

			if( (I2Cx->SR2) & (I2C_SR2_TRA) )
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699b      	ldr	r3, [r3, #24]
			{
				// Slave shouldn't send anything else
			}

			break;
 8000c50:	e046      	b.n	8000ce0 <Slave_States+0xd0>
		}
		case I2C_EV_STOP:
		{
			//Make sure that the slave is really in transmitter mode
			if( (I2Cx->SR2) & (I2C_SR2_TRA) )
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d03b      	beq.n	8000cd6 <Slave_States+0xc6>
			{
				//Notify APP that the Stop Condition is sent by the master
				Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	4922      	ldr	r1, [pc, #136]	; (8000cec <Slave_States+0xdc>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3320      	adds	r3, #32
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2000      	movs	r0, #0
 8000c72:	4798      	blx	r3
			}

			break;
 8000c74:	e02f      	b.n	8000cd6 <Slave_States+0xc6>
		}
		case I2C_EV_ADDR_Matched:
			{
					//Notify APP that the Stop Condition is sent by the master
					Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	491c      	ldr	r1, [pc, #112]	; (8000cec <Slave_States+0xdc>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	3320      	adds	r3, #32
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2002      	movs	r0, #2
 8000c8a:	4798      	blx	r3
			}
			break;
 8000c8c:	e028      	b.n	8000ce0 <Slave_States+0xd0>

		case I2C_EV_Data_REQ:
			{
				//Make sure that the slave is really in transmitter mode
				if( (I2Cx->SR2) & (I2C_SR2_TRA) )
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d01f      	beq.n	8000cda <Slave_States+0xca>
				{
					//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
					Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_Data_REQ);
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	4913      	ldr	r1, [pc, #76]	; (8000cec <Slave_States+0xdc>)
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3320      	adds	r3, #32
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2003      	movs	r0, #3
 8000cae:	4798      	blx	r3
				}

				break;
 8000cb0:	e013      	b.n	8000cda <Slave_States+0xca>
			}
		case I2C_EV_Data_RCV:
		{
			//Make sure that the slave is really in receiver mode
			if( (I2Cx->SR2) & (I2C_SR2_TRA) )
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <Slave_States+0xce>
			{
				//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
				Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_Data_RCV);
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	490a      	ldr	r1, [pc, #40]	; (8000cec <Slave_States+0xdc>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3320      	adds	r3, #32
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2004      	movs	r0, #4
 8000cd2:	4798      	blx	r3
			}

			break;
 8000cd4:	e003      	b.n	8000cde <Slave_States+0xce>
			break;
 8000cd6:	bf00      	nop
 8000cd8:	e002      	b.n	8000ce0 <Slave_States+0xd0>
				break;
 8000cda:	bf00      	nop
 8000cdc:	e000      	b.n	8000ce0 <Slave_States+0xd0>
			break;
 8000cde:	bf00      	nop

	}



}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	2000001c 	.word	0x2000001c

08000cf0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <I2C1_EV_IRQHandler+0xe8>)
 8000d08:	617b      	str	r3, [r7, #20]
	/* Interrupt handling for both master and slave mode of a device */
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & ( I2C_CR2_ITEVTEN );
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d12:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & ( I2C_CR2_ITBUFEN );
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1c:	60fb      	str	r3, [r7, #12]
	temp3 = I2Cx->CR2 & ( I2C_SR1_STOPF );
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	60bb      	str	r3, [r7, #8]

	//Handle for interrupt generated by STOPE event
	//Note: Stop detection flag is applicable only slave mode
	if ( temp1 && temp3 )
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00a      	beq.n	8000d44 <I2C1_EV_IRQHandler+0x48>
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <I2C1_EV_IRQHandler+0x48>
	{
		//STOPF flag is set
		//Clear the STOPF ( i.e 1 ) read SR1 2) Write to CR1
		I2Cx->CR1 |= 0x0000;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx, I2C_EV_STOP);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff66 	bl	8000c10 <Slave_States>
	}

	//-------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_ADDR );
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	60bb      	str	r3, [r7, #8]
	//Handle for interrupt generated by the ADDR event
	//Note: When master mode : Address is sent
	//		When Slave mode  : Address matched with own address
	if ( temp1 && temp3 )
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d012      	beq.n	8000d7a <I2C1_EV_IRQHandler+0x7e>
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00f      	beq.n	8000d7a <I2C1_EV_IRQHandler+0x7e>
	{
		// Interrupt is generated because of ADDR event
		//Check for device mode
		if ( I2Cx->SR2 & ( I2C_SR2_MSL) )
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d109      	bne.n	8000d7a <I2C1_EV_IRQHandler+0x7e>
			//Master
		}
		else
		{
			//clear the ADDR flag ( read SR1 , read SR2 )
			dummy_read = I2Cx->SR1;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	607b      	str	r3, [r7, #4]
			dummy_read = I2Cx->SR2;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx, I2C_EV_ADDR_Matched);
 8000d72:	2102      	movs	r1, #2
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ff4b 	bl	8000c10 <Slave_States>
		}
	}

	//-------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_TXE );
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d82:	60bb      	str	r3, [r7, #8]
	//Handle for interrupt generated by the TXE event
	if ( temp1 && temp2 && temp3 )
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00f      	beq.n	8000daa <I2C1_EV_IRQHandler+0xae>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00c      	beq.n	8000daa <I2C1_EV_IRQHandler+0xae>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d009      	beq.n	8000daa <I2C1_EV_IRQHandler+0xae>
	{

		//Check for device mode
		if ( I2Cx->SR2 & ( I2C_SR2_MSL) )
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d103      	bne.n	8000daa <I2C1_EV_IRQHandler+0xae>

		}
		else
		{
			//slave
			Slave_States(I2Cx, I2C_EV_Data_REQ);
 8000da2:	2103      	movs	r1, #3
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f7ff ff33 	bl	8000c10 <Slave_States>
		}
	}

	//-------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_RXNE );
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db2:	60bb      	str	r3, [r7, #8]
	//Handle for interrupt generated by SB = 1, cleared by reading SR1
	if ( temp1 && temp2 && temp3 )
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00f      	beq.n	8000dda <I2C1_EV_IRQHandler+0xde>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00c      	beq.n	8000dda <I2C1_EV_IRQHandler+0xde>
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d009      	beq.n	8000dda <I2C1_EV_IRQHandler+0xde>
	{

		//Check for device mode
		if ( I2Cx->SR2 & ( I2C_SR2_MSL) )
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <I2C1_EV_IRQHandler+0xde>
			//The device is master
		}
		else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_Data_RCV);
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	6978      	ldr	r0, [r7, #20]
 8000dd6:	f7ff ff1b 	bl	8000c10 <Slave_States>
		}
	}
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40005400 	.word	0x40005400

08000de8 <I2C2_ER_IRQHandler>:



void I2C2_ER_IRQHandler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <MCAL_RCC_GetSYS_CLCKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint16_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9}; //Shift 1 right == divide by 2

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch( (RCC->CFGR >> 2) & 0b11)
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d006      	beq.n	8000e20 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d302      	bcc.n	8000e1c <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d004      	beq.n	8000e24 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000e1a:	e005      	b.n	8000e28 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{

	case 0:

		return HSI_RC_Clk;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000e1e:	e003      	b.n	8000e28 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;

	case 1:

		//todo need to calculate it //HSE User Should Specify it
		return HSE_Clock;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000e22:	e001      	b.n	8000e28 <MCAL_RCC_GetSYS_CLCKFreq+0x28>

	case 2:

		//todo need to calculate it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000e26:	e7ff      	b.n	8000e28 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}

}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000
 8000e34:	007a1200 	.word	0x007a1200
 8000e38:	00f42400 	.word	0x00f42400

08000e3c <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4) & 0xF) ] );
 8000e40:	f7ff ffde 	bl	8000e00 <MCAL_RCC_GetSYS_CLCKFreq>
 8000e44:	4601      	mov	r1, r0
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	f003 030f 	and.w	r3, r3, #15
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <MCAL_RCC_GetHCLKFreq+0x28>)
 8000e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	080010e8 	.word	0x080010e8

08000e68 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return  (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8) & 0b111) ] );
 8000e6c:	f7ff ffe6 	bl	8000e3c <MCAL_RCC_GetHCLKFreq>
 8000e70:	4601      	mov	r1, r0
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	0a1b      	lsrs	r3, r3, #8
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	080010e0 	.word	0x080010e0

08000e90 <SPI1_IRQHandler>:
* ==================================================================
*/


void SPI1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr;

	irq_scr.TXE  = ( ( SPI1->SR & (1<<1)) >> 1);
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <SPI1_IRQHandler+0x54>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	793b      	ldrb	r3, [r7, #4]
 8000ea4:	f362 0300 	bfi	r3, r2, #0, #1
 8000ea8:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNE = ( ( SPI1->SR & (1<<0)) >> 0);
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <SPI1_IRQHandler+0x54>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	793b      	ldrb	r3, [r7, #4]
 8000eb6:	f362 0341 	bfi	r3, r2, #1, #1
 8000eba:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRI = ( ( SPI1->SR & (1<<4)) >> 4);
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <SPI1_IRQHandler+0x54>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	793b      	ldrb	r3, [r7, #4]
 8000eca:	f362 0382 	bfi	r3, r2, #2, #1
 8000ece:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_scr);
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SPI1_IRQHandler+0x58>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	7938      	ldrb	r0, [r7, #4]
 8000ed8:	4798      	blx	r3
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40013000 	.word	0x40013000
 8000ee8:	20000064 	.word	0x20000064

08000eec <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr;

	irq_scr.TXE  = ( ( SPI2->SR & (1<<1)) >> 1);
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <SPI2_IRQHandler+0x54>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	085b      	lsrs	r3, r3, #1
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	f362 0300 	bfi	r3, r2, #0, #1
 8000f04:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNE = ( ( SPI2->SR & (1<<0)) >> 0);
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <SPI2_IRQHandler+0x54>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	793b      	ldrb	r3, [r7, #4]
 8000f12:	f362 0341 	bfi	r3, r2, #1, #1
 8000f16:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRI = ( ( SPI2->SR & (1<<4)) >> 4);
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <SPI2_IRQHandler+0x54>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	f362 0382 	bfi	r3, r2, #2, #1
 8000f2a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_scr);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SPI2_IRQHandler+0x58>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	7938      	ldrb	r0, [r7, #4]
 8000f34:	4798      	blx	r3
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40003800 	.word	0x40003800
 8000f44:	20000064 	.word	0x20000064

08000f48 <USART1_IRQHandler>:
	}
}

//ISR
void USART1_IRQHandler (void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <USART1_IRQHandler+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	4798      	blx	r3
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000006c 	.word	0x2000006c

08000f5c <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <USART2_IRQHandler+0x10>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4798      	blx	r3
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000006c 	.word	0x2000006c

08000f70 <USART3_IRQHandler>:


void USART3_IRQHandler (void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <USART3_IRQHandler+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4798      	blx	r3
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000006c 	.word	0x2000006c

08000f84 <main>:
//#include "STM32F103C6_GPIO_Drivers.h"
//#include "STM32F103C6_EXTI_Drivers.h"
//#include "STM32F103C6_I2C_Drivers.h"
#include "I2C_Slave_EEPROM.h"
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
	/* Enable clock GPIOA */
	RCC_GPIOA_CLK_EN();
 8000f8a:	4b24      	ldr	r3, [pc, #144]	; (800101c <main+0x98>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a23      	ldr	r2, [pc, #140]	; (800101c <main+0x98>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6193      	str	r3, [r2, #24]
	/* Enable clock GPIOB */
	RCC_GPIOB_CLK_EN();
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <main+0x98>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <main+0x98>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6193      	str	r3, [r2, #24]

	/* Enable Clock For AFIO */
	RCC_AFIO_CLK_EN();
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <main+0x98>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	; (800101c <main+0x98>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6193      	str	r3, [r2, #24]



	// ================= TEST_Case_1 ================= //
	uint8_t ch1[] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6,0x7};
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <main+0x9c>)
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb8:	6018      	str	r0, [r3, #0]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	8019      	strh	r1, [r3, #0]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	0c0a      	lsrs	r2, r1, #16
 8000fc2:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	f8c3 2003 	str.w	r2, [r3, #3]


	EEPROM_Init();
 8000fce:	f7ff f8cf 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	20af      	movs	r0, #175	; 0xaf
 8000fdc:	f7ff f8e8 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_NBytes(0xAF, ch2, 7);
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	20af      	movs	r0, #175	; 0xaf
 8000fe8:	f7ff f934 	bl	8000254 <EEPROM_Read_NBytes>

	// ================= TEST_Case_1 ================= //


	ch1[0] = 0xA;
 8000fec:	230a      	movs	r3, #10
 8000fee:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000ff8:	230d      	movs	r3, #13
 8000ffa:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2204      	movs	r2, #4
 8001002:	4619      	mov	r1, r3
 8001004:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001008:	f7ff f8d2 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_NBytes(0xFFF, ch2, 4);
 800100c:	463b      	mov	r3, r7
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001016:	f7ff f91d 	bl	8000254 <EEPROM_Read_NBytes>
	/* Loop forever */
	for(;;);
 800101a:	e7fe      	b.n	800101a <main+0x96>
 800101c:	40021000 	.word	0x40021000
 8001020:	080010d8 	.word	0x080010d8

08001024 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001026:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001028:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <LoopForever+0x6>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LoopForever+0xe>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	; (8001070 <LoopForever+0x16>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001052:	f000 f811 	bl	8001078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f7ff ff95 	bl	8000f84 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   r0, =_estack
 800105c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001068:	08001110 	.word	0x08001110
  ldr r2, =_sbss
 800106c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001070:	200000ac 	.word	0x200000ac

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>
	...

08001078 <__libc_init_array>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	2500      	movs	r5, #0
 800107c:	4e0c      	ldr	r6, [pc, #48]	; (80010b0 <__libc_init_array+0x38>)
 800107e:	4c0d      	ldr	r4, [pc, #52]	; (80010b4 <__libc_init_array+0x3c>)
 8001080:	1ba4      	subs	r4, r4, r6
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	42a5      	cmp	r5, r4
 8001086:	d109      	bne.n	800109c <__libc_init_array+0x24>
 8001088:	f000 f81a 	bl	80010c0 <_init>
 800108c:	2500      	movs	r5, #0
 800108e:	4e0a      	ldr	r6, [pc, #40]	; (80010b8 <__libc_init_array+0x40>)
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <__libc_init_array+0x44>)
 8001092:	1ba4      	subs	r4, r4, r6
 8001094:	10a4      	asrs	r4, r4, #2
 8001096:	42a5      	cmp	r5, r4
 8001098:	d105      	bne.n	80010a6 <__libc_init_array+0x2e>
 800109a:	bd70      	pop	{r4, r5, r6, pc}
 800109c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010a0:	4798      	blx	r3
 80010a2:	3501      	adds	r5, #1
 80010a4:	e7ee      	b.n	8001084 <__libc_init_array+0xc>
 80010a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010aa:	4798      	blx	r3
 80010ac:	3501      	adds	r5, #1
 80010ae:	e7f2      	b.n	8001096 <__libc_init_array+0x1e>
 80010b0:	08001108 	.word	0x08001108
 80010b4:	08001108 	.word	0x08001108
 80010b8:	08001108 	.word	0x08001108
 80010bc:	0800110c 	.word	0x0800110c

080010c0 <_init>:
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	bf00      	nop
 80010c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c6:	bc08      	pop	{r3}
 80010c8:	469e      	mov	lr, r3
 80010ca:	4770      	bx	lr

080010cc <_fini>:
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	bf00      	nop
 80010d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d2:	bc08      	pop	{r3}
 80010d4:	469e      	mov	lr, r3
 80010d6:	4770      	bx	lr
